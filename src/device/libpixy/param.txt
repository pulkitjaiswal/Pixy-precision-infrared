; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\param.o --asm_dir=.\ --list_dir=.\ --depend=.\param.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I. -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\param.crf param.cpp]
                          THUMB

                          AREA ||i._Z10prm_formatv||, CODE, READONLY, ALIGN=2

                  _Z10prm_formatv PROC ; prm_format()
;;;166    
;;;167    int prm_format()
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    	flash_erase(PRM_FLASH_LOC, PRM_ALLOCATED_LEN);
000002  4909              LDR      r1,|L1.40|
000004  68c9              LDR      r1,[r1,#0xc]  ; g_spifi
000006  f10151a0          ADD      r1,r1,#0x14000000
00000a  f5a14000          SUB      r0,r1,#0x8000
00000e  f44f4100          MOV      r1,#0x8000
000012  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
;;;170    	cprintf("All parameters have been erased and restored to their defaults!\n");
000016  4805              LDR      r0,|L1.44|
000018  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;171    	g_dirty = true;
00001c  2001              MOVS     r0,#1
00001e  4904              LDR      r1,|L1.48|
000020  7008              STRB     r0,[r1,#0]
;;;172    	return 0;
000022  2000              MOVS     r0,#0
;;;173    }
000024  bd10              POP      {r4,pc}
;;;174    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      g_spifi
                  |L1.44|
                          DCD      ||.conststring||+0x200
                  |L1.48|
                          DCD      g_dirty

                          AREA ||i._Z10prm_getAllRKtP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z10prm_getAllRKtP5Chirp PROC ; prm_getAll(const unsigned short&, Chirp*)
;;;143    
;;;144    int32_t  prm_getAll(const uint16_t &index, Chirp *chirp)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;145    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
;;;146    	int res;
;;;147    	uint16_t i;
;;;148    	uint8_t *data, argList[CRP_MAX_ARGS];
;;;149    	ParamRecord *rec;
;;;150    
;;;151    	for (i=0, rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; i++, rec++)
00000a  f04f0900          MOV      r9,#0
00000e  4828              LDR      r0,|L2.176|
000010  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000012  f10050a0          ADD      r0,r0,#0x14000000
000016  f5a04400          SUB      r4,r0,#0x8000
00001a  e03a              B        |L2.146|
                  |L2.28|
;;;152    	{
;;;153    		if(i==index)
00001c  8838              LDRH     r0,[r7,#0]
00001e  4548              CMP      r0,r9
000020  d131              BNE      |L2.134|
;;;154    		{
;;;155    			data = (uint8_t *)rec+prm_getDataOffset(rec);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000028  1906              ADDS     r6,r0,r4
;;;156    			res = Chirp::getArgList(data, rec->len, argList);
00002a  8861              LDRH     r1,[r4,#2]
00002c  aa0c              ADD      r2,sp,#0x30
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       _ZN5Chirp10getArgListEPhjS0_ ; Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
000034  4605              MOV      r5,r0
;;;157    			if (res<0)
000036  2d00              CMP      r5,#0
000038  da03              BGE      |L2.66|
;;;158    				return res;
00003a  4628              MOV      r0,r5
                  |L2.60|
;;;159    			CRP_RETURN(chirp, UINT32(rec->flags), STRING(argList), STRING(prm_getId(rec)), STRING(prm_getDesc(rec)),  UINTS8(rec->len, data), END);
;;;160    			return 0;
;;;161    		}
;;;162    	}
;;;163    	return -1;	
;;;164    }
00003c  b00f              ADD      sp,sp,#0x3c
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.66|
000042  4620              MOV      r0,r4                 ;159
000044  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
000048  4682              MOV      r10,r0                ;159
00004a  4620              MOV      r0,r4                 ;159
00004c  f7fffffe          BL       _Z9prm_getIdP11ParamRecord ; prm_getId(ParamRecord*)
000050  4683              MOV      r11,r0                ;159
000052  2100              MOVS     r1,#0                 ;159
000054  8860              LDRH     r0,[r4,#2]            ;159
000056  e9cd6108          STRD     r6,r1,[sp,#0x20]      ;159
00005a  910a              STR      r1,[sp,#0x28]         ;159
00005c  9007              STR      r0,[sp,#0x1c]         ;159
00005e  2081              MOVS     r0,#0x81              ;159
000060  21a1              MOVS     r1,#0xa1              ;159
000062  e9cdb103          STRD     r11,r1,[sp,#0xc]      ;159
000066  e9cda005          STRD     r10,r0,[sp,#0x14]     ;159
00006a  4608              MOV      r0,r1                 ;159
00006c  a90c              ADD      r1,sp,#0x30           ;159
00006e  22a1              MOVS     r2,#0xa1              ;159
000070  e9cd2100          STRD     r2,r1,[sp,#0]         ;159
000074  9002              STR      r0,[sp,#8]            ;159
000076  2204              MOVS     r2,#4                 ;159
000078  2100              MOVS     r1,#0                 ;159
00007a  4640              MOV      r0,r8                 ;159
00007c  6863              LDR      r3,[r4,#4]            ;159
00007e  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
000082  2000              MOVS     r0,#0                 ;160
000084  e7da              B        |L2.60|
                  |L2.134|
000086  f1090001          ADD      r0,r9,#1              ;151
00008a  fa1ff980          UXTH     r9,r0                 ;151
00008e  f5047480          ADD      r4,r4,#0x100          ;151
                  |L2.146|
000092  8820              LDRH     r0,[r4,#0]            ;151
000094  f64f71ff          MOV      r1,#0xffff            ;151
000098  4288              CMP      r0,r1                 ;151
00009a  d005              BEQ      |L2.168|
00009c  4804              LDR      r0,|L2.176|
00009e  68c0              LDR      r0,[r0,#0xc]          ;151  ; g_spifi
0000a0  f10050a0          ADD      r0,r0,#0x14000000     ;151
0000a4  42a0              CMP      r0,r4                 ;151
0000a6  d8b9              BHI      |L2.28|
                  |L2.168|
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;163
0000ac  e7c6              B        |L2.60|
;;;165    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L2.176|
                          DCD      g_spifi

                          AREA ||i._Z11prm_getDescP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z11prm_getDescP11ParamRecord PROC ; prm_getDesc(ParamRecord*)
;;;106    
;;;107    const char *prm_getDesc(ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
000002  4604              MOV      r4,r0
;;;109    	uint32_t offset = PRM_HEADER_LEN;
000004  2508              MOVS     r5,#8
;;;110    	offset += strlen((char *)rec+offset) + 1;
000006  1960              ADDS     r0,r4,r5
000008  f7fffffe          BL       strlen
00000c  1c40              ADDS     r0,r0,#1
00000e  4405              ADD      r5,r5,r0
;;;111    	return (char *)rec+offset;
000010  1960              ADDS     r0,r4,r5
;;;112    }
000012  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP


                          AREA ||i._Z11prm_getInfoPKcP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z11prm_getInfoPKcP5Chirp PROC ; prm_getInfo(const char*, Chirp*)
;;;127    
;;;128    int32_t prm_getInfo(const char *id, Chirp *chirp)
000000  b5f8              PUSH     {r3-r7,lr}
;;;129    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;130    	ParamRecord *rec;
;;;131    
;;;132    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000006  4815              LDR      r0,|L4.92|
000008  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
00000a  f10050a0          ADD      r0,r0,#0x14000000
00000e  f5a04400          SUB      r4,r0,#0x8000
000012  e015              B        |L4.64|
                  |L4.20|
;;;133    	{
;;;134    		if(strcmp(id, (char *)rec->data)==0)
000014  f1040108          ADD      r1,r4,#8
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       strcmp
00001e  b968              CBNZ     r0,|L4.60|
;;;135    		{
;;;136    			CRP_RETURN(chirp, STRING(prm_getDesc(rec)));
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
000026  4607              MOV      r7,r0
000028  2000              MOVS     r0,#0
00002a  463b              MOV      r3,r7
00002c  22a1              MOVS     r2,#0xa1
00002e  4601              MOV      r1,r0
000030  9000              STR      r0,[sp,#0]
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;137    			return 0;
000038  2000              MOVS     r0,#0
                  |L4.58|
;;;138    		}
;;;139    	}
;;;140    	return -1;	
;;;141    }
00003a  bdf8              POP      {r3-r7,pc}
                  |L4.60|
00003c  f5047480          ADD      r4,r4,#0x100          ;132
                  |L4.64|
000040  8820              LDRH     r0,[r4,#0]            ;132
000042  f64f71ff          MOV      r1,#0xffff            ;132
000046  4288              CMP      r0,r1                 ;132
000048  d005              BEQ      |L4.86|
00004a  4804              LDR      r0,|L4.92|
00004c  68c0              LDR      r0,[r0,#0xc]          ;132  ; g_spifi
00004e  f10050a0          ADD      r0,r0,#0x14000000     ;132
000052  42a0              CMP      r0,r4                 ;132
000054  d8de              BHI      |L4.20|
                  |L4.86|
000056  f04f30ff          MOV      r0,#0xffffffff        ;140
00005a  e7ee              B        |L4.58|
;;;142    
                          ENDP

                  |L4.92|
                          DCD      g_spifi

                          AREA ||i._Z12prm_getChirpPKcP5Chirp||, CODE, READONLY, ALIGN=1

                  _Z12prm_getChirpPKcP5Chirp PROC ; prm_getChirp(const char*, Chirp*)
;;;325    
;;;326    int32_t prm_getChirp(const char *id, Chirp *chirp)
000000  b5fe              PUSH     {r1-r7,lr}
;;;327    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;328    	ParamRecord *rec;
;;;329    
;;;330    	rec = prm_find(id);
000006  2100              MOVS     r1,#0
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00000e  4604              MOV      r4,r0
;;;331    	if (rec==NULL)
000010  b914              CBNZ     r4,|L5.24|
;;;332    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L5.22|
;;;333    	
;;;334    	CRP_RETURN(chirp, UINTS8(rec->len, (uint8_t *)rec+prm_getDataOffset(rec)), END);
;;;335    
;;;336    	return 0;
;;;337    }
000016  bdfe              POP      {r1-r7,pc}
                  |L5.24|
000018  4620              MOV      r0,r4                 ;334
00001a  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00001e  1907              ADDS     r7,r0,r4              ;334
000020  2000              MOVS     r0,#0                 ;334
000022  e9cd7000          STRD     r7,r0,[sp,#0]         ;334
000026  9002              STR      r0,[sp,#8]            ;334
000028  8863              LDRH     r3,[r4,#2]            ;334
00002a  2281              MOVS     r2,#0x81              ;334
00002c  4601              MOV      r1,r0                 ;334
00002e  4628              MOV      r0,r5                 ;334
000030  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
000034  2000              MOVS     r0,#0                 ;336
000036  e7ee              B        |L5.22|
;;;338    
                          ENDP


                          AREA ||i._Z12prm_nextFreev||, CODE, READONLY, ALIGN=2

                  _Z12prm_nextFreev PROC ; prm_nextFree()
;;;213    
;;;214    uint32_t prm_nextFree()
000000  480e              LDR      r0,|L6.60|
;;;215    {
;;;216    	ParamRecord *rec;
;;;217    
;;;218    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++);
000002  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000004  f10050a0          ADD      r0,r0,#0x14000000
000008  f5a04100          SUB      r1,r0,#0x8000
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f5017180          ADD      r1,r1,#0x100
                  |L6.18|
000012  8808              LDRH     r0,[r1,#0]
000014  f64f72ff          MOV      r2,#0xffff
000018  4290              CMP      r0,r2
00001a  d005              BEQ      |L6.40|
00001c  4807              LDR      r0,|L6.60|
00001e  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000020  f10050a0          ADD      r0,r0,#0x14000000
000024  4288              CMP      r0,r1
000026  d8f2              BHI      |L6.14|
                  |L6.40|
;;;219    
;;;220    	if (rec>=(ParamRecord *)PRM_ENDREC)
000028  4804              LDR      r0,|L6.60|
00002a  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
00002c  f10050a0          ADD      r0,r0,#0x14000000
000030  4288              CMP      r0,r1
000032  d801              BHI      |L6.56|
;;;221    		return NULL;
000034  2000              MOVS     r0,#0
                  |L6.54|
;;;222    	return (uint32_t)rec; 
;;;223    }
000036  4770              BX       lr
                  |L6.56|
000038  4608              MOV      r0,r1                 ;222
00003a  e7fc              B        |L6.54|
;;;224    
                          ENDP

                  |L6.60|
                          DCD      g_spifi

                          AREA ||i._Z12prm_setChirpPKcRKjPKh||, CODE, READONLY, ALIGN=2

                  _Z12prm_setChirpPKcRKjPKh PROC ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
;;;259    
;;;260    int32_t prm_setChirp(const char *id, const uint32_t &valLen, const uint8_t *val)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;261    {
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;262    	ParamRecord *rec;
;;;263    	uint8_t *buf;
;;;264    	uint32_t offset;
;;;265    	void *sector;
;;;266    	int32_t res = 0;
00000a  f04f0b00          MOV      r11,#0
;;;267    
;;;268    	buf = (uint8_t *)malloc(FLASH_SECTOR_SIZE);
00000e  f44f5080          MOV      r0,#0x1000
000012  f7fffffe          BL       malloc
000016  4606              MOV      r6,r0
;;;269    
;;;270    	if (buf==NULL)
000018  b91e              CBNZ     r6,|L7.34|
;;;271    		return -2;
00001a  f06f0001          MVN      r0,#1
                  |L7.30|
;;;272    
;;;273    	rec = prm_find(id);
;;;274    
;;;275    	if (rec==NULL)
;;;276    	{
;;;277    		res = -1;
;;;278    		goto end;
;;;279    	}
;;;280    
;;;281    	sector = (void *)FLASH_SECTOR_MASK((uint32_t)rec);
;;;282    	memcpy(buf, sector, FLASH_SECTOR_SIZE);
;;;283    
;;;284    	rec = prm_find(id, buf);
;;;285    
;;;286    	if (rec==NULL)
;;;287    	{
;;;288    		res = -1;
;;;289    		goto end;
;;;290    	}
;;;291    
;;;292    	offset = prm_getDataOffset(rec);	
;;;293    	memcpy((uint8_t *)rec+offset, val, valLen);
;;;294    
;;;295    	 	
;;;296    	rec->len = valLen;
;;;297    	rec->crc = prm_crc(rec);
;;;298    	
;;;299    	flash_erase((uint32_t)sector, FLASH_SECTOR_SIZE); 
;;;300    	flash_program((uint32_t)sector, buf, FLASH_SECTOR_SIZE);
;;;301    
;;;302    	g_dirty = true; // set dirty flag
;;;303    
;;;304    end:
;;;305    	free(buf); 	
;;;306    	return res;
;;;307    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.34|
000022  2100              MOVS     r1,#0                 ;273
000024  4650              MOV      r0,r10                ;273
000026  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00002a  4604              MOV      r4,r0                 ;273
00002c  b914              CBNZ     r4,|L7.52|
00002e  f04f3bff          MOV      r11,#0xffffffff       ;277
000032  e02f              B        |L7.148|
                  |L7.52|
000034  0b27              LSRS     r7,r4,#12             ;281
000036  033f              LSLS     r7,r7,#12             ;281
000038  f44f5280          MOV      r2,#0x1000            ;282
00003c  4639              MOV      r1,r7                 ;282
00003e  4630              MOV      r0,r6                 ;282
000040  f7fffffe          BL       __aeabi_memcpy
000044  4631              MOV      r1,r6                 ;284
000046  4650              MOV      r0,r10                ;284
000048  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00004c  4604              MOV      r4,r0                 ;284
00004e  b914              CBNZ     r4,|L7.86|
000050  f04f3bff          MOV      r11,#0xffffffff       ;288
000054  e01e              B        |L7.148|
                  |L7.86|
000056  4620              MOV      r0,r4                 ;292
000058  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00005c  4681              MOV      r9,r0                 ;292
00005e  eb040009          ADD      r0,r4,r9              ;293
000062  4641              MOV      r1,r8                 ;293
000064  682a              LDR      r2,[r5,#0]            ;293
000066  f7fffffe          BL       __aeabi_memcpy
00006a  8828              LDRH     r0,[r5,#0]            ;296
00006c  8060              STRH     r0,[r4,#2]            ;296
00006e  4620              MOV      r0,r4                 ;297
000070  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
000074  8020              STRH     r0,[r4,#0]            ;297
000076  f44f5180          MOV      r1,#0x1000            ;299
00007a  4638              MOV      r0,r7                 ;299
00007c  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
000080  f44f5280          MOV      r2,#0x1000            ;300
000084  4631              MOV      r1,r6                 ;300
000086  4638              MOV      r0,r7                 ;300
000088  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
00008c  2001              MOVS     r0,#1                 ;302
00008e  4904              LDR      r1,|L7.160|
000090  7008              STRB     r0,[r1,#0]            ;302
000092  bf00              NOP                            ;304
                  |L7.148|
000094  4630              MOV      r0,r6                 ;305
000096  f7fffffe          BL       free
00009a  4658              MOV      r0,r11                ;306
00009c  e7bf              B        |L7.30|
;;;308    
                          ENDP

00009e  0000              DCW      0x0000
                  |L7.160|
                          DCD      g_dirty

                          AREA ||i._Z12prm_setDirtyb||, CODE, READONLY, ALIGN=2

                  _Z12prm_setDirtyb PROC ; prm_setDirty(bool)
;;;395    
;;;396    void prm_setDirty(bool dirty)
000000  4901              LDR      r1,|L8.8|
;;;397    {
;;;398    	g_dirty = dirty;
000002  7008              STRB     r0,[r1,#0]
;;;399    }
000004  4770              BX       lr
;;;400    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      g_dirty

                          AREA ||i._Z13prm_verifyAllv||, CODE, READONLY, ALIGN=2

                  _Z13prm_verifyAllv PROC ; prm_verifyAll()
;;;229    
;;;230    bool prm_verifyAll()
000000  b510              PUSH     {r4,lr}
;;;231    {
;;;232    	ParamRecord *rec;
;;;233    
;;;234    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000002  480e              LDR      r0,|L9.60|
000004  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000006  f10050a0          ADD      r0,r0,#0x14000000
00000a  f5a04400          SUB      r4,r0,#0x8000
00000e  e007              B        |L9.32|
                  |L9.16|
;;;235    	{
;;;236    		if (prm_verifyRecord(rec)==false)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _Z16prm_verifyRecordPK11ParamRecord ; prm_verifyRecord(const ParamRecord*)
000016  b908              CBNZ     r0,|L9.28|
;;;237    			return false;
000018  2000              MOVS     r0,#0
                  |L9.26|
;;;238    	}
;;;239    
;;;240    	return true;
;;;241    }
00001a  bd10              POP      {r4,pc}
                  |L9.28|
00001c  f5047480          ADD      r4,r4,#0x100          ;234
                  |L9.32|
000020  8820              LDRH     r0,[r4,#0]            ;234
000022  f64f71ff          MOV      r1,#0xffff            ;234
000026  4288              CMP      r0,r1                 ;234
000028  d005              BEQ      |L9.54|
00002a  4804              LDR      r0,|L9.60|
00002c  68c0              LDR      r0,[r0,#0xc]          ;234  ; g_spifi
00002e  f10050a0          ADD      r0,r0,#0x14000000     ;234
000032  42a0              CMP      r0,r4                 ;234
000034  d8ec              BHI      |L9.16|
                  |L9.54|
000036  2001              MOVS     r0,#1                 ;240
000038  e7ef              B        |L9.26|
;;;242    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      g_spifi

                          AREA ||i._Z16prm_verifyRecordPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z16prm_verifyRecordPK11ParamRecord PROC ; prm_verifyRecord(const ParamRecord*)
;;;224    
;;;225    bool prm_verifyRecord(const ParamRecord *rec)
000000  b510              PUSH     {r4,lr}
;;;226    {	
000002  4604              MOV      r4,r0
;;;227    	return prm_crc(rec)==rec->crc;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
00000a  8821              LDRH     r1,[r4,#0]
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L10.20|
000010  2001              MOVS     r0,#1
                  |L10.18|
;;;228    }
000012  bd10              POP      {r4,pc}
                  |L10.20|
000014  2000              MOVS     r0,#0                 ;227
000016  e7fc              B        |L10.18|
;;;229    
                          ENDP


                          AREA ||i._Z17prm_getDataOffsetPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z17prm_getDataOffsetPK11ParamRecord PROC ; prm_getDataOffset(const ParamRecord*)
;;;113    
;;;114    uint32_t prm_getDataOffset(const ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;115    {
000002  4605              MOV      r5,r0
;;;116    	uint32_t offset = PRM_HEADER_LEN;
000004  2408              MOVS     r4,#8
;;;117    
;;;118    	offset += strlen((char *)rec+offset) + 1;
000006  1928              ADDS     r0,r5,r4
000008  f7fffffe          BL       strlen
00000c  1c40              ADDS     r0,r0,#1
00000e  4404              ADD      r4,r4,r0
;;;119    	offset += strlen((char *)rec+offset) + 1;
000010  1928              ADDS     r0,r5,r4
000012  f7fffffe          BL       strlen
000016  1c40              ADDS     r0,r0,#1
000018  4404              ADD      r4,r4,r0
;;;120    
;;;121    	// skip padding
;;;122    	while(*((uint8_t *)rec+offset)==0)
00001a  e000              B        |L11.30|
                  |L11.28|
;;;123    		offset++;
00001c  1c64              ADDS     r4,r4,#1
                  |L11.30|
00001e  5d28              LDRB     r0,[r5,r4]            ;122
000020  2800              CMP      r0,#0                 ;122
000022  d0fb              BEQ      |L11.28|
;;;124    
;;;125    	return offset; 
000024  4620              MOV      r0,r4
;;;126    }
000026  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i._Z7prm_addPKcjS0_z||, CODE, READONLY, ALIGN=1

                  _Z7prm_addPKcjS0_z PROC ; prm_add(const char*, unsigned, const char*, ...)
;;;339    
;;;340    int prm_add(const char *id, uint32_t flags, const char *desc, ...)
000000  b40f              PUSH     {r0-r3}
;;;341    {
000002  e92d47f0          PUSH     {r4-r10,lr}
000006  b0c2              SUB      sp,sp,#0x108
000008  4607              MOV      r7,r0
00000a  4688              MOV      r8,r1
;;;342    	char buf[PRM_MAX_LEN];
;;;343    	int len;
;;;344        uint32_t freeLoc, offset=PRM_HEADER_LEN;
00000c  2408              MOVS     r4,#8
;;;345        va_list args;
;;;346    	ParamRecord *rec = (ParamRecord *)buf;
00000e  ad02              ADD      r5,sp,#8
;;;347    
;;;348    	// if it already exists, 
;;;349    	if (prm_find(id))
000010  2100              MOVS     r1,#0
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000018  b130              CBZ      r0,|L12.40|
;;;350    		return -2;
00001a  f06f0001          MVN      r0,#1
                  |L12.30|
;;;351    
;;;352    	memset((void *)rec, 0, PRM_MAX_LEN);
;;;353    
;;;354    	strcpy((char *)rec+offset, id);
;;;355    	offset += strlen(id) + 1;
;;;356    	if (desc!=NULL)
;;;357    	{
;;;358    		strcpy((char *)rec+offset, desc);
;;;359    		offset += strlen(desc) + 1;
;;;360    	}
;;;361    	else
;;;362    	{
;;;363    		*(char *)(rec+offset) = '\0';
;;;364    	 	offset++;
;;;365    	}
;;;366    
;;;367    	// data section should be aligned to 4 bytes	
;;;368    	ALIGN(offset, 4);
;;;369    
;;;370        va_start(args, desc);
;;;371        len = Chirp::vserialize(NULL, (uint8_t *)rec+offset, PRM_MAX_LEN-offset, &args);
;;;372        va_end(args);
;;;373    
;;;374    	if (len<0)
;;;375    		return -3;
;;;376    
;;;377    	rec->flags = flags;
;;;378    	rec->len = len;
;;;379    	rec->crc = prm_crc(rec); 
;;;380    
;;;381    	if ((freeLoc=prm_nextFree())==NULL)
;;;382    		return -4;
;;;383    	
;;;384    	return flash_program(freeLoc, (uint8_t *)rec, len+prm_getDataOffset(rec));	
;;;385    }
00001e  b042              ADD      sp,sp,#0x108
000020  e8bd07f0          POP      {r4-r10}
000024  f85dfb14          LDR      pc,[sp],#0x14
                  |L12.40|
000028  f44f7180          MOV      r1,#0x100             ;352
00002c  4628              MOV      r0,r5                 ;352
00002e  f7fffffe          BL       __aeabi_memclr4
000032  1928              ADDS     r0,r5,r4              ;354
000034  4639              MOV      r1,r7                 ;354
000036  f7fffffe          BL       strcpy
00003a  4638              MOV      r0,r7                 ;355
00003c  f7fffffe          BL       strlen
000040  1c40              ADDS     r0,r0,#1              ;355
000042  4404              ADD      r4,r4,r0              ;355
000044  984c              LDR      r0,[sp,#0x130]        ;356
000046  b148              CBZ      r0,|L12.92|
000048  1928              ADDS     r0,r5,r4              ;358
00004a  994c              LDR      r1,[sp,#0x130]        ;358
00004c  f7fffffe          BL       strcpy
000050  984c              LDR      r0,[sp,#0x130]        ;359
000052  f7fffffe          BL       strlen
000056  1c40              ADDS     r0,r0,#1              ;359
000058  4404              ADD      r4,r4,r0              ;359
00005a  e004              B        |L12.102|
                  |L12.92|
00005c  2000              MOVS     r0,#0                 ;363
00005e  eb052104          ADD      r1,r5,r4,LSL #8       ;363
000062  7008              STRB     r0,[r1,#0]            ;363
000064  1c64              ADDS     r4,r4,#1              ;364
                  |L12.102|
000066  f0040003          AND      r0,r4,#3              ;368
00006a  b118              CBZ      r0,|L12.116|
00006c  f0240003          BIC      r0,r4,#3              ;368
000070  1d00              ADDS     r0,r0,#4              ;368
000072  e000              B        |L12.118|
                  |L12.116|
000074  4620              MOV      r0,r4                 ;368
                  |L12.118|
000076  4604              MOV      r4,r0                 ;368
000078  a84d              ADD      r0,sp,#0x134          ;370
00007a  9001              STR      r0,[sp,#4]            ;370
00007c  f5c47280          RSB      r2,r4,#0x100          ;371
000080  1929              ADDS     r1,r5,r4              ;371
000082  ab01              ADD      r3,sp,#4              ;371
000084  2000              MOVS     r0,#0                 ;371
000086  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
00008a  4606              MOV      r6,r0                 ;371
00008c  2000              MOVS     r0,#0                 ;372
00008e  9001              STR      r0,[sp,#4]            ;372
000090  2e00              CMP      r6,#0                 ;374
000092  da01              BGE      |L12.152|
000094  1ec0              SUBS     r0,r0,#3              ;375
000096  e7c2              B        |L12.30|
                  |L12.152|
000098  f8c58004          STR      r8,[r5,#4]            ;377
00009c  806e              STRH     r6,[r5,#2]            ;378
00009e  4628              MOV      r0,r5                 ;379
0000a0  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
0000a4  8028              STRH     r0,[r5,#0]            ;379
0000a6  f7fffffe          BL       _Z12prm_nextFreev ; prm_nextFree()
0000aa  ea5f0a00          MOVS     r10,r0                ;381
0000ae  d101              BNE      |L12.180|
0000b0  1f00              SUBS     r0,r0,#4              ;382
0000b2  e7b4              B        |L12.30|
                  |L12.180|
0000b4  4628              MOV      r0,r5                 ;384
0000b6  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
0000ba  eb000906          ADD      r9,r0,r6              ;384
0000be  464a              MOV      r2,r9                 ;384
0000c0  4629              MOV      r1,r5                 ;384
0000c2  4650              MOV      r0,r10                ;384
0000c4  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
0000c8  e7a9              B        |L12.30|
;;;386    
                          ENDP


                          AREA ||i._Z7prm_crcPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z7prm_crcPK11ParamRecord PROC ; prm_crc(const ParamRecord*)
;;;174    
;;;175    uint16_t prm_crc(const ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
000002  4604              MOV      r4,r0
;;;177    	uint16_t crc;
;;;178    
;;;179    	if (rec->len>PRM_MAX_LEN)
000004  8860              LDRH     r0,[r4,#2]
000006  f5b07f80          CMP      r0,#0x100
00000a  dd01              BLE      |L13.16|
;;;180    		return 0;
00000c  2000              MOVS     r0,#0
                  |L13.14|
;;;181    
;;;182    	crc = Chirp::calcCrc((uint8_t *)rec+2, rec->len+prm_getDataOffset(rec)-2); // +2, -2 because we don't include crc 
;;;183    
;;;184    	// crc can't equal 0xffff
;;;185    	if (crc==0xffff)
;;;186    		crc = 0;
;;;187    
;;;188    	return crc;
;;;189    }
00000e  bd70              POP      {r4-r6,pc}
                  |L13.16|
000010  4620              MOV      r0,r4                 ;182
000012  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000016  8861              LDRH     r1,[r4,#2]            ;182
000018  4408              ADD      r0,r0,r1              ;182
00001a  1e86              SUBS     r6,r0,#2              ;182
00001c  4631              MOV      r1,r6                 ;182
00001e  1ca0              ADDS     r0,r4,#2              ;182
000020  f7fffffe          BL       _ZN5Chirp7calcCrcEPhj ; Chirp::calcCrc(unsigned char*, unsigned)
000024  4605              MOV      r5,r0                 ;182
000026  f64f70ff          MOV      r0,#0xffff            ;185
00002a  4285              CMP      r5,r0                 ;185
00002c  d100              BNE      |L13.48|
00002e  2500              MOVS     r5,#0                 ;186
                  |L13.48|
000030  4628              MOV      r0,r5                 ;188
000032  e7ec              B        |L13.14|
;;;190    
                          ENDP


                          AREA ||i._Z7prm_getPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_getPKcz PROC ; prm_get(const char*, ...)
;;;308    
;;;309    int32_t prm_get(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;310    {
000002  b5f8              PUSH     {r3-r7,lr}
;;;311    	va_list args;
;;;312    	ParamRecord *rec;
;;;313    	int res;
;;;314    
;;;315    	rec = prm_find(id);
000004  2100              MOVS     r1,#0
000006  9806              LDR      r0,[sp,#0x18]
000008  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00000c  4604              MOV      r4,r0
;;;316    	if (rec==NULL)
00000e  b924              CBNZ     r4,|L14.26|
;;;317    		return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L14.20|
;;;318    	
;;;319    	va_start(args, id);
;;;320    	res = Chirp::vdeserialize((uint8_t *)rec+prm_getDataOffset(rec), rec->len, &args);
;;;321    	va_end(args);
;;;322    	 	
;;;323    	return res;
;;;324    }
000014  bcf8              POP      {r3-r7}
000016  f85dfb14          LDR      pc,[sp],#0x14
                  |L14.26|
00001a  a807              ADD      r0,sp,#0x1c           ;319
00001c  9000              STR      r0,[sp,#0]            ;319
00001e  4620              MOV      r0,r4                 ;320
000020  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000024  1906              ADDS     r6,r0,r4              ;320
000026  8861              LDRH     r1,[r4,#2]            ;320
000028  466a              MOV      r2,sp                 ;320
00002a  4630              MOV      r0,r6                 ;320
00002c  f7fffffe          BL       _ZN5Chirp12vdeserializeEPhjPSt9__va_list ; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
000030  4605              MOV      r5,r0                 ;320
000032  2000              MOVS     r0,#0                 ;321
000034  9000              STR      r0,[sp,#0]            ;321
000036  4628              MOV      r0,r5                 ;323
000038  e7ec              B        |L14.20|
;;;325    
                          ENDP


                          AREA ||i._Z7prm_setPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_setPKcz PROC ; prm_set(const char*, ...)
;;;242    
;;;243    int32_t prm_set(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;244    {
000002  b510              PUSH     {r4,lr}
000004  b0c2              SUB      sp,sp,#0x108
;;;245    	va_list args;
;;;246    	int res;
;;;247       	uint8_t buf[PRM_MAX_LEN];
;;;248    
;;;249    	va_start(args, id);
000006  a845              ADD      r0,sp,#0x114
000008  9040              STR      r0,[sp,#0x100]
;;;250    	res = Chirp::vserialize(NULL, buf, PRM_MAX_LEN, &args);
00000a  ab40              ADD      r3,sp,#0x100
00000c  f44f7280          MOV      r2,#0x100
000010  4669              MOV      r1,sp
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
000018  4604              MOV      r4,r0
;;;251    	va_end(args);
00001a  2000              MOVS     r0,#0
00001c  9040              STR      r0,[sp,#0x100]
;;;252    	if (res<0)
00001e  2c00              CMP      r4,#0
000020  da04              BGE      |L15.44|
;;;253    		return res;
000022  4620              MOV      r0,r4
                  |L15.36|
;;;254    
;;;255    	prm_setChirp(id, res, buf);
;;;256    
;;;257    	return 0;
;;;258    }
000024  b042              ADD      sp,sp,#0x108
000026  bc10              POP      {r4}
000028  f85dfb14          LDR      pc,[sp],#0x14
                  |L15.44|
00002c  466a              MOV      r2,sp                 ;255
00002e  9441              STR      r4,[sp,#0x104]        ;255
000030  a941              ADD      r1,sp,#0x104          ;255
000032  9844              LDR      r0,[sp,#0x110]        ;255
000034  f7fffffe          BL       _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
000038  2000              MOVS     r0,#0                 ;257
00003a  e7f3              B        |L15.36|
;;;259    
                          ENDP


                          AREA ||i._Z8prm_findPKcPh||, CODE, READONLY, ALIGN=2

                  _Z8prm_findPKcPh PROC ; prm_find(const char*, unsigned char*)
;;;190    
;;;191    ParamRecord *prm_find(const char *id, uint8_t *buf=NULL)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;192    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;193    	ParamRecord *rec, *begin, *end;
;;;194    
;;;195    	if (buf)
000008  b11d              CBZ      r5,|L16.18|
;;;196    	{
;;;197    		begin =  (ParamRecord *)buf;
00000a  462e              MOV      r6,r5
;;;198    		end = (ParamRecord *)(buf+FLASH_SECTOR_SIZE);
00000c  f5055780          ADD      r7,r5,#0x1000
000010  e009              B        |L16.38|
                  |L16.18|
;;;199    	}
;;;200    	else
;;;201    	{
;;;202    		begin =	(ParamRecord *)PRM_FLASH_LOC;
000012  4810              LDR      r0,|L16.84|
000014  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000016  f10050a0          ADD      r0,r0,#0x14000000
00001a  f5a04600          SUB      r6,r0,#0x8000
;;;203    		end = (ParamRecord *)PRM_ENDREC;
00001e  480d              LDR      r0,|L16.84|
000020  68c0              LDR      r0,[r0,#0xc]  ; g_spifi
000022  f10057a0          ADD      r7,r0,#0x14000000
                  |L16.38|
;;;204    	}
;;;205    	
;;;206    	for (rec=begin; rec->crc!=0xffff && rec<end; rec++)
000026  4634              MOV      r4,r6
000028  e00a              B        |L16.64|
                  |L16.42|
;;;207    	{
;;;208    		if(strcmp(id, (char *)rec->data)==0)
00002a  f1040108          ADD      r1,r4,#8
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       strcmp
000034  b910              CBNZ     r0,|L16.60|
;;;209    			return rec;
000036  4620              MOV      r0,r4
                  |L16.56|
;;;210    	}
;;;211    	return NULL;
;;;212    }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L16.60|
00003c  f5047480          ADD      r4,r4,#0x100          ;206
                  |L16.64|
000040  8820              LDRH     r0,[r4,#0]            ;206
000042  f64f71ff          MOV      r1,#0xffff            ;206
000046  4288              CMP      r0,r1                 ;206
000048  d001              BEQ      |L16.78|
00004a  42bc              CMP      r4,r7                 ;206
00004c  d3ed              BCC      |L16.42|
                  |L16.78|
00004e  2000              MOVS     r0,#0                 ;211
000050  e7f2              B        |L16.56|
;;;213    
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      g_spifi

                          AREA ||i._Z8prm_initP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z8prm_initP5Chirp PROC ; prm_init(Chirp*)
;;;86     
;;;87     int prm_init(Chirp *chirp)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89     	// check integrity
;;;90     	if (!prm_verifyAll())
000004  f7fffffe          BL       _Z13prm_verifyAllv ; prm_verifyAll()
000008  b920              CBNZ     r0,|L17.20|
;;;91     	{
;;;92     		// if we're corrupt, format, start over
;;;93     		prm_format();
00000a  f7fffffe          BL       _Z10prm_formatv ; prm_format()
;;;94     		return -1;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L17.18|
;;;95     	} 
;;;96     
;;;97     	chirp->registerModule(g_module);
;;;98     		
;;;99     	return 0;	
;;;100    }
000012  bd10              POP      {r4,pc}
                  |L17.20|
000014  4902              LDR      r1,|L17.32|
000016  4620              MOV      r0,r4                 ;97
000018  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
00001c  2000              MOVS     r0,#0                 ;99
00001e  e7f8              B        |L17.18|
;;;101    
                          ENDP

                  |L17.32|
                          DCD      g_module

                          AREA ||i._Z9prm_dirtyv||, CODE, READONLY, ALIGN=2

                  _Z9prm_dirtyv PROC ; prm_dirty()
;;;386    
;;;387    bool prm_dirty()
000000  4902              LDR      r1,|L18.12|
;;;388    {
;;;389    	// one-shot 
;;;390    	bool res = g_dirty;
000002  7808              LDRB     r0,[r1,#0]  ; g_dirty
;;;391    	g_dirty = false;
000004  2100              MOVS     r1,#0
000006  4a01              LDR      r2,|L18.12|
000008  7011              STRB     r1,[r2,#0]
;;;392    
;;;393    	return res;
;;;394    }
00000a  4770              BX       lr
;;;395    
                          ENDP

                  |L18.12|
                          DCD      g_dirty

                          AREA ||i._Z9prm_getIdP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z9prm_getIdP11ParamRecord PROC ; prm_getId(ParamRecord*)
;;;101    
;;;102    const char *prm_getId(ParamRecord *rec)
000000  4601              MOV      r1,r0
;;;103    {
;;;104    	return (char *)rec+PRM_HEADER_LEN;
000002  f1010008          ADD      r0,r1,#8
;;;105    }
000006  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10prm_formatv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_formatv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._Z17prm_getDataOffsetPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17prm_getDataOffsetPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._Z7prm_crcPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_crcPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._Z16prm_verifyRecordPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16prm_verifyRecordPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._Z13prm_verifyAllv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13prm_verifyAllv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._Z8prm_initP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_initP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._Z9prm_getIdP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_getIdP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._Z11prm_getDescP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getDescP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._Z11prm_getInfoPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getInfoPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._Z10prm_getAllRKtP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_getAllRKtP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._Z8prm_findPKcPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_findPKcPh||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z12prm_nextFreev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_nextFreev||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z12prm_setChirpPKcRKjPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setChirpPKcRKjPKh||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z7prm_setPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_setPKcz||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z7prm_getPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_getPKcz||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z12prm_getChirpPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_getChirpPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z7prm_addPKcjS0_z||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_addPKcjS0_z||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z9prm_dirtyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_dirtyv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z12prm_setDirtyb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setDirtyb||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z10prm_formatv ; prm_format()
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x64
                          DCD      _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
000020  a1810000          DCB      0xa1,0x81,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0xe0
                          DCD      _Z12prm_getChirpPKcP5Chirp ; prm_getChirp(const char*, Chirp*)
000038  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xe8
                          DCD      ||.conststring||+0x140
                          DCD      _Z11prm_getInfoPKcP5Chirp ; prm_getInfo(const char*, Chirp*)
000050  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x14c
                          DCD      ||.conststring||+0x1a8
                          DCD      _Z10prm_getAllRKtP5Chirp ; prm_getAll(const unsigned short&, Chirp*)
000068  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1b4
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  70726d5f          DCB      "prm_restore",0
000004  72657374
000008  6f726500
00000c  45726173          DCB      "Erase all parameters and restore to default values@r 0 "
000010  6520616c
000014  6c207061
000018  72616d65
00001c  74657273
000020  20616e64
000024  20726573
000028  746f7265
00002c  20746f20
000030  64656661
000034  756c7420
000038  76616c75
00003c  65734072
000040  203020  
000043  69662073          DCB      "if success, negative if error",0
000047  75636365
00004b  73732c20
00004f  6e656761
000053  74697665
000057  20696620
00005b  6572726f
00005f  7200    
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  70726d5f          DCB      "prm_set",0
000068  73657400
00006c  53657420          DCB      "Set parameter value@p parameter identifier (string)@p p"
000070  70617261
000074  6d657465
000078  72207661
00007c  6c756540
000080  70207061
000084  72616d65
000088  74657220
00008c  6964656e
000090  74696669
000094  65722028
000098  73747269
00009c  6e672940
0000a0  702070  
0000a3  6172616d          DCB      "arameter value (encoded)@r 0 if success, negative if er"
0000a7  65746572
0000ab  2076616c
0000af  75652028
0000b3  656e636f
0000b7  64656429
0000bb  40722030
0000bf  20696620
0000c3  73756363
0000c7  6573732c
0000cb  206e6567
0000cf  61746976
0000d3  65206966
0000d7  206572  
0000da  726f7200          DCB      "ror",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  70726d5f          DCB      "prm_get",0
0000e4  67657400
0000e8  47657420          DCB      "Get parameter value@p parameter identifier (string)@r 0"
0000ec  70617261
0000f0  6d657465
0000f4  72207661
0000f8  6c756540
0000fc  70207061
000100  72616d65
000104  74657220
000108  6964656e
00010c  74696669
000110  65722028
000114  73747269
000118  6e672940
00011c  722030  
00011f  20696620          DCB      " if success, negative if error",0
000123  73756363
000127  6573732c
00012b  206e6567
00012f  61746976
000133  65206966
000137  20657272
00013b  6f7200  
00013e  00                DCB      0
00013f  00                DCB      0
000140  70726d5f          DCB      "prm_getInfo",0
000144  67657449
000148  6e666f00
00014c  47657420          DCB      "Get parameter information@p parameter identifier (strin"
000150  70617261
000154  6d657465
000158  7220696e
00015c  666f726d
000160  6174696f
000164  6e407020
000168  70617261
00016c  6d657465
000170  72206964
000174  656e7469
000178  66696572
00017c  20287374
000180  72696e  
000183  67294072          DCB      "g)@r 0 if success, negative if error",0
000187  20302069
00018b  66207375
00018f  63636573
000193  732c206e
000197  65676174
00019b  69766520
00019f  69662065
0001a3  72726f72
0001a7  00      
0001a8  70726d5f          DCB      "prm_getAll",0
0001ac  67657441
0001b0  6c6c00  
0001b3  00                DCB      0
0001b4  47657420          DCB      "Get all information@p index of parameter@r 0 if success"
0001b8  616c6c20
0001bc  696e666f
0001c0  726d6174
0001c4  696f6e40
0001c8  7020696e
0001cc  64657820
0001d0  6f662070
0001d4  6172616d
0001d8  65746572
0001dc  40722030
0001e0  20696620
0001e4  73756363
0001e8  657373  
0001eb  2c206e65          DCB      ", negative if error",0
0001ef  67617469
0001f3  76652069
0001f7  66206572
0001fb  726f7200
0001ff  00                DCB      0
000200  416c6c20          DCB      "All parameters have been erased and restored to their d"
000204  70617261
000208  6d657465
00020c  72732068
000210  61766520
000214  6265656e
000218  20657261
00021c  73656420
000220  616e6420
000224  72657374
000228  6f726564
00022c  20746f20
000230  74686569
000234  722064  
000237  65666175          DCB      "efaults!\n",0
00023b  6c747321
00023f  0a00    

                          AREA ||.data||, DATA, ALIGN=0

                  g_dirty
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "param.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REV16j|
#line 130 ".\\core_cmInstr.h"
|__asm___9_param_cpp_55d340e8___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REVSHi|
#line 144
|__asm___9_param_cpp_55d340e8___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
