; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\colorlut.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\colorlut.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\colorlut.crf ..\..\common\colorlut.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z4signf PROC ; sign(float)
;;;25     
;;;26     float sign(float val)
000000  b510              PUSH     {r4,lr}
;;;27     {
000002  4604              MOV      r4,r0
;;;28         if (val<0.0f)
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_cfcmple
00000c  d201              BCS      |L1.18|
;;;29             return -1.0f;
00000e  48fe              LDR      r0,|L1.1032|
                  |L1.16|
;;;30         else
;;;31             return 1.0f;
;;;32     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  f04f507e          MOV      r0,#0x3f800000        ;31
000016  e7fb              B        |L1.16|
;;;33     
                          ENDP

                  _Z3dot6FpointS_ PROC ; dot(Fpoint, Fpoint)
;;;34     float dot(Fpoint a, Fpoint b)
000018  b57f              PUSH     {r0-r6,lr}
;;;35     {
;;;36         return a.m_x*b.m_x + a.m_y*b.m_y;
00001a  9903              LDR      r1,[sp,#0xc]
00001c  9801              LDR      r0,[sp,#4]
00001e  f7fffffe          BL       __aeabi_fmul
000022  4604              MOV      r4,r0
000024  9902              LDR      r1,[sp,#8]
000026  9800              LDR      r0,[sp,#0]
000028  f7fffffe          BL       __aeabi_fmul
00002c  4605              MOV      r5,r0
00002e  4621              MOV      r1,r4
000030  f7fffffe          BL       __aeabi_fadd
;;;37     }
000034  b004              ADD      sp,sp,#0x10
000036  bd70              POP      {r4-r6,pc}
;;;38     
                          ENDP

                  _Z9maxMallocjPj PROC ; maxMalloc(unsigned, unsigned*)
;;;39     void *maxMalloc(uint32_t initSize, uint32_t *allocSize)
000038  e92d41f0          PUSH     {r4-r8,lr}
;;;40     {
00003c  4607              MOV      r7,r0
00003e  460d              MOV      r5,r1
;;;41         void *mem;
;;;42         int32_t size = (int32_t)initSize;
000040  463c              MOV      r4,r7
;;;43     
;;;44         while(size>=0)
000042  e00a              B        |L1.90|
                  |L1.68|
;;;45         {
;;;46             mem = malloc(size);
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       malloc
00004a  4606              MOV      r6,r0
;;;47             if (mem)
00004c  b11e              CBZ      r6,|L1.86|
;;;48             {
;;;49                 *allocSize = (uint32_t)size;
00004e  602c              STR      r4,[r5,#0]
;;;50                 return mem;
000050  4630              MOV      r0,r6
                  |L1.82|
;;;51             }
;;;52             else
;;;53                 size -= 0x100;
;;;54         }
;;;55         *allocSize = 0;
;;;56         return NULL;
;;;57     }
000052  e8bd81f0          POP      {r4-r8,pc}
                  |L1.86|
000056  f5a47480          SUB      r4,r4,#0x100          ;53
                  |L1.90|
00005a  2c00              CMP      r4,#0                 ;44
00005c  daf2              BGE      |L1.68|
00005e  2000              MOVS     r0,#0                 ;55
000060  6028              STR      r0,[r5,#0]            ;55
000062  bf00              NOP                            ;56
000064  e7f5              B        |L1.82|
;;;58     
                          ENDP

                  _Z8distance6FpointS_ PROC ; distance(Fpoint, Fpoint)
;;;59     float distance(Fpoint a, Fpoint b)
000066  e92d41ff          PUSH     {r0-r8,lr}
;;;60     {
;;;61         float diffx, diffy;
;;;62     
;;;63         diffx = a.m_x-b.m_x;
00006a  9902              LDR      r1,[sp,#8]
00006c  9800              LDR      r0,[sp,#0]
00006e  f7fffffe          BL       __aeabi_fsub
000072  4605              MOV      r5,r0
;;;64         diffy = a.m_y-b.m_y;
000074  9903              LDR      r1,[sp,#0xc]
000076  9801              LDR      r0,[sp,#4]
000078  f7fffffe          BL       __aeabi_fsub
00007c  4606              MOV      r6,r0
;;;65     
;;;66         return sqrt(diffx*diffx + diffy*diffy);
00007e  4631              MOV      r1,r6
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       __aeabi_fmul
000086  4607              MOV      r7,r0
000088  4629              MOV      r1,r5
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       __aeabi_fmul
000090  4680              MOV      r8,r0
000092  4639              MOV      r1,r7
000094  f7fffffe          BL       __aeabi_fadd
000098  4604              MOV      r4,r0
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       sqrtf
;;;67     }
0000a0  b004              ADD      sp,sp,#0x10
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

                  _ZN8ColorLUT5clearEh PROC ; ColorLUT::clear(unsigned char)
;;;348    
;;;349    void ColorLUT::clear(uint8_t modelIndex)
0000a6  b510              PUSH     {r4,lr}
;;;350    {
0000a8  4602              MOV      r2,r0
;;;351        uint32_t i;
;;;352    
;;;353        for (i=0; i<CL_LUT_SIZE; i++)
0000aa  2000              MOVS     r0,#0
0000ac  e00a              B        |L1.196|
                  |L1.174|
;;;354        {
;;;355            if (modelIndex==0 || (m_lut[i]&0x07)==modelIndex)
0000ae  b129              CBZ      r1,|L1.188|
0000b0  6813              LDR      r3,[r2,#0]
0000b2  5c1b              LDRB     r3,[r3,r0]
0000b4  f0030307          AND      r3,r3,#7
0000b8  428b              CMP      r3,r1
0000ba  d102              BNE      |L1.194|
                  |L1.188|
;;;356                m_lut[i] = 0;
0000bc  2300              MOVS     r3,#0
0000be  6814              LDR      r4,[r2,#0]
0000c0  5423              STRB     r3,[r4,r0]
                  |L1.194|
0000c2  1c40              ADDS     r0,r0,#1              ;353
                  |L1.196|
0000c4  f5b03f80          CMP      r0,#0x10000           ;353
0000c8  d3f1              BCC      |L1.174|
;;;357        }
;;;358    }
0000ca  bd10              POP      {r4,pc}
;;;359    
                          ENDP

                  _ZN8ColorLUTC2EPKv                  ; Alternate entry point ; ColorLUT::ColorLUT__sub_object(const void*)
                  _ZN8ColorLUTC1EPKv PROC ; ColorLUT::ColorLUT(const void*)
;;;69     
;;;70     ColorLUT::ColorLUT(const void *lutMem)
;;;71     {
;;;72         m_lut = (uint8_t *)lutMem;
;;;73         m_iterateStep = CL_DEFAULT_ITERATE_STEP;
;;;74         m_hueTol = CL_DEFAULT_HUETOL;
;;;75         m_satTol = CL_DEFAULT_SATTOL;
;;;76         m_minSat = CL_DEFAULT_MINSAT;
;;;77         m_maxSatRatio = CL_DEFAULT_MAXSAT_RATIO;
;;;78         m_outlierRatio = CL_DEFAULT_OUTLIER_RATIO;
;;;79     
;;;80         clear();
;;;81     
;;;82         for (int i=0; i<CL_NUM_MODELS; i++)
;;;83             m_types[i] = 0;
;;;84     }
;;;85     
0000cc  b530              PUSH     {r4,r5,lr}
0000ce  4604              MOV      r4,r0
0000d0  460d              MOV      r5,r1
0000d2  6025              STR      r5,[r4,#0]
0000d4  48cd              LDR      r0,|L1.1036|
0000d6  62e0              STR      r0,[r4,#0x2c]
0000d8  f04f507e          MOV      r0,#0x3f800000
0000dc  6320              STR      r0,[r4,#0x30]
0000de  6360              STR      r0,[r4,#0x34]
0000e0  48cb              LDR      r0,|L1.1040|
0000e2  63a0              STR      r0,[r4,#0x38]
0000e4  f04f4080          MOV      r0,#0x40000000
0000e8  63e0              STR      r0,[r4,#0x3c]
0000ea  48ca              LDR      r0,|L1.1044|
0000ec  6420              STR      r0,[r4,#0x40]
0000ee  2100              MOVS     r1,#0
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       _ZN8ColorLUT5clearEh ; ColorLUT::clear(unsigned char)
0000f6  2000              MOVS     r0,#0
0000f8  e005              B        |L1.262|
                  |L1.250|
0000fa  2200              MOVS     r2,#0
0000fc  f1040110          ADD      r1,r4,#0x10
000100  f8412020          STR      r2,[r1,r0,LSL #2]
000104  1c40              ADDS     r0,r0,#1
                  |L1.262|
000106  2807              CMP      r0,#7
000108  dbf7              BLT      |L1.250|
00010a  4620              MOV      r0,r4
00010c  bd30              POP      {r4,r5,pc}
                          ENDP

                  _ZN8ColorLUTD2Ev                  ; Alternate entry point ; ColorLUT::~ColorLUT__sub_object()
                  _ZN8ColorLUTD1Ev PROC ; ColorLUT::~ColorLUT()
;;;86     ColorLUT::~ColorLUT()
;;;87     {
;;;88     }
;;;89     
00010e  4770              BX       lr
                          ENDP

                  _ZN8ColorLUT9setBoundsEfff PROC ; ColorLUT::setBounds(float, float, float)
;;;270    
;;;271    int ColorLUT::setBounds(float minSat, float hueTol, float satTol)
000110  b510              PUSH     {r4,lr}
;;;272    {
000112  4604              MOV      r4,r0
;;;273        m_minSat = minSat;
000114  63a1              STR      r1,[r4,#0x38]
;;;274        m_hueTol = hueTol;
000116  6322              STR      r2,[r4,#0x30]
;;;275        m_satTol = satTol;
000118  6363              STR      r3,[r4,#0x34]
;;;276    
;;;277        return 0;
00011a  2000              MOVS     r0,#0
;;;278    }
00011c  bd10              POP      {r4,pc}
;;;279    
                          ENDP

                  _ZN8ColorLUT9boundTestEPK4Linef PROC ; ColorLUT::boundTest(const Line*, float)
;;;233    
;;;234    uint32_t ColorLUT::boundTest(const Line *line, float dir)
00011e  e92d4ff8          PUSH     {r3-r11,lr}
;;;235    {
000122  4605              MOV      r5,r0
000124  460f              MOV      r7,r1
000126  4691              MOV      r9,r2
;;;236        uint32_t i, count;
;;;237        float v;
;;;238        bool gtz = dir>0.0f;
000128  2100              MOVS     r1,#0
00012a  4648              MOV      r0,r9
00012c  f7fffffe          BL       __aeabi_cfrcmple
000130  d201              BCS      |L1.310|
000132  2001              MOVS     r0,#1
000134  e000              B        |L1.312|
                  |L1.310|
000136  2000              MOVS     r0,#0
                  |L1.312|
000138  4682              MOV      r10,r0
;;;239    
;;;240        for (i=0, count=0; i<m_hpixelLen; i++)
00013a  2400              MOVS     r4,#0
00013c  2600              MOVS     r6,#0
00013e  e02e              B        |L1.414|
                  |L1.320|
;;;241        {
;;;242            v = m_hpixels[i].m_u*line->m_slope + line->m_yi;
000140  6869              LDR      r1,[r5,#4]
000142  eb010144          ADD      r1,r1,r4,LSL #1
000146  f9910000          LDRSB    r0,[r1,#0]
00014a  f7fffffe          BL       __aeabi_i2f
00014e  9000              STR      r0,[sp,#0]
000150  6839              LDR      r1,[r7,#0]
000152  f7fffffe          BL       __aeabi_fmul
000156  4683              MOV      r11,r0
000158  6879              LDR      r1,[r7,#4]
00015a  f7fffffe          BL       __aeabi_fadd
00015e  4680              MOV      r8,r0
;;;243            if (gtz)
000160  f1ba0f00          CMP      r10,#0
000164  d00d              BEQ      |L1.386|
;;;244            {
;;;245                if (m_hpixels[i].m_v<v)
000166  6869              LDR      r1,[r5,#4]
000168  eb010144          ADD      r1,r1,r4,LSL #1
00016c  f9910001          LDRSB    r0,[r1,#1]
000170  f7fffffe          BL       __aeabi_i2f
000174  4683              MOV      r11,r0
000176  4641              MOV      r1,r8
000178  f7fffffe          BL       __aeabi_cfcmple
00017c  d20e              BCS      |L1.412|
;;;246                    count++;
00017e  1c76              ADDS     r6,r6,#1
000180  e00c              B        |L1.412|
                  |L1.386|
;;;247            }
;;;248            else if (m_hpixels[i].m_v>v)
000182  6869              LDR      r1,[r5,#4]
000184  eb010144          ADD      r1,r1,r4,LSL #1
000188  f9910001          LDRSB    r0,[r1,#1]
00018c  f7fffffe          BL       __aeabi_i2f
000190  4683              MOV      r11,r0
000192  4641              MOV      r1,r8
000194  f7fffffe          BL       __aeabi_cfrcmple
000198  d200              BCS      |L1.412|
;;;249                count++;
00019a  1c76              ADDS     r6,r6,#1
                  |L1.412|
00019c  1c64              ADDS     r4,r4,#1              ;240
                  |L1.414|
00019e  68a8              LDR      r0,[r5,#8]            ;240
0001a0  42a0              CMP      r0,r4                 ;240
0001a2  d8cd              BHI      |L1.320|
;;;250        }
;;;251    
;;;252        return count;
0001a4  4630              MOV      r0,r6
;;;253    }
0001a6  e8bd8ff8          POP      {r3-r11,pc}
;;;254    
                          ENDP

                  _ZN8ColorLUT7iterateE4Linef PROC ; ColorLUT::iterate(Line, float)
;;;255    float ColorLUT::iterate(Line line, float step)
0001aa  e92d47ff          PUSH     {r0-r10,lr}
;;;256    {
0001ae  4604              MOV      r4,r0
0001b0  461d              MOV      r5,r3
;;;257        float ratio;
;;;258    
;;;259        while(1)
0001b2  e01f              B        |L1.500|
                  |L1.436|
;;;260        {
;;;261            ratio = (float)boundTest(&line, sign(step))/m_hpixelLen;
0001b4  68a0              LDR      r0,[r4,#8]
0001b6  f7fffffe          BL       __aeabi_ui2f
0001ba  4681              MOV      r9,r0
0001bc  4628              MOV      r0,r5
0001be  f7fffffe          BL       _Z4signf ; sign(float)
0001c2  4682              MOV      r10,r0
0001c4  4652              MOV      r2,r10
0001c6  a901              ADD      r1,sp,#4
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       _ZN8ColorLUT9boundTestEPK4Linef ; ColorLUT::boundTest(const Line*, float)
0001ce  4680              MOV      r8,r0
0001d0  f7fffffe          BL       __aeabi_ui2f
0001d4  4607              MOV      r7,r0
0001d6  4649              MOV      r1,r9
0001d8  f7fffffe          BL       __aeabi_fdiv
0001dc  4606              MOV      r6,r0
;;;262            if ( ratio >= m_outlierRatio)
0001de  4630              MOV      r0,r6
0001e0  6c21              LDR      r1,[r4,#0x40]
0001e2  f7fffffe          BL       __aeabi_cfrcmple
0001e6  d800              BHI      |L1.490|
;;;263                break;
0001e8  e005              B        |L1.502|
                  |L1.490|
;;;264            line.m_yi += step;
0001ea  4629              MOV      r1,r5
0001ec  9802              LDR      r0,[sp,#8]
0001ee  f7fffffe          BL       __aeabi_fadd
0001f2  9002              STR      r0,[sp,#8]
                  |L1.500|
0001f4  e7de              B        |L1.436|
                  |L1.502|
0001f6  bf00              NOP                            ;263
;;;265        }
;;;266    
;;;267        return line.m_yi;
0001f8  9802              LDR      r0,[sp,#8]
;;;268    }
0001fa  b004              ADD      sp,sp,#0x10
0001fc  e8bd87f0          POP      {r4-r10,pc}
;;;269    
                          ENDP

                  _ZN8ColorLUT9tweakMeanEPf PROC ; ColorLUT::tweakMean(float*)
;;;201    
;;;202    void ColorLUT::tweakMean(float *mean)
000200  b570              PUSH     {r4-r6,lr}
;;;203    {
000202  4606              MOV      r6,r0
000204  460c              MOV      r4,r1
;;;204        if (abs(*mean)<CL_MIN_MEAN)
000206  6820              LDR      r0,[r4,#0]
000208  f0204100          BIC      r1,r0,#0x80000000
00020c  460d              MOV      r5,r1
00020e  4982              LDR      r1,|L1.1048|
000210  4628              MOV      r0,r5
000212  f7fffffe          BL       __aeabi_cfcmple
000216  d209              BCS      |L1.556|
;;;205        {
;;;206            if (*mean>0.0f)
000218  2100              MOVS     r1,#0
00021a  6820              LDR      r0,[r4,#0]
00021c  f7fffffe          BL       __aeabi_cfrcmple
000220  d202              BCS      |L1.552|
;;;207                *mean = CL_MIN_MEAN;
000222  487d              LDR      r0,|L1.1048|
000224  6020              STR      r0,[r4,#0]
000226  e001              B        |L1.556|
                  |L1.552|
;;;208            else
;;;209                *mean = -CL_MIN_MEAN;
000228  487c              LDR      r0,|L1.1052|
00022a  6020              STR      r0,[r4,#0]
                  |L1.556|
;;;210        }
;;;211    }
00022c  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

                  _ZN8ColorLUT4meanEP6Fpoint PROC ; ColorLUT::mean(Fpoint*)
;;;213    void ColorLUT::mean(Fpoint *mean)
00022e  e92d41fc          PUSH     {r2-r8,lr}
;;;214    {
000232  4604              MOV      r4,r0
000234  460e              MOV      r6,r1
;;;215        uint32_t i;
;;;216        float usum, vsum;
;;;217    
;;;218        for (i=0, usum=0.0, vsum=0.0; i<m_hpixelLen; i++)
000236  2500              MOVS     r5,#0
000238  2000              MOVS     r0,#0
00023a  9001              STR      r0,[sp,#4]
00023c  9000              STR      r0,[sp,#0]
00023e  e018              B        |L1.626|
                  |L1.576|
;;;219        {
;;;220            usum += m_hpixels[i].m_u;
000240  6861              LDR      r1,[r4,#4]
000242  eb010145          ADD      r1,r1,r5,LSL #1
000246  f9910000          LDRSB    r0,[r1,#0]
00024a  f7fffffe          BL       __aeabi_i2f
00024e  4607              MOV      r7,r0
000250  9901              LDR      r1,[sp,#4]
000252  f7fffffe          BL       __aeabi_fadd
000256  9001              STR      r0,[sp,#4]
;;;221            vsum += m_hpixels[i].m_v;
000258  6861              LDR      r1,[r4,#4]
00025a  eb010145          ADD      r1,r1,r5,LSL #1
00025e  f9910001          LDRSB    r0,[r1,#1]
000262  f7fffffe          BL       __aeabi_i2f
000266  4607              MOV      r7,r0
000268  9900              LDR      r1,[sp,#0]
00026a  f7fffffe          BL       __aeabi_fadd
00026e  9000              STR      r0,[sp,#0]
000270  1c6d              ADDS     r5,r5,#1              ;218
                  |L1.626|
000272  68a0              LDR      r0,[r4,#8]            ;218
000274  42a8              CMP      r0,r5                 ;218
000276  d8e3              BHI      |L1.576|
;;;222        }
;;;223        usum /= m_hpixelLen;
000278  68a0              LDR      r0,[r4,#8]
00027a  f7fffffe          BL       __aeabi_ui2f
00027e  4607              MOV      r7,r0
000280  4639              MOV      r1,r7
000282  9801              LDR      r0,[sp,#4]
000284  f7fffffe          BL       __aeabi_fdiv
000288  9001              STR      r0,[sp,#4]
;;;224        vsum /= m_hpixelLen;
00028a  68a0              LDR      r0,[r4,#8]
00028c  f7fffffe          BL       __aeabi_ui2f
000290  4607              MOV      r7,r0
000292  4639              MOV      r1,r7
000294  9800              LDR      r0,[sp,#0]
000296  f7fffffe          BL       __aeabi_fdiv
00029a  9000              STR      r0,[sp,#0]
;;;225    
;;;226        // if mean is too close to 0, the slope of the hue or sat lines will explode
;;;227        tweakMean(&usum);
00029c  a901              ADD      r1,sp,#4
00029e  4620              MOV      r0,r4
0002a0  f7fffffe          BL       _ZN8ColorLUT9tweakMeanEPf ; ColorLUT::tweakMean(float*)
;;;228        tweakMean(&vsum);
0002a4  4669              MOV      r1,sp
0002a6  4620              MOV      r0,r4
0002a8  f7fffffe          BL       _ZN8ColorLUT9tweakMeanEPf ; ColorLUT::tweakMean(float*)
;;;229    
;;;230        mean->m_x = usum;
0002ac  9801              LDR      r0,[sp,#4]
0002ae  6030              STR      r0,[r6,#0]
;;;231        mean->m_y = vsum;
0002b0  9800              LDR      r0,[sp,#0]
0002b2  6070              STR      r0,[r6,#4]
;;;232    }
0002b4  e8bd81fc          POP      {r2-r8,pc}
;;;233    
                          ENDP

                  _ZN8ColorLUT3mapERK6Frame8RK5RectA PROC ; ColorLUT::map(const Frame8&, const RectA&)
;;;172    
;;;173    void ColorLUT::map(const Frame8 &frame, const RectA &region)
0002b8  e92d4ffc          PUSH     {r2-r11,lr}
;;;174    {
0002bc  4614              MOV      r4,r2
;;;175        uint32_t x, y, r, g1, g2, b, count;
;;;176        int32_t u, v;
;;;177        uint8_t *pixels;
;;;178    
;;;179        pixels = frame.m_pixels + (region.m_yOffset | 1)*frame.m_width + (region.m_xOffset | 1);
0002be  f8b4b002          LDRH     r11,[r4,#2]
0002c2  f04b0b01          ORR      r11,r11,#1
0002c6  f9b1e004          LDRSH    lr,[r1,#4]
0002ca  f8d1a000          LDR      r10,[r1,#0]
0002ce  fb0baa0e          MLA      r10,r11,lr,r10
0002d2  f8b4b000          LDRH     r11,[r4,#0]
0002d6  f04b0b01          ORR      r11,r11,#1
0002da  eb0a050b          ADD      r5,r10,r11
;;;180        for (y=0, count=0; y<region.m_height && count<m_hpixelSize; y+=2, pixels+=frame.m_width*2)
0002de  2600              MOVS     r6,#0
0002e0  2300              MOVS     r3,#0
0002e2  e04f              B        |L1.900|
                  |L1.740|
;;;181        {
;;;182            for (x=0; x<region.m_width && count<m_hpixelSize; x+=2, count++)
0002e4  2200              MOVS     r2,#0
0002e6  e040              B        |L1.874|
                  |L1.744|
;;;183            {
;;;184                r = pixels[x];
0002e8  5caf              LDRB     r7,[r5,r2]
;;;185                g1 = pixels[x - 1];
0002ea  f1a20a01          SUB      r10,r2,#1
0002ee  f815c00a          LDRB     r12,[r5,r10]
;;;186                g2 = pixels[-frame.m_width + x];
0002f2  f9b1a004          LDRSH    r10,[r1,#4]
0002f6  f1ca0a00          RSB      r10,r10,#0
0002fa  4492              ADD      r10,r10,r2
0002fc  f815800a          LDRB     r8,[r5,r10]
;;;187                b = pixels[-frame.m_width + x - 1];
000300  f9b1a004          LDRSH    r10,[r1,#4]
000304  f1ca0a00          RSB      r10,r10,#0
000308  4492              ADD      r10,r10,r2
00030a  f1aa0a01          SUB      r10,r10,#1
00030e  f815900a          LDRB     r9,[r5,r10]
;;;188      //MJLM    u = r-g1;
;;;189      //MJLM    v = b-g2;
;;;190                u = r+g1-127; //MJLM changed from minus to plus
000312  eb070a0c          ADD      r10,r7,r12
000316  f1aa0a7f          SUB      r10,r10,#0x7f
00031a  f8cda004          STR      r10,[sp,#4]
;;;191                v = b+g2-127; //MJLM changed from minus to plus
00031e  eb090a08          ADD      r10,r9,r8
000322  f1aa0a7f          SUB      r10,r10,#0x7f
000326  f8cda000          STR      r10,[sp,#0]
;;;192                u >>= 1;
00032a  f8dda004          LDR      r10,[sp,#4]
00032e  ea4f0a6a          ASR      r10,r10,#1
000332  f8cda004          STR      r10,[sp,#4]
;;;193                v >>= 1;
000336  f8dda000          LDR      r10,[sp,#0]
00033a  ea4f0a6a          ASR      r10,r10,#1
00033e  f8cda000          STR      r10,[sp,#0]
;;;194                m_hpixels[count].m_u = u;
000342  f8dda004          LDR      r10,[sp,#4]
000346  fa4ffa8a          SXTB     r10,r10
00034a  f8d0b004          LDR      r11,[r0,#4]
00034e  f80ba013          STRB     r10,[r11,r3,LSL #1]
;;;195                m_hpixels[count].m_v = v;
000352  f8dda000          LDR      r10,[sp,#0]
000356  fa4ffa8a          SXTB     r10,r10
00035a  f8d0b004          LDR      r11,[r0,#4]
00035e  eb0b0b43          ADD      r11,r11,r3,LSL #1
000362  f88ba001          STRB     r10,[r11,#1]
000366  1c92              ADDS     r2,r2,#2              ;182
000368  1c5b              ADDS     r3,r3,#1              ;182
                  |L1.874|
00036a  f8b4a004          LDRH     r10,[r4,#4]           ;182
00036e  4592              CMP      r10,r2                ;182
000370  d903              BLS      |L1.890|
000372  f8d0a00c          LDR      r10,[r0,#0xc]         ;182
000376  459a              CMP      r10,r3                ;182
000378  d8b6              BHI      |L1.744|
                  |L1.890|
00037a  1cb6              ADDS     r6,r6,#2              ;180
00037c  f9b1a004          LDRSH    r10,[r1,#4]           ;180
000380  eb05054a          ADD      r5,r5,r10,LSL #1      ;180
                  |L1.900|
000384  f8b4a006          LDRH     r10,[r4,#6]           ;180
000388  45b2              CMP      r10,r6                ;180
00038a  d903              BLS      |L1.916|
00038c  f8d0a00c          LDR      r10,[r0,#0xc]         ;180
000390  459a              CMP      r10,r3                ;180
000392  d8a7              BHI      |L1.740|
                  |L1.916|
;;;196            }
;;;197        }
;;;198        m_hpixelLen = count;
000394  6083              STR      r3,[r0,#8]
;;;199    
;;;200    }
000396  e8bd8ffc          POP      {r2-r11,pc}
;;;201    
                          ENDP

                  _ZN8ColorLUT8generateEP10ColorModelRK6Frame8RK5RectA PROC ; ColorLUT::generate(ColorModel*, const Frame8&, const RectA&)
;;;90     
;;;91     int ColorLUT::generate(ColorModel *model, const Frame8 &frame, const RectA &region)
00039a  e92d4fff          PUSH     {r0-r11,lr}
;;;92     {
00039e  b093              SUB      sp,sp,#0x4c
0003a0  4604              MOV      r4,r0
0003a2  460d              MOV      r5,r1
;;;93         Fpoint meanVal;
0003a4  a811              ADD      r0,sp,#0x44
0003a6  f7fffffe          BL       _ZN6FpointC1Ev ; Fpoint::Fpoint()
;;;94         float angle, pangle, pslope, meanSat;
;;;95         float yi, istep, s, xsat, sat;
;;;96         int result;
;;;97     
;;;98         m_hpixels = (HuePixel *)maxMalloc(sizeof(HuePixel)*CL_HPIXEL_MAX_SIZE, &m_hpixelSize);
0003aa  f104010c          ADD      r1,r4,#0xc
0003ae  f6446020          MOV      r0,#0x4e20
0003b2  f7fffffe          BL       _Z9maxMallocjPj ; maxMalloc(unsigned, unsigned*)
0003b6  6060              STR      r0,[r4,#4]
;;;99         if (m_hpixels==NULL)
0003b8  6860              LDR      r0,[r4,#4]
0003ba  b920              CBNZ     r0,|L1.966|
;;;100            return -1; // not enough memory
0003bc  f04f30ff          MOV      r0,#0xffffffff
                  |L1.960|
;;;101    
;;;102        m_hpixelSize /= sizeof(HuePixel);
;;;103    
;;;104        map(frame, region);
;;;105        mean(&meanVal);
;;;106        angle = atan2(meanVal.m_y, meanVal.m_x);
;;;107        Fpoint uvec(cos(angle), sin(angle));
;;;108    
;;;109        Line hueLine(tan(angle), 0.0);
;;;110    
;;;111        pangle = angle + PI/2; // perpendicular angle
;;;112        pslope = tan(pangle); // perpendicular slope
;;;113        Line pLine(pslope, meanVal.m_y - pslope*meanVal.m_x); // perpendicular line through mean
;;;114    
;;;115        // upper hue line
;;;116        istep = fabs(m_iterateStep/uvec.m_x);
;;;117        yi = iterate(hueLine, istep);
;;;118        yi += fabs(m_hueTol*yi); // extend
;;;119        model->m_hue[0].m_yi = yi;
;;;120        model->m_hue[0].m_slope = hueLine.m_slope;
;;;121    
;;;122        // lower hue line
;;;123        yi = iterate(hueLine, -istep);
;;;124        yi -= fabs(m_hueTol*yi); // extend
;;;125        model->m_hue[1].m_yi = yi;
;;;126        model->m_hue[1].m_slope = hueLine.m_slope;
;;;127    
;;;128        // inner sat line
;;;129        s = sign(uvec.m_y);
;;;130        istep = s*fabs(m_iterateStep/cos(pangle));
;;;131        yi = iterate(pLine, -istep);
;;;132        yi -= s*fabs(m_satTol*(yi-pLine.m_yi)); // extend
;;;133        xsat = yi/(hueLine.m_slope-pslope); // x value where inner sat line crosses hue line
;;;134        Fpoint minsatVec(xsat, xsat*hueLine.m_slope); // vector going to inner sat line
;;;135        sat = dot(uvec, minsatVec); // length of line
;;;136        meanSat = dot(uvec, meanVal);
;;;137        if (sat < m_minSat) // if it's too short, we need to extend
;;;138        {
;;;139            minsatVec.m_x = uvec.m_x*m_minSat;
;;;140            minsatVec.m_y = uvec.m_y*m_minSat;
;;;141            yi = minsatVec.m_y - pslope*minsatVec.m_x;
;;;142        }
;;;143        model->m_sat[0].m_yi = yi;
;;;144        model->m_sat[0].m_slope = pslope;
;;;145    
;;;146        // outer sat line
;;;147        yi = iterate(pLine, istep);
;;;148        yi += s*fabs(m_maxSatRatio*m_satTol*(yi-pLine.m_yi)); // extend
;;;149        model->m_sat[1].m_yi = yi;
;;;150        model->m_sat[1].m_slope = pslope;
;;;151    
;;;152        // swap if outer sat line is greater than inner sat line
;;;153        // Arbitrary convention, but we need it to be consistent to test membership (checkBounds)
;;;154        if (model->m_sat[1].m_yi>model->m_sat[0].m_yi)
;;;155        {
;;;156            Line tmp = model->m_sat[0];
;;;157            model->m_sat[0] = model->m_sat[1];
;;;158            model->m_sat[1] = tmp;
;;;159        }
;;;160    
;;;161        free(m_hpixels);
;;;162    
;;;163        // calculate goodness
;;;164        result = (meanSat-m_minSat)*100/64 + 10; // 64 because it's half of our range
;;;165        if (result<0)
;;;166            result = 0;
;;;167        if (result>100)
;;;168            result = 100;
;;;169    
;;;170        return result;
;;;171    }
0003c0  b017              ADD      sp,sp,#0x5c
0003c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.966|
0003c6  68e0              LDR      r0,[r4,#0xc]          ;102
0003c8  0840              LSRS     r0,r0,#1              ;102
0003ca  60e0              STR      r0,[r4,#0xc]          ;102
0003cc  4620              MOV      r0,r4                 ;104
0003ce  e9dd1215          LDRD     r1,r2,[sp,#0x54]      ;104
0003d2  f7fffffe          BL       _ZN8ColorLUT3mapERK6Frame8RK5RectA ; ColorLUT::map(const Frame8&, const RectA&)
0003d6  a911              ADD      r1,sp,#0x44           ;105
0003d8  4620              MOV      r0,r4                 ;105
0003da  f7fffffe          BL       _ZN8ColorLUT4meanEP6Fpoint ; ColorLUT::mean(Fpoint*)
0003de  9812              LDR      r0,[sp,#0x48]         ;106
0003e0  9003              STR      r0,[sp,#0xc]          ;106
0003e2  9811              LDR      r0,[sp,#0x44]         ;106
0003e4  9004              STR      r0,[sp,#0x10]         ;106
0003e6  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;106
0003ea  f7fffffe          BL       atan2f
0003ee  4607              MOV      r7,r0                 ;106
0003f0  bf00              NOP                            ;106
0003f2  bf00              NOP                            ;107
0003f4  4638              MOV      r0,r7                 ;107
0003f6  f7fffffe          BL       sinf
0003fa  9004              STR      r0,[sp,#0x10]         ;107
0003fc  4638              MOV      r0,r7                 ;107
0003fe  f7fffffe          BL       _ZSt3cosf ; std::cos(float)
000402  9003              STR      r0,[sp,#0xc]          ;107
000404  4601              MOV      r1,r0                 ;107
000406  e00b              B        |L1.1056|
                  |L1.1032|
                          DCD      0xbf800000
                  |L1.1036|
                          DCD      0x3dcccccd
                  |L1.1040|
                          DCD      0x41700000
                  |L1.1044|
                          DCD      0x3f666666
                  |L1.1048|
                          DCD      0x3a83126f
                  |L1.1052|
                          DCD      0xba83126f
                  |L1.1056|
000420  a80b              ADD      r0,sp,#0x2c           ;107
000422  9a04              LDR      r2,[sp,#0x10]         ;107
000424  f7fffffe          BL       _ZN6FpointC1Eff ; Fpoint::Fpoint(float, float)
000428  4638              MOV      r0,r7                 ;109
00042a  f7fffffe          BL       _ZSt3tanf ; std::tan(float)
00042e  2200              MOVS     r2,#0                 ;109
000430  4601              MOV      r1,r0                 ;109
000432  9004              STR      r0,[sp,#0x10]         ;109
000434  a809              ADD      r0,sp,#0x24           ;109
000436  f7fffffe          BL       _ZN4LineC1Eff ; Line::Line(float, float)
00043a  49fe              LDR      r1,|L1.2100|
00043c  4638              MOV      r0,r7                 ;111
00043e  f7fffffe          BL       __aeabi_fadd
000442  9010              STR      r0,[sp,#0x40]         ;111
000444  9810              LDR      r0,[sp,#0x40]         ;112
000446  f7fffffe          BL       _ZSt3tanf ; std::tan(float)
00044a  4680              MOV      r8,r0                 ;112
00044c  4640              MOV      r0,r8                 ;113
00044e  9911              LDR      r1,[sp,#0x44]         ;113
000450  f7fffffe          BL       __aeabi_fmul
000454  9003              STR      r0,[sp,#0xc]          ;113
000456  9912              LDR      r1,[sp,#0x48]         ;113
000458  f7fffffe          BL       __aeabi_frsub
00045c  4602              MOV      r2,r0                 ;113
00045e  4641              MOV      r1,r8                 ;113
000460  9004              STR      r0,[sp,#0x10]         ;113
000462  a807              ADD      r0,sp,#0x1c           ;113
000464  f7fffffe          BL       _ZN4LineC1Eff ; Line::Line(float, float)
000468  990b              LDR      r1,[sp,#0x2c]         ;116
00046a  6ae0              LDR      r0,[r4,#0x2c]         ;116
00046c  f7fffffe          BL       __aeabi_fdiv
000470  9004              STR      r0,[sp,#0x10]         ;116
000472  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
000476  4682              MOV      r10,r0                ;116
000478  4653              MOV      r3,r10                ;117
00047a  4620              MOV      r0,r4                 ;117
00047c  e9dd1209          LDRD     r1,r2,[sp,#0x24]      ;117
000480  f7fffffe          BL       _ZN8ColorLUT7iterateE4Linef ; ColorLUT::iterate(Line, float)
000484  4606              MOV      r6,r0                 ;117
000486  4631              MOV      r1,r6                 ;118
000488  6b20              LDR      r0,[r4,#0x30]         ;118
00048a  f7fffffe          BL       __aeabi_fmul
00048e  9003              STR      r0,[sp,#0xc]          ;118
000490  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
000494  4631              MOV      r1,r6                 ;118
000496  9004              STR      r0,[sp,#0x10]         ;118
000498  f7fffffe          BL       __aeabi_fadd
00049c  4606              MOV      r6,r0                 ;118
00049e  60ae              STR      r6,[r5,#8]            ;119
0004a0  9809              LDR      r0,[sp,#0x24]         ;120
0004a2  6068              STR      r0,[r5,#4]            ;120
0004a4  f08a4000          EOR      r0,r10,#0x80000000    ;123
0004a8  4603              MOV      r3,r0                 ;123
0004aa  9004              STR      r0,[sp,#0x10]         ;123
0004ac  4620              MOV      r0,r4                 ;123
0004ae  e9dd1209          LDRD     r1,r2,[sp,#0x24]      ;123
0004b2  f7fffffe          BL       _ZN8ColorLUT7iterateE4Linef ; ColorLUT::iterate(Line, float)
0004b6  4606              MOV      r6,r0                 ;123
0004b8  4631              MOV      r1,r6                 ;124
0004ba  6b20              LDR      r0,[r4,#0x30]         ;124
0004bc  f7fffffe          BL       __aeabi_fmul
0004c0  9003              STR      r0,[sp,#0xc]          ;124
0004c2  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
0004c6  4631              MOV      r1,r6                 ;124
0004c8  9004              STR      r0,[sp,#0x10]         ;124
0004ca  f7fffffe          BL       __aeabi_frsub
0004ce  4606              MOV      r6,r0                 ;124
0004d0  612e              STR      r6,[r5,#0x10]         ;125
0004d2  9909              LDR      r1,[sp,#0x24]         ;126
0004d4  60e9              STR      r1,[r5,#0xc]          ;126
0004d6  980c              LDR      r0,[sp,#0x30]         ;129
0004d8  f7fffffe          BL       _Z4signf ; sign(float)
0004dc  900e              STR      r0,[sp,#0x38]         ;129
0004de  9810              LDR      r0,[sp,#0x40]         ;130
0004e0  f7fffffe          BL       _ZSt3cosf ; std::cos(float)
0004e4  9002              STR      r0,[sp,#8]            ;130
0004e6  6ae0              LDR      r0,[r4,#0x2c]         ;130
0004e8  9902              LDR      r1,[sp,#8]            ;130
0004ea  f7fffffe          BL       __aeabi_fdiv
0004ee  9003              STR      r0,[sp,#0xc]          ;130
0004f0  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
0004f4  9004              STR      r0,[sp,#0x10]         ;130
0004f6  990e              LDR      r1,[sp,#0x38]         ;130
0004f8  f7fffffe          BL       __aeabi_fmul
0004fc  4682              MOV      r10,r0                ;130
0004fe  f08a4000          EOR      r0,r10,#0x80000000    ;131
000502  4603              MOV      r3,r0                 ;131
000504  9004              STR      r0,[sp,#0x10]         ;131
000506  4620              MOV      r0,r4                 ;131
000508  e9dd1207          LDRD     r1,r2,[sp,#0x1c]      ;131
00050c  f7fffffe          BL       _ZN8ColorLUT7iterateE4Linef ; ColorLUT::iterate(Line, float)
000510  4606              MOV      r6,r0                 ;131
000512  4630              MOV      r0,r6                 ;132
000514  9908              LDR      r1,[sp,#0x20]         ;132
000516  f7fffffe          BL       __aeabi_fsub
00051a  9001              STR      r0,[sp,#4]            ;132
00051c  6b61              LDR      r1,[r4,#0x34]         ;132
00051e  f7fffffe          BL       __aeabi_fmul
000522  9002              STR      r0,[sp,#8]            ;132
000524  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
000528  9003              STR      r0,[sp,#0xc]          ;132
00052a  990e              LDR      r1,[sp,#0x38]         ;132
00052c  f7fffffe          BL       __aeabi_fmul
000530  4631              MOV      r1,r6                 ;132
000532  9004              STR      r0,[sp,#0x10]         ;132
000534  f7fffffe          BL       __aeabi_frsub
000538  4606              MOV      r6,r0                 ;132
00053a  4641              MOV      r1,r8                 ;133
00053c  9809              LDR      r0,[sp,#0x24]         ;133
00053e  f7fffffe          BL       __aeabi_fsub
000542  4601              MOV      r1,r0                 ;133
000544  9004              STR      r0,[sp,#0x10]         ;133
000546  4630              MOV      r0,r6                 ;133
000548  f7fffffe          BL       __aeabi_fdiv
00054c  4683              MOV      r11,r0                ;133
00054e  4658              MOV      r0,r11                ;134
000550  9909              LDR      r1,[sp,#0x24]         ;134
000552  f7fffffe          BL       __aeabi_fmul
000556  4602              MOV      r2,r0                 ;134
000558  4659              MOV      r1,r11                ;134
00055a  9004              STR      r0,[sp,#0x10]         ;134
00055c  a805              ADD      r0,sp,#0x14           ;134
00055e  f7fffffe          BL       _ZN6FpointC1Eff ; Fpoint::Fpoint(float, float)
000562  e9dd2305          LDRD     r2,r3,[sp,#0x14]      ;135
000566  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;135
00056a  f7fffffe          BL       _Z3dot6FpointS_ ; dot(Fpoint, Fpoint)
00056e  900d              STR      r0,[sp,#0x34]         ;135
000570  e9dd2311          LDRD     r2,r3,[sp,#0x44]      ;136
000574  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;136
000578  f7fffffe          BL       _Z3dot6FpointS_ ; dot(Fpoint, Fpoint)
00057c  900f              STR      r0,[sp,#0x3c]         ;136
00057e  6ba1              LDR      r1,[r4,#0x38]         ;137
000580  980d              LDR      r0,[sp,#0x34]         ;137
000582  f7fffffe          BL       __aeabi_cfcmple
000586  d212              BCS      |L1.1454|
000588  6ba1              LDR      r1,[r4,#0x38]         ;139
00058a  980b              LDR      r0,[sp,#0x2c]         ;139
00058c  f7fffffe          BL       __aeabi_fmul
000590  9005              STR      r0,[sp,#0x14]         ;139
000592  6ba1              LDR      r1,[r4,#0x38]         ;140
000594  980c              LDR      r0,[sp,#0x30]         ;140
000596  f7fffffe          BL       __aeabi_fmul
00059a  9006              STR      r0,[sp,#0x18]         ;140
00059c  4640              MOV      r0,r8                 ;141
00059e  9905              LDR      r1,[sp,#0x14]         ;141
0005a0  f7fffffe          BL       __aeabi_fmul
0005a4  9004              STR      r0,[sp,#0x10]         ;141
0005a6  9906              LDR      r1,[sp,#0x18]         ;141
0005a8  f7fffffe          BL       __aeabi_frsub
0005ac  4606              MOV      r6,r0                 ;141
                  |L1.1454|
0005ae  61ae              STR      r6,[r5,#0x18]         ;143
0005b0  f8c58014          STR      r8,[r5,#0x14]         ;144
0005b4  4653              MOV      r3,r10                ;147
0005b6  4620              MOV      r0,r4                 ;147
0005b8  e9dd1207          LDRD     r1,r2,[sp,#0x1c]      ;147
0005bc  f7fffffe          BL       _ZN8ColorLUT7iterateE4Linef ; ColorLUT::iterate(Line, float)
0005c0  4606              MOV      r6,r0                 ;147
0005c2  4630              MOV      r0,r6                 ;148
0005c4  9908              LDR      r1,[sp,#0x20]         ;148
0005c6  f7fffffe          BL       __aeabi_fsub
0005ca  9001              STR      r0,[sp,#4]            ;148
0005cc  6b61              LDR      r1,[r4,#0x34]         ;148
0005ce  6be0              LDR      r0,[r4,#0x3c]         ;148
0005d0  f7fffffe          BL       __aeabi_fmul
0005d4  9000              STR      r0,[sp,#0]            ;148
0005d6  9901              LDR      r1,[sp,#4]            ;148
0005d8  f7fffffe          BL       __aeabi_fmul
0005dc  9002              STR      r0,[sp,#8]            ;148
0005de  f7fffffe          BL       _ZSt4fabsf ; std::fabs(float)
0005e2  9003              STR      r0,[sp,#0xc]          ;148
0005e4  990e              LDR      r1,[sp,#0x38]         ;148
0005e6  f7fffffe          BL       __aeabi_fmul
0005ea  4631              MOV      r1,r6                 ;148
0005ec  9004              STR      r0,[sp,#0x10]         ;148
0005ee  f7fffffe          BL       __aeabi_fadd
0005f2  4606              MOV      r6,r0                 ;148
0005f4  622e              STR      r6,[r5,#0x20]         ;149
0005f6  f8c5801c          STR      r8,[r5,#0x1c]         ;150
0005fa  69a9              LDR      r1,[r5,#0x18]         ;154
0005fc  6a28              LDR      r0,[r5,#0x20]         ;154
0005fe  f7fffffe          BL       __aeabi_cfrcmple
000602  d20c              BCS      |L1.1566|
000604  e9d50105          LDRD     r0,r1,[r5,#0x14]      ;156
000608  e9cd0103          STRD     r0,r1,[sp,#0xc]       ;156
00060c  e9d50107          LDRD     r0,r1,[r5,#0x1c]      ;157
000610  e9c50105          STRD     r0,r1,[r5,#0x14]      ;157
000614  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;158
000618  e9c51207          STRD     r1,r2,[r5,#0x1c]      ;158
00061c  bf00              NOP                            ;159
                  |L1.1566|
00061e  6860              LDR      r0,[r4,#4]            ;161
000620  f7fffffe          BL       free
000624  6ba1              LDR      r1,[r4,#0x38]         ;164
000626  980f              LDR      r0,[sp,#0x3c]         ;164
000628  f7fffffe          BL       __aeabi_fsub
00062c  4982              LDR      r1,|L1.2104|
00062e  9001              STR      r0,[sp,#4]            ;164
000630  f7fffffe          BL       __aeabi_fmul
000634  f04f4185          MOV      r1,#0x42800000        ;164
000638  9002              STR      r0,[sp,#8]            ;164
00063a  f7fffffe          BL       __aeabi_fdiv
00063e  497f              LDR      r1,|L1.2108|
000640  9003              STR      r0,[sp,#0xc]          ;164
000642  f7fffffe          BL       __aeabi_fadd
000646  9004              STR      r0,[sp,#0x10]         ;164
000648  f7fffffe          BL       __aeabi_f2iz
00064c  4681              MOV      r9,r0                 ;164
00064e  f1b90f00          CMP      r9,#0                 ;165
000652  da01              BGE      |L1.1624|
000654  f04f0900          MOV      r9,#0                 ;166
                  |L1.1624|
000658  f1b90f64          CMP      r9,#0x64              ;167
00065c  dd01              BLE      |L1.1634|
00065e  f04f0964          MOV      r9,#0x64              ;168
                  |L1.1634|
000662  4648              MOV      r0,r9                 ;170
000664  e6ac              B        |L1.960|
;;;172    
                          ENDP

                  _ZN8ColorLUT10growRegionEP5RectARK6Frame8RK7Point16 PROC ; ColorLUT::growRegion(RectA*, const Frame8&, const Point16&)
;;;365    
;;;366    int ColorLUT::growRegion(RectA *result, const Frame8 &frame, const Point16 &seed)
000666  e92d4ff0          PUSH     {r4-r11,lr}
;;;367    {
00066a  b08d              SUB      sp,sp,#0x34
00066c  4607              MOV      r7,r0
00066e  460c              MOV      r4,r1
000670  4616              MOV      r6,r2
000672  4699              MOV      r9,r3
;;;368        uint8_t dir;
;;;369        Fpoint mean0, newMean;
000674  a80b              ADD      r0,sp,#0x2c
000676  f7fffffe          BL       _ZN6FpointC1Ev ; Fpoint::Fpoint()
00067a  a809              ADD      r0,sp,#0x24
00067c  f7fffffe          BL       _ZN6FpointC1Ev ; Fpoint::Fpoint()
;;;370        float dist;
;;;371        RectA newRegion, region;
000680  a806              ADD      r0,sp,#0x18
000682  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000686  a804              ADD      r0,sp,#0x10
000688  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
;;;372        uint8_t done;
;;;373    
;;;374        m_hpixels = (HuePixel *)maxMalloc(sizeof(HuePixel)*CL_HPIXEL_MAX_SIZE, &m_hpixelSize);
00068c  f107010c          ADD      r1,r7,#0xc
000690  f6446020          MOV      r0,#0x4e20
000694  f7fffffe          BL       _Z9maxMallocjPj ; maxMalloc(unsigned, unsigned*)
000698  6078              STR      r0,[r7,#4]
;;;375        if (m_hpixels==NULL)
00069a  6878              LDR      r0,[r7,#4]
00069c  b920              CBNZ     r0,|L1.1704|
;;;376            return -1; // not enough memory
00069e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1698|
;;;377    
;;;378        m_hpixelSize /= sizeof(HuePixel);
;;;379    
;;;380        // create seed 2*GROW_INCx2*GROW_INC region from seed position, make sure it's within the frame
;;;381        region.m_xOffset = seed.m_x>GROW_INC ? seed.m_x-GROW_INC : 0;
;;;382        region.m_yOffset = seed.m_y>GROW_INC ? seed.m_y-GROW_INC : 0;
;;;383        region.m_width = 2*GROW_INC;
;;;384        if (region.m_xOffset+region.m_width>frame.m_width)
;;;385            region.m_width = frame.m_width-region.m_xOffset;
;;;386        region.m_height = 2*GROW_INC;
;;;387        if (region.m_yOffset+region.m_height>frame.m_height)
;;;388            region.m_height = frame.m_height-region.m_yOffset;
;;;389    
;;;390        map(frame, region);
;;;391        mean(&mean0);
;;;392        done = 0x00;
;;;393    
;;;394        while (1)
;;;395        {
;;;396            for (dir=0; dir<4; dir++)
;;;397            {
;;;398                if (done&(1<<dir))
;;;399                    continue;
;;;400                else if (dir==0) // add to left
;;;401                {
;;;402                    if (region.m_xOffset>GROW_INC)
;;;403                        newRegion.m_xOffset = region.m_xOffset-GROW_INC;
;;;404                    else
;;;405                    {
;;;406                        newRegion.m_xOffset = 0;
;;;407                        done |= 1<<dir;
;;;408                    }
;;;409                    newRegion.m_yOffset = region.m_yOffset;
;;;410                    newRegion.m_width = GROW_INC;
;;;411                    newRegion.m_height = region.m_height;
;;;412                }
;;;413                else if (dir==1) // add to top
;;;414                {
;;;415                    if (region.m_yOffset>GROW_INC)
;;;416                        newRegion.m_yOffset = region.m_yOffset-GROW_INC;
;;;417                    else
;;;418                    {
;;;419                        newRegion.m_yOffset = 0;
;;;420                        done |= 1<<dir;
;;;421                    }
;;;422                    newRegion.m_xOffset = region.m_xOffset;
;;;423                    newRegion.m_width = region.m_width;
;;;424                    newRegion.m_height = GROW_INC;
;;;425                }
;;;426                else if (dir==2) // add to right
;;;427                {
;;;428                    if (region.m_xOffset+region.m_width+GROW_INC>frame.m_width)
;;;429                    {
;;;430                        newRegion.m_width = frame.m_width-region.m_xOffset-region.m_width;
;;;431                        done |= 1<<dir;
;;;432                    }
;;;433                    else
;;;434                        newRegion.m_width = GROW_INC;
;;;435                    newRegion.m_xOffset = region.m_xOffset+region.m_width;
;;;436                    newRegion.m_yOffset = region.m_yOffset;
;;;437                    newRegion.m_height = region.m_height;
;;;438                }
;;;439                else // dir==3, add to bottom
;;;440                {
;;;441                    if (region.m_yOffset+region.m_height+GROW_INC>frame.m_height)
;;;442                    {
;;;443                        newRegion.m_height = frame.m_height-region.m_yOffset-region.m_height;
;;;444                        done |= 1<<dir;
;;;445                    }
;;;446                    else
;;;447                        newRegion.m_height = GROW_INC;
;;;448                    newRegion.m_xOffset = region.m_xOffset;
;;;449                    newRegion.m_yOffset = region.m_yOffset+region.m_height;
;;;450                    newRegion.m_width = region.m_width;
;;;451                }
;;;452    
;;;453                // calculate new region mean
;;;454                map(frame, newRegion);
;;;455                mean(&newMean);
;;;456    
;;;457                // test new region
;;;458                dist = distance(mean0, newMean);
;;;459    
;;;460                if (dist>GROW_MAX_DISTANCE || m_hpixelLen==0)
;;;461                    done |= 1<<dir;
;;;462                else // new region passes, so add new region
;;;463                {
;;;464                    if (newRegion.m_xOffset<region.m_xOffset)
;;;465                    {
;;;466                        region.m_xOffset = newRegion.m_xOffset;
;;;467                        region.m_width += newRegion.m_width;
;;;468    
;;;469                    }
;;;470                    else if (newRegion.m_yOffset<region.m_yOffset)
;;;471                    {
;;;472                        region.m_yOffset = newRegion.m_yOffset;
;;;473                        region.m_height += newRegion.m_height;
;;;474    
;;;475                    }
;;;476                    else if (newRegion.m_xOffset+newRegion.m_width>region.m_xOffset+region.m_width)
;;;477                        region.m_width += newRegion.m_width;
;;;478                    else if (newRegion.m_yOffset+newRegion.m_height>region.m_yOffset+region.m_height)
;;;479                        region.m_height += newRegion.m_height;
;;;480                }
;;;481                if (done==0x0f) // finished!
;;;482                {
;;;483                    *result = region;
;;;484    				result->m_width = result->m_width*GROW_REGION_ATTEN;
;;;485    				result->m_xOffset += result->m_width*(1.0f-GROW_REGION_ATTEN)/2;
;;;486    				result->m_height = result->m_height*GROW_REGION_ATTEN;
;;;487    				result->m_yOffset += result->m_height*(1.0f-GROW_REGION_ATTEN)/2;
;;;488                    free(m_hpixels);
;;;489                    return 0;
;;;490                }
;;;491            }
;;;492        }
;;;493    }
0006a2  b00d              ADD      sp,sp,#0x34
0006a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1704|
0006a8  68f8              LDR      r0,[r7,#0xc]          ;378
0006aa  0840              LSRS     r0,r0,#1              ;378
0006ac  60f8              STR      r0,[r7,#0xc]          ;378
0006ae  f8b90000          LDRH     r0,[r9,#0]            ;381
0006b2  2804              CMP      r0,#4                 ;381
0006b4  dd03              BLE      |L1.1726|
0006b6  f8b90000          LDRH     r0,[r9,#0]            ;381
0006ba  1f00              SUBS     r0,r0,#4              ;381
0006bc  e000              B        |L1.1728|
                  |L1.1726|
0006be  2000              MOVS     r0,#0                 ;381
                  |L1.1728|
0006c0  b280              UXTH     r0,r0                 ;381
0006c2  f8ad0010          STRH     r0,[sp,#0x10]         ;381
0006c6  f8b90002          LDRH     r0,[r9,#2]            ;382
0006ca  2804              CMP      r0,#4                 ;382
0006cc  dd03              BLE      |L1.1750|
0006ce  f8b90002          LDRH     r0,[r9,#2]            ;382
0006d2  1f00              SUBS     r0,r0,#4              ;382
0006d4  e000              B        |L1.1752|
                  |L1.1750|
0006d6  2000              MOVS     r0,#0                 ;382
                  |L1.1752|
0006d8  b280              UXTH     r0,r0                 ;382
0006da  f8ad0012          STRH     r0,[sp,#0x12]         ;382
0006de  2008              MOVS     r0,#8                 ;383
0006e0  f8ad0014          STRH     r0,[sp,#0x14]         ;383
0006e4  f8bd0010          LDRH     r0,[sp,#0x10]         ;384
0006e8  f8bd1014          LDRH     r1,[sp,#0x14]         ;384
0006ec  4408              ADD      r0,r0,r1              ;384
0006ee  f9b61004          LDRSH    r1,[r6,#4]            ;384
0006f2  4288              CMP      r0,r1                 ;384
0006f4  dd06              BLE      |L1.1796|
0006f6  88b0              LDRH     r0,[r6,#4]            ;385
0006f8  f8bd1010          LDRH     r1,[sp,#0x10]         ;385
0006fc  1a40              SUBS     r0,r0,r1              ;385
0006fe  b280              UXTH     r0,r0                 ;385
000700  f8ad0014          STRH     r0,[sp,#0x14]         ;385
                  |L1.1796|
000704  2008              MOVS     r0,#8                 ;386
000706  f8ad0016          STRH     r0,[sp,#0x16]         ;386
00070a  f8bd0012          LDRH     r0,[sp,#0x12]         ;387
00070e  f8bd1016          LDRH     r1,[sp,#0x16]         ;387
000712  4408              ADD      r0,r0,r1              ;387
000714  f9b61006          LDRSH    r1,[r6,#6]            ;387
000718  4288              CMP      r0,r1                 ;387
00071a  dd06              BLE      |L1.1834|
00071c  88f0              LDRH     r0,[r6,#6]            ;388
00071e  f8bd1012          LDRH     r1,[sp,#0x12]         ;388
000722  1a40              SUBS     r0,r0,r1              ;388
000724  b280              UXTH     r0,r0                 ;388
000726  f8ad0016          STRH     r0,[sp,#0x16]         ;388
                  |L1.1834|
00072a  aa04              ADD      r2,sp,#0x10           ;390
00072c  4631              MOV      r1,r6                 ;390
00072e  4638              MOV      r0,r7                 ;390
000730  f7fffffe          BL       _ZN8ColorLUT3mapERK6Frame8RK5RectA ; ColorLUT::map(const Frame8&, const RectA&)
000734  a90b              ADD      r1,sp,#0x2c           ;391
000736  4638              MOV      r0,r7                 ;391
000738  f7fffffe          BL       _ZN8ColorLUT4meanEP6Fpoint ; ColorLUT::mean(Fpoint*)
00073c  f04f0800          MOV      r8,#0                 ;392
000740  e17a              B        |L1.2616|
                  |L1.1858|
000742  2500              MOVS     r5,#0                 ;396
000744  e175              B        |L1.2610|
                  |L1.1862|
000746  2001              MOVS     r0,#1                 ;398
000748  40a8              LSLS     r0,r0,r5              ;398
00074a  ea000008          AND      r0,r0,r8              ;398
00074e  b100              CBZ      r0,|L1.1874|
000750  e16d              B        |L1.2606|
                  |L1.1874|
000752  b9fd              CBNZ     r5,|L1.1940|
000754  f8bd0010          LDRH     r0,[sp,#0x10]         ;402
000758  2804              CMP      r0,#4                 ;402
00075a  dd06              BLE      |L1.1898|
00075c  f8bd0010          LDRH     r0,[sp,#0x10]         ;403
000760  1f00              SUBS     r0,r0,#4              ;403
000762  b280              UXTH     r0,r0                 ;403
000764  f8ad0018          STRH     r0,[sp,#0x18]         ;403
000768  e008              B        |L1.1916|
                  |L1.1898|
00076a  2000              MOVS     r0,#0                 ;406
00076c  f8ad0018          STRH     r0,[sp,#0x18]         ;406
000770  2001              MOVS     r0,#1                 ;407
000772  40a8              LSLS     r0,r0,r5              ;407
000774  ea400008          ORR      r0,r0,r8              ;407
000778  f00008ff          AND      r8,r0,#0xff           ;407
                  |L1.1916|
00077c  f8bd0012          LDRH     r0,[sp,#0x12]         ;409
000780  f8ad001a          STRH     r0,[sp,#0x1a]         ;409
000784  2004              MOVS     r0,#4                 ;410
000786  f8ad001c          STRH     r0,[sp,#0x1c]         ;410
00078a  f8bd0016          LDRH     r0,[sp,#0x16]         ;411
00078e  f8ad001e          STRH     r0,[sp,#0x1e]         ;411
000792  e088              B        |L1.2214|
                  |L1.1940|
000794  2d01              CMP      r5,#1                 ;413
000796  d11f              BNE      |L1.2008|
000798  f8bd0012          LDRH     r0,[sp,#0x12]         ;415
00079c  2804              CMP      r0,#4                 ;415
00079e  dd06              BLE      |L1.1966|
0007a0  f8bd0012          LDRH     r0,[sp,#0x12]         ;416
0007a4  1f00              SUBS     r0,r0,#4              ;416
0007a6  b280              UXTH     r0,r0                 ;416
0007a8  f8ad001a          STRH     r0,[sp,#0x1a]         ;416
0007ac  e008              B        |L1.1984|
                  |L1.1966|
0007ae  2000              MOVS     r0,#0                 ;419
0007b0  f8ad001a          STRH     r0,[sp,#0x1a]         ;419
0007b4  2001              MOVS     r0,#1                 ;420
0007b6  40a8              LSLS     r0,r0,r5              ;420
0007b8  ea400008          ORR      r0,r0,r8              ;420
0007bc  f00008ff          AND      r8,r0,#0xff           ;420
                  |L1.1984|
0007c0  f8bd0010          LDRH     r0,[sp,#0x10]         ;422
0007c4  f8ad0018          STRH     r0,[sp,#0x18]         ;422
0007c8  f8bd0014          LDRH     r0,[sp,#0x14]         ;423
0007cc  f8ad001c          STRH     r0,[sp,#0x1c]         ;423
0007d0  2004              MOVS     r0,#4                 ;424
0007d2  f8ad001e          STRH     r0,[sp,#0x1e]         ;424
0007d6  e066              B        |L1.2214|
                  |L1.2008|
0007d8  2d02              CMP      r5,#2                 ;426
0007da  d136              BNE      |L1.2122|
0007dc  f8bd0010          LDRH     r0,[sp,#0x10]         ;428
0007e0  f8bd1014          LDRH     r1,[sp,#0x14]         ;428
0007e4  4408              ADD      r0,r0,r1              ;428
0007e6  1d00              ADDS     r0,r0,#4              ;428
0007e8  f9b61004          LDRSH    r1,[r6,#4]            ;428
0007ec  4288              CMP      r0,r1                 ;428
0007ee  dd10              BLE      |L1.2066|
0007f0  88b0              LDRH     r0,[r6,#4]            ;430
0007f2  f8bd1010          LDRH     r1,[sp,#0x10]         ;430
0007f6  1a40              SUBS     r0,r0,r1              ;430
0007f8  f8bd1014          LDRH     r1,[sp,#0x14]         ;430
0007fc  1a40              SUBS     r0,r0,r1              ;430
0007fe  b280              UXTH     r0,r0                 ;430
000800  f8ad001c          STRH     r0,[sp,#0x1c]         ;430
000804  2001              MOVS     r0,#1                 ;431
000806  40a8              LSLS     r0,r0,r5              ;431
000808  ea400008          ORR      r0,r0,r8              ;431
00080c  f00008ff          AND      r8,r0,#0xff           ;431
000810  e002              B        |L1.2072|
                  |L1.2066|
000812  2004              MOVS     r0,#4                 ;434
000814  f8ad001c          STRH     r0,[sp,#0x1c]         ;434
                  |L1.2072|
000818  f8bd0010          LDRH     r0,[sp,#0x10]         ;435
00081c  f8bd1014          LDRH     r1,[sp,#0x14]         ;435
000820  4408              ADD      r0,r0,r1              ;435
000822  b280              UXTH     r0,r0                 ;435
000824  f8ad0018          STRH     r0,[sp,#0x18]         ;435
000828  f8bd0012          LDRH     r0,[sp,#0x12]         ;436
00082c  f8ad001a          STRH     r0,[sp,#0x1a]         ;436
000830  e006              B        |L1.2112|
000832  0000              DCW      0x0000
                  |L1.2100|
                          DCD      0x3fc90fda
                  |L1.2104|
                          DCD      0x42c80000
                  |L1.2108|
                          DCD      0x41200000
                  |L1.2112|
000840  f8bd0016          LDRH     r0,[sp,#0x16]         ;437
000844  f8ad001e          STRH     r0,[sp,#0x1e]         ;437
000848  e02d              B        |L1.2214|
                  |L1.2122|
00084a  f8bd0012          LDRH     r0,[sp,#0x12]         ;441
00084e  f8bd1016          LDRH     r1,[sp,#0x16]         ;441
000852  4408              ADD      r0,r0,r1              ;441
000854  1d00              ADDS     r0,r0,#4              ;441
000856  f9b61006          LDRSH    r1,[r6,#6]            ;441
00085a  4288              CMP      r0,r1                 ;441
00085c  dd10              BLE      |L1.2176|
00085e  88f0              LDRH     r0,[r6,#6]            ;443
000860  f8bd1012          LDRH     r1,[sp,#0x12]         ;443
000864  1a40              SUBS     r0,r0,r1              ;443
000866  f8bd1016          LDRH     r1,[sp,#0x16]         ;443
00086a  1a40              SUBS     r0,r0,r1              ;443
00086c  b280              UXTH     r0,r0                 ;443
00086e  f8ad001e          STRH     r0,[sp,#0x1e]         ;443
000872  2001              MOVS     r0,#1                 ;444
000874  40a8              LSLS     r0,r0,r5              ;444
000876  ea400008          ORR      r0,r0,r8              ;444
00087a  f00008ff          AND      r8,r0,#0xff           ;444
00087e  e002              B        |L1.2182|
                  |L1.2176|
000880  2004              MOVS     r0,#4                 ;447
000882  f8ad001e          STRH     r0,[sp,#0x1e]         ;447
                  |L1.2182|
000886  f8bd0010          LDRH     r0,[sp,#0x10]         ;448
00088a  f8ad0018          STRH     r0,[sp,#0x18]         ;448
00088e  f8bd0012          LDRH     r0,[sp,#0x12]         ;449
000892  f8bd1016          LDRH     r1,[sp,#0x16]         ;449
000896  4408              ADD      r0,r0,r1              ;449
000898  b280              UXTH     r0,r0                 ;449
00089a  f8ad001a          STRH     r0,[sp,#0x1a]         ;449
00089e  f8bd0014          LDRH     r0,[sp,#0x14]         ;450
0008a2  f8ad001c          STRH     r0,[sp,#0x1c]         ;450
                  |L1.2214|
0008a6  aa06              ADD      r2,sp,#0x18           ;454
0008a8  4631              MOV      r1,r6                 ;454
0008aa  4638              MOV      r0,r7                 ;454
0008ac  f7fffffe          BL       _ZN8ColorLUT3mapERK6Frame8RK5RectA ; ColorLUT::map(const Frame8&, const RectA&)
0008b0  a909              ADD      r1,sp,#0x24           ;455
0008b2  4638              MOV      r0,r7                 ;455
0008b4  f7fffffe          BL       _ZN8ColorLUT4meanEP6Fpoint ; ColorLUT::mean(Fpoint*)
0008b8  e9dd2309          LDRD     r2,r3,[sp,#0x24]      ;458
0008bc  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;458
0008c0  f7fffffe          BL       _Z8distance6FpointS_ ; distance(Fpoint, Fpoint)
0008c4  9008              STR      r0,[sp,#0x20]         ;458
0008c6  49af              LDR      r1,|L1.2948|
0008c8  9808              LDR      r0,[sp,#0x20]         ;460
0008ca  f7fffffe          BL       __aeabi_cfrcmple
0008ce  d301              BCC      |L1.2260|
0008d0  68b8              LDR      r0,[r7,#8]            ;460
0008d2  b930              CBNZ     r0,|L1.2274|
                  |L1.2260|
0008d4  2001              MOVS     r0,#1                 ;461
0008d6  40a8              LSLS     r0,r0,r5              ;461
0008d8  ea400008          ORR      r0,r0,r8              ;461
0008dc  f00008ff          AND      r8,r0,#0xff           ;461
0008e0  e04e              B        |L1.2432|
                  |L1.2274|
0008e2  f8bd0018          LDRH     r0,[sp,#0x18]         ;464
0008e6  f8bd1010          LDRH     r1,[sp,#0x10]         ;464
0008ea  4288              CMP      r0,r1                 ;464
0008ec  da0c              BGE      |L1.2312|
0008ee  f8bd0018          LDRH     r0,[sp,#0x18]         ;466
0008f2  f8ad0010          STRH     r0,[sp,#0x10]         ;466
0008f6  f8bd0014          LDRH     r0,[sp,#0x14]         ;467
0008fa  f8bd101c          LDRH     r1,[sp,#0x1c]         ;467
0008fe  4408              ADD      r0,r0,r1              ;467
000900  b280              UXTH     r0,r0                 ;467
000902  f8ad0014          STRH     r0,[sp,#0x14]         ;467
000906  e03b              B        |L1.2432|
                  |L1.2312|
000908  f8bd001a          LDRH     r0,[sp,#0x1a]         ;470
00090c  f8bd1012          LDRH     r1,[sp,#0x12]         ;470
000910  4288              CMP      r0,r1                 ;470
000912  da0c              BGE      |L1.2350|
000914  f8bd001a          LDRH     r0,[sp,#0x1a]         ;472
000918  f8ad0012          STRH     r0,[sp,#0x12]         ;472
00091c  f8bd0016          LDRH     r0,[sp,#0x16]         ;473
000920  f8bd101e          LDRH     r1,[sp,#0x1e]         ;473
000924  4408              ADD      r0,r0,r1              ;473
000926  b280              UXTH     r0,r0                 ;473
000928  f8ad0016          STRH     r0,[sp,#0x16]         ;473
00092c  e028              B        |L1.2432|
                  |L1.2350|
00092e  f8bd0018          LDRH     r0,[sp,#0x18]         ;476
000932  f8bd101c          LDRH     r1,[sp,#0x1c]         ;476
000936  4408              ADD      r0,r0,r1              ;476
000938  f8bd1010          LDRH     r1,[sp,#0x10]         ;476
00093c  f8bd2014          LDRH     r2,[sp,#0x14]         ;476
000940  4411              ADD      r1,r1,r2              ;476
000942  4288              CMP      r0,r1                 ;476
000944  dd08              BLE      |L1.2392|
000946  f8bd0014          LDRH     r0,[sp,#0x14]         ;477
00094a  f8bd101c          LDRH     r1,[sp,#0x1c]         ;477
00094e  4408              ADD      r0,r0,r1              ;477
000950  b280              UXTH     r0,r0                 ;477
000952  f8ad0014          STRH     r0,[sp,#0x14]         ;477
000956  e013              B        |L1.2432|
                  |L1.2392|
000958  f8bd001a          LDRH     r0,[sp,#0x1a]         ;478
00095c  f8bd101e          LDRH     r1,[sp,#0x1e]         ;478
000960  4408              ADD      r0,r0,r1              ;478
000962  f8bd1012          LDRH     r1,[sp,#0x12]         ;478
000966  f8bd2016          LDRH     r2,[sp,#0x16]         ;478
00096a  4411              ADD      r1,r1,r2              ;478
00096c  4288              CMP      r0,r1                 ;478
00096e  dd07              BLE      |L1.2432|
000970  f8bd0016          LDRH     r0,[sp,#0x16]         ;479
000974  f8bd101e          LDRH     r1,[sp,#0x1e]         ;479
000978  4408              ADD      r0,r0,r1              ;479
00097a  b280              UXTH     r0,r0                 ;479
00097c  f8ad0016          STRH     r0,[sp,#0x16]         ;479
                  |L1.2432|
000980  f1b80f0f          CMP      r8,#0xf               ;481
000984  d152              BNE      |L1.2604|
000986  9804              LDR      r0,[sp,#0x10]         ;483
000988  6020              STR      r0,[r4,#0]            ;483
00098a  9805              LDR      r0,[sp,#0x14]         ;483
00098c  6060              STR      r0,[r4,#4]            ;483
00098e  88a0              LDRH     r0,[r4,#4]            ;484
000990  f7fffffe          BL       __aeabi_ui2f
000994  4683              MOV      r11,r0                ;484
000996  f04f517d          MOV      r1,#0x3f400000        ;484
00099a  f7fffffe          BL       __aeabi_fmul
00099e  4682              MOV      r10,r0                ;484
0009a0  f7fffffe          BL       __aeabi_f2uiz
0009a4  80a0              STRH     r0,[r4,#4]            ;484
0009a6  88a0              LDRH     r0,[r4,#4]            ;485
0009a8  f7fffffe          BL       __aeabi_ui2f
0009ac  f04f517a          MOV      r1,#0x3e800000        ;485
0009b0  9001              STR      r0,[sp,#4]            ;485
0009b2  f7fffffe          BL       __aeabi_fmul
0009b6  f04f4180          MOV      r1,#0x40000000        ;485
0009ba  9002              STR      r0,[sp,#8]            ;485
0009bc  f7fffffe          BL       __aeabi_fdiv
0009c0  4683              MOV      r11,r0                ;485
0009c2  8820              LDRH     r0,[r4,#0]            ;485
0009c4  f7fffffe          BL       __aeabi_ui2f
0009c8  4659              MOV      r1,r11                ;485
0009ca  9003              STR      r0,[sp,#0xc]          ;485
0009cc  f7fffffe          BL       __aeabi_fadd
0009d0  4682              MOV      r10,r0                ;485
0009d2  f7fffffe          BL       __aeabi_f2uiz
0009d6  8020              STRH     r0,[r4,#0]            ;485
0009d8  88e0              LDRH     r0,[r4,#6]            ;486
0009da  f7fffffe          BL       __aeabi_ui2f
0009de  4683              MOV      r11,r0                ;486
0009e0  f04f517d          MOV      r1,#0x3f400000        ;486
0009e4  f7fffffe          BL       __aeabi_fmul
0009e8  4682              MOV      r10,r0                ;486
0009ea  f7fffffe          BL       __aeabi_f2uiz
0009ee  80e0              STRH     r0,[r4,#6]            ;486
0009f0  88e0              LDRH     r0,[r4,#6]            ;487
0009f2  f7fffffe          BL       __aeabi_ui2f
0009f6  f04f517a          MOV      r1,#0x3e800000        ;487
0009fa  9001              STR      r0,[sp,#4]            ;487
0009fc  f7fffffe          BL       __aeabi_fmul
000a00  f04f4180          MOV      r1,#0x40000000        ;487
000a04  9002              STR      r0,[sp,#8]            ;487
000a06  f7fffffe          BL       __aeabi_fdiv
000a0a  4683              MOV      r11,r0                ;487
000a0c  8860              LDRH     r0,[r4,#2]            ;487
000a0e  f7fffffe          BL       __aeabi_ui2f
000a12  4659              MOV      r1,r11                ;487
000a14  9003              STR      r0,[sp,#0xc]          ;487
000a16  f7fffffe          BL       __aeabi_fadd
000a1a  4682              MOV      r10,r0                ;487
000a1c  f7fffffe          BL       __aeabi_f2uiz
000a20  8060              STRH     r0,[r4,#2]            ;487
000a22  6878              LDR      r0,[r7,#4]            ;488
000a24  f7fffffe          BL       free
000a28  2000              MOVS     r0,#0                 ;489
000a2a  e63a              B        |L1.1698|
                  |L1.2604|
000a2c  bf00              NOP                            ;399
                  |L1.2606|
000a2e  1c68              ADDS     r0,r5,#1              ;396
000a30  b2c5              UXTB     r5,r0                 ;396
                  |L1.2610|
000a32  2d04              CMP      r5,#4                 ;396
000a34  f6ffae87          BLT      |L1.1862|
                  |L1.2616|
000a38  e683              B        |L1.1858|
;;;494    
                          ENDP

                  _ZN8ColorLUT3addEPK10ColorModelh PROC ; ColorLUT::add(const ColorModel*, unsigned char)
;;;279    
;;;280    void ColorLUT::add(const ColorModel *model, uint8_t modelIndex)
000a3a  b578              PUSH     {r3-r6,lr}
;;;281    {
000a3c  4603              MOV      r3,r0
000a3e  460c              MOV      r4,r1
;;;282        uint32_t i;
;;;283        HuePixel p;
000a40  4669              MOV      r1,sp
000a42  2500              MOVS     r5,#0
000a44  704d              STRB     r5,[r1,#1]
000a46  700d              STRB     r5,[r1,#0]
000a48  bf00              NOP      
;;;284    
;;;285    #ifndef PIXY
;;;286    #ifdef MATLAB
;;;287        matlabOut(model, modelIndex);
;;;288    #endif
;;;289    #endif
;;;290    
;;;291        if (modelIndex-1 > CL_NUM_MODELS)
000a4a  1e51              SUBS     r1,r2,#1
000a4c  2907              CMP      r1,#7
000a4e  dd00              BLE      |L1.2642|
                  |L1.2640|
;;;292            return;
;;;293    
;;;294    //MJLM    if (model->m_hue[0].m_slope==0.0f)
;;;295      //MJLM      return;
;;;296    
;;;297        for (i=0; i<CL_LUT_SIZE; i++)
;;;298        {
;;;299            p.m_v = (int8_t)(i&0xff);
;;;300            p.m_u = (int8_t)(i>>8);
;;;301    			
;;;302    		  /// TMS ///
;;;303    			//  if (p.m_v>50)
;;;304    				if (p.m_v>50 || p.m_u>50)
;;;305                m_lut[i] = 1;
;;;306    	    	else
;;;307      		     m_lut[i] = 0;
;;;308    			/// TMS ///
;;;309    			
;;;310          //MLJM  if (((m_lut[i]&0x07)==0 || (m_lut[i]&0x07)>=modelIndex) &&
;;;311            //MLJM        checkBounds(model, &p))
;;;312           //MLJM     m_lut[i] = modelIndex;
;;;313        }
;;;314    
;;;315        m_types[modelIndex-1] = model->m_type;
;;;316    }
000a50  bd78              POP      {r3-r6,pc}
                  |L1.2642|
000a52  2000              MOVS     r0,#0                 ;297
000a54  e016              B        |L1.2692|
                  |L1.2646|
000a56  b241              SXTB     r1,r0                 ;299
000a58  f88d1001          STRB     r1,[sp,#1]            ;299
000a5c  0a01              LSRS     r1,r0,#8              ;300
000a5e  b249              SXTB     r1,r1                 ;300
000a60  f88d1000          STRB     r1,[sp,#0]            ;300
000a64  f99d1001          LDRSB    r1,[sp,#1]            ;304
000a68  2932              CMP      r1,#0x32              ;304
000a6a  dc03              BGT      |L1.2676|
000a6c  f99d1000          LDRSB    r1,[sp,#0]            ;304
000a70  2932              CMP      r1,#0x32              ;304
000a72  dd03              BLE      |L1.2684|
                  |L1.2676|
000a74  2101              MOVS     r1,#1                 ;305
000a76  681d              LDR      r5,[r3,#0]            ;305
000a78  5429              STRB     r1,[r5,r0]            ;305
000a7a  e002              B        |L1.2690|
                  |L1.2684|
000a7c  2100              MOVS     r1,#0                 ;307
000a7e  681d              LDR      r5,[r3,#0]            ;307
000a80  5429              STRB     r1,[r5,r0]            ;307
                  |L1.2690|
000a82  1c40              ADDS     r0,r0,#1              ;297
                  |L1.2692|
000a84  f5b03f80          CMP      r0,#0x10000           ;297
000a88  d3e5              BCC      |L1.2646|
000a8a  1e51              SUBS     r1,r2,#1              ;315
000a8c  f1030510          ADD      r5,r3,#0x10           ;315
000a90  6826              LDR      r6,[r4,#0]            ;315
000a92  f8456021          STR      r6,[r5,r1,LSL #2]     ;315
000a96  bf00              NOP      
000a98  e7da              B        |L1.2640|
;;;317    
                          ENDP

                  _ZN8ColorLUT7getTypeEh PROC ; ColorLUT::getType(unsigned char)
;;;318    uint32_t ColorLUT::getType(uint8_t modelIndex)
000a9a  4602              MOV      r2,r0
;;;319    {
;;;320    	if (modelIndex-1 > CL_NUM_MODELS)
000a9c  1e48              SUBS     r0,r1,#1
000a9e  2807              CMP      r0,#7
000aa0  dd01              BLE      |L1.2726|
;;;321    		return 0;
000aa2  2000              MOVS     r0,#0
                  |L1.2724|
;;;322    
;;;323    	return m_types[modelIndex-1];
;;;324    }
000aa4  4770              BX       lr
                  |L1.2726|
000aa6  1e48              SUBS     r0,r1,#1              ;323
000aa8  f1020310          ADD      r3,r2,#0x10           ;323
000aac  f8530020          LDR      r0,[r3,r0,LSL #2]     ;323
000ab0  e7f8              B        |L1.2724|
;;;325    
                          ENDP

                  _ZN8ColorLUT11checkBoundsEPK10ColorModelPK8HuePixel PROC ; ColorLUT::checkBounds(const ColorModel*, const HuePixel*)
;;;326    bool ColorLUT::checkBounds(const ColorModel *model, const HuePixel *pixel)
000ab2  e92d47f0          PUSH     {r4-r10,lr}
;;;327    {
000ab6  4680              MOV      r8,r0
000ab8  460c              MOV      r4,r1
000aba  4615              MOV      r5,r2
;;;328        float v;
;;;329    
;;;330        v = model->m_hue[0].m_slope*pixel->m_u + model->m_hue[0].m_yi;
000abc  f9950000          LDRSB    r0,[r5,#0]
000ac0  f7fffffe          BL       __aeabi_i2f
000ac4  4681              MOV      r9,r0
000ac6  6861              LDR      r1,[r4,#4]
000ac8  f7fffffe          BL       __aeabi_fmul
000acc  4607              MOV      r7,r0
000ace  68a1              LDR      r1,[r4,#8]
000ad0  f7fffffe          BL       __aeabi_fadd
000ad4  4606              MOV      r6,r0
;;;331        if (v<(float)pixel->m_v)
000ad6  f9950001          LDRSB    r0,[r5,#1]
000ada  f7fffffe          BL       __aeabi_i2f
000ade  4607              MOV      r7,r0
000ae0  4631              MOV      r1,r6
000ae2  f7fffffe          BL       __aeabi_cfrcmple
000ae6  d202              BCS      |L1.2798|
;;;332            return false;
000ae8  2000              MOVS     r0,#0
                  |L1.2794|
;;;333    
;;;334        v = model->m_hue[1].m_slope*pixel->m_u + model->m_hue[1].m_yi;
;;;335        if (v>(float)pixel->m_v)
;;;336            return false;
;;;337    
;;;338        v = model->m_sat[0].m_slope*pixel->m_u + model->m_sat[0].m_yi;
;;;339        if (v<(float)pixel->m_v)
;;;340            return false;
;;;341    
;;;342        v = model->m_sat[1].m_slope*pixel->m_u + model->m_sat[1].m_yi;
;;;343        if (v>(float)pixel->m_v)
;;;344            return false;
;;;345    
;;;346        return true;
;;;347    }
000aea  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2798|
000aee  f9950000          LDRSB    r0,[r5,#0]            ;334
000af2  f7fffffe          BL       __aeabi_i2f
000af6  4681              MOV      r9,r0                 ;334
000af8  68e1              LDR      r1,[r4,#0xc]          ;334
000afa  f7fffffe          BL       __aeabi_fmul
000afe  4607              MOV      r7,r0                 ;334
000b00  6921              LDR      r1,[r4,#0x10]         ;334
000b02  f7fffffe          BL       __aeabi_fadd
000b06  4606              MOV      r6,r0                 ;334
000b08  f9950001          LDRSB    r0,[r5,#1]            ;335
000b0c  f7fffffe          BL       __aeabi_i2f
000b10  4607              MOV      r7,r0                 ;335
000b12  4631              MOV      r1,r6                 ;335
000b14  f7fffffe          BL       __aeabi_cfcmple
000b18  d201              BCS      |L1.2846|
000b1a  2000              MOVS     r0,#0                 ;336
000b1c  e7e5              B        |L1.2794|
                  |L1.2846|
000b1e  f9950000          LDRSB    r0,[r5,#0]            ;338
000b22  f7fffffe          BL       __aeabi_i2f
000b26  4681              MOV      r9,r0                 ;338
000b28  6961              LDR      r1,[r4,#0x14]         ;338
000b2a  f7fffffe          BL       __aeabi_fmul
000b2e  4607              MOV      r7,r0                 ;338
000b30  69a1              LDR      r1,[r4,#0x18]         ;338
000b32  f7fffffe          BL       __aeabi_fadd
000b36  4606              MOV      r6,r0                 ;338
000b38  f9950001          LDRSB    r0,[r5,#1]            ;339
000b3c  f7fffffe          BL       __aeabi_i2f
000b40  4607              MOV      r7,r0                 ;339
000b42  4631              MOV      r1,r6                 ;339
000b44  f7fffffe          BL       __aeabi_cfrcmple
000b48  d201              BCS      |L1.2894|
000b4a  2000              MOVS     r0,#0                 ;340
000b4c  e7cd              B        |L1.2794|
                  |L1.2894|
000b4e  f9950000          LDRSB    r0,[r5,#0]            ;342
000b52  f7fffffe          BL       __aeabi_i2f
000b56  4681              MOV      r9,r0                 ;342
000b58  69e1              LDR      r1,[r4,#0x1c]         ;342
000b5a  f7fffffe          BL       __aeabi_fmul
000b5e  4607              MOV      r7,r0                 ;342
000b60  6a21              LDR      r1,[r4,#0x20]         ;342
000b62  f7fffffe          BL       __aeabi_fadd
000b66  4606              MOV      r6,r0                 ;342
000b68  f9950001          LDRSB    r0,[r5,#1]            ;343
000b6c  f7fffffe          BL       __aeabi_i2f
000b70  4607              MOV      r7,r0                 ;343
000b72  4631              MOV      r1,r6                 ;343
000b74  f7fffffe          BL       __aeabi_cfcmple
000b78  d201              BCS      |L1.2942|
000b7a  2000              MOVS     r0,#0                 ;344
000b7c  e7b5              B        |L1.2794|
                  |L1.2942|
000b7e  2001              MOVS     r0,#1                 ;346
000b80  e7b3              B        |L1.2794|
;;;348    
                          ENDP

000b82  0000              DCW      0x0000
                  |L1.2948|
                          DCD      0x41a00000

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||i._ZN5RectAC1Ev||, COMGROUP=_ZN5RectAC1Ev, CODE, READONLY, ALIGN=1

                  _ZN5RectAC2Ev                  ; Alternate entry point ; RectA::RectA__sub_object()
                  _ZN5RectAC1Ev PROC ; RectA::RectA()
;;;68     {
;;;69         RectA()
;;;70         {
;;;71             m_xOffset = m_yOffset = m_width = m_height = 0;
;;;72         }
;;;73     
000000  2100              MOVS     r1,#0
000002  80c1              STRH     r1,[r0,#6]
000004  8081              STRH     r1,[r0,#4]
000006  8041              STRH     r1,[r0,#2]
000008  8001              STRH     r1,[r0,#0]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.15||, COMGROUP=_ZN5RectAC1Ev, LINKORDER=||i._ZN5RectAC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5RectAC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN6FpointC1Ev||, COMGROUP=_ZN6FpointC1Ev, CODE, READONLY, ALIGN=1

                  _ZN6FpointC2Ev                  ; Alternate entry point ; Fpoint::Fpoint__sub_object()
                  _ZN6FpointC1Ev PROC ; Fpoint::Fpoint()
;;;176    {
;;;177        Fpoint()
;;;178        {
;;;179            m_x = m_y = 0.0;
;;;180        }
;;;181    
000000  2100              MOVS     r1,#0
000002  6041              STR      r1,[r0,#4]
000004  6001              STR      r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.22||, COMGROUP=_ZN6FpointC1Ev, LINKORDER=||i._ZN6FpointC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6FpointC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN6FpointC1Eff||, COMGROUP=_ZN6FpointC1Eff, CODE, READONLY, ALIGN=1

                  _ZN6FpointC2Eff                  ; Alternate entry point ; Fpoint::Fpoint__sub_object(float, float)
                  _ZN6FpointC1Eff PROC ; Fpoint::Fpoint(float, float)
;;;181    
;;;182        Fpoint(float x, float y)
;;;183        {
;;;184            m_x = x;
;;;185            m_y = y;
;;;186        }
;;;187    
000000  6001              STR      r1,[r0,#0]
000002  6042              STR      r2,[r0,#4]
000004  4770              BX       lr
                          ENDP


                          AREA ||area_number.29||, COMGROUP=_ZN6FpointC1Eff, LINKORDER=||i._ZN6FpointC1Eff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6FpointC1Eff||
                          DCD      0x00000001

                          AREA ||i._ZN4LineC1Eff||, COMGROUP=_ZN4LineC1Eff, CODE, READONLY, ALIGN=1

                  _ZN4LineC2Eff                  ; Alternate entry point ; Line::Line__sub_object(float, float)
                  _ZN4LineC1Eff PROC ; Line::Line(float, float)
;;;197        }
;;;198        Line(float slope, float yi)
;;;199        {
;;;200            m_slope = slope;
;;;201            m_yi = yi;
;;;202        }
;;;203    
000000  6001              STR      r1,[r0,#0]
000002  6042              STR      r2,[r0,#4]
000004  4770              BX       lr
                          ENDP


                          AREA ||area_number.36||, COMGROUP=_ZN4LineC1Eff, LINKORDER=||i._ZN4LineC1Eff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4LineC1Eff||
                          DCD      0x00000001

                          AREA ||i._ZSt4fabsf||, COMGROUP=_ZSt4fabsf, CODE, READONLY, ALIGN=1

                  _ZSt4fabsf PROC ; std::fabs(float)
;;;866        inline float exp(float __x)   { return expf(__x); }
;;;867        inline float fabs(float __x)  { return fabsf(__x); }
000000  4601              MOV      r1,r0
000002  f0214000          BIC      r0,r1,#0x80000000
000006  4770              BX       lr
;;;868        inline float floor(float __x) { return floorf(__x); }
                          ENDP


                          AREA ||area_number.43||, COMGROUP=_ZSt4fabsf, LINKORDER=||i._ZSt4fabsf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt4fabsf||
                          DCD      0x00000001

                          AREA ||i._ZSt3cosf||, COMGROUP=_ZSt3cosf, CODE, READONLY, ALIGN=1

                  _ZSt3cosf PROC ; std::cos(float)
;;;863        inline float ceil(float __x)  { return ceilf(__x); }
;;;864        inline float cos(float __x)   { return cosf(__x); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       cosf
00000a  bd10              POP      {r4,pc}
;;;865        inline float cosh(float __x)  { return coshf(__x); }
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_ZSt3cosf, LINKORDER=||i._ZSt3cosf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt3cosf||
                          DCD      0x00000001

                          AREA ||i._ZSt3tanf||, COMGROUP=_ZSt3tanf, CODE, READONLY, ALIGN=1

                  _ZSt3tanf PROC ; std::tan(float)
;;;882        inline float _sqrt(float __x) { return _sqrtf(__x); }
;;;883        inline float tan(float __x)   { return tanf(__x); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       tanf
00000a  bd10              POP      {r4,pc}
;;;884        inline float tanh(float __x)  { return tanhf(__x); }
                          ENDP


                          AREA ||area_number.57||, COMGROUP=_ZSt3tanf, LINKORDER=||i._ZSt3tanf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt3tanf||
                          DCD      0x00000001
