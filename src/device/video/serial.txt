; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\serial.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\serial.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\serial.crf ..\libpixy\serial.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z8callbackPhj PROC ; callback(unsigned char*, unsigned)
;;;26     
;;;27     uint32_t callback(uint8_t *data, uint32_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;29     	return g_blobs->getBlock(data, len);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  4853              LDR      r0,|L1.344|
00000c  6800              LDR      r0,[r0,#0]  ; g_blobs
00000e  f7fffffe          BL       _ZN5Blobs8getBlockEPhj ; Blobs::getBlock(unsigned char*, unsigned)
;;;30     }
000012  bd70              POP      {r4-r6,pc}
;;;31     
                          ENDP

                  _Z16ser_setInterfaceh PROC ; ser_setInterface(unsigned char)
;;;66     
;;;67     int ser_setInterface(uint8_t interface)
000014  b510              PUSH     {r4,lr}
;;;68     {
000016  4604              MOV      r4,r0
;;;69     	if (interface>SER_INTERFACE_ADY)
000018  2c04              CMP      r4,#4
00001a  dd02              BLE      |L1.34|
;;;70     		return -1;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.32|
;;;71     
;;;72     	if (g_serial!=NULL)
;;;73     		g_serial->close();
;;;74     
;;;75     	g_interface = interface;
;;;76     
;;;77     	switch (interface)
;;;78     	{		    
;;;79     	case SER_INTERFACE_I2C:     
;;;80     		g_serial = g_i2c0;
;;;81     		break;
;;;82     
;;;83     	case SER_INTERFACE_UART:    
;;;84     		g_serial = g_uart0;
;;;85     		break;
;;;86     
;;;87     	case SER_INTERFACE_ADX:      
;;;88     		g_ad->setDirection(true);
;;;89     		g_serial = g_ad;
;;;90     		break;
;;;91     
;;;92     	case SER_INTERFACE_ADY:
;;;93     		g_ad->setDirection(false);
;;;94     		g_serial = g_ad;
;;;95     		break;		
;;;96     
;;;97     	default:
;;;98     	case SER_INTERFACE_SPI:
;;;99     		g_serial = g_spi;
;;;100    		break;
;;;101    	}
;;;102    
;;;103    	g_serial->open();
;;;104    
;;;105    	return 0;
;;;106    }
000020  bd10              POP      {r4,pc}
                  |L1.34|
000022  484e              LDR      r0,|L1.348|
000024  6800              LDR      r0,[r0,#0]            ;72  ; g_serial
000026  b130              CBZ      r0,|L1.54|
000028  484c              LDR      r0,|L1.348|
00002a  6800              LDR      r0,[r0,#0]            ;73  ; g_serial
00002c  6800              LDR      r0,[r0,#0]            ;73
00002e  6841              LDR      r1,[r0,#4]            ;73
000030  484a              LDR      r0,|L1.348|
000032  6800              LDR      r0,[r0,#0]            ;73  ; g_serial
000034  4788              BLX      r1                    ;73
                  |L1.54|
000036  484a              LDR      r0,|L1.352|
000038  7004              STRB     r4,[r0,#0]            ;75
00003a  2c05              CMP      r4,#5                 ;77
00003c  d222              BCS      |L1.132|
00003e  e8dff004          TBB      [pc,r4]               ;77
000042  2203              DCB      0x22,0x03
000044  080d1700          DCB      0x08,0x0d,0x17,0x00
000048  4846              LDR      r0,|L1.356|
00004a  6800              LDR      r0,[r0,#0]            ;80  ; g_i2c0
00004c  4943              LDR      r1,|L1.348|
00004e  6008              STR      r0,[r1,#0]            ;80  ; g_serial
000050  e01e              B        |L1.144|
000052  4845              LDR      r0,|L1.360|
000054  6800              LDR      r0,[r0,#0]            ;84  ; g_uart0
000056  4941              LDR      r1,|L1.348|
000058  6008              STR      r0,[r1,#0]            ;84  ; g_serial
00005a  e019              B        |L1.144|
00005c  2101              MOVS     r1,#1                 ;88
00005e  4843              LDR      r0,|L1.364|
000060  6800              LDR      r0,[r0,#0]            ;88  ; g_ad
000062  f7fffffe          BL       _ZN9AnalogDig12setDirectionEb ; AnalogDig::setDirection(bool)
000066  4841              LDR      r0,|L1.364|
000068  6800              LDR      r0,[r0,#0]            ;89  ; g_ad
00006a  493c              LDR      r1,|L1.348|
00006c  6008              STR      r0,[r1,#0]            ;89  ; g_serial
00006e  e00f              B        |L1.144|
000070  2100              MOVS     r1,#0                 ;93
000072  483e              LDR      r0,|L1.364|
000074  6800              LDR      r0,[r0,#0]            ;93  ; g_ad
000076  f7fffffe          BL       _ZN9AnalogDig12setDirectionEb ; AnalogDig::setDirection(bool)
00007a  483c              LDR      r0,|L1.364|
00007c  6800              LDR      r0,[r0,#0]            ;94  ; g_ad
00007e  4937              LDR      r1,|L1.348|
000080  6008              STR      r0,[r1,#0]            ;94  ; g_serial
000082  e005              B        |L1.144|
                  |L1.132|
000084  bf00              NOP                            ;98
000086  483a              LDR      r0,|L1.368|
000088  6800              LDR      r0,[r0,#0]            ;99  ; g_spi
00008a  4934              LDR      r1,|L1.348|
00008c  6008              STR      r0,[r1,#0]            ;99  ; g_serial
00008e  bf00              NOP                            ;100
                  |L1.144|
000090  bf00              NOP                            ;81
000092  4832              LDR      r0,|L1.348|
000094  6800              LDR      r0,[r0,#0]            ;103  ; g_serial
000096  6800              LDR      r0,[r0,#0]            ;103
000098  6801              LDR      r1,[r0,#0]            ;103
00009a  4830              LDR      r0,|L1.348|
00009c  6800              LDR      r0,[r0,#0]            ;103  ; g_serial
00009e  4788              BLX      r1                    ;103
0000a0  2000              MOVS     r0,#0                 ;105
0000a2  e7bd              B        |L1.32|
;;;107    
                          ENDP

                  _Z14ser_loadParamsv PROC ; ser_loadParams()
;;;44     
;;;45     void ser_loadParams()
0000a4  b500              PUSH     {lr}
;;;46     {
0000a6  b085              SUB      sp,sp,#0x14
;;;47     	prm_add("Data out port", 0, 
0000a8  2000              MOVS     r0,#0
0000aa  9000              STR      r0,[sp,#0]
0000ac  2301              MOVS     r3,#1
0000ae  4a31              LDR      r2,|L1.372|
0000b0  4601              MOV      r1,r0
0000b2  9001              STR      r0,[sp,#4]
0000b4  a030              ADR      r0,|L1.376|
0000b6  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;48     		"@c Interface Selects the port that's used to output data, 0=SPI, 1=I2C, 2=UART, 3=analog/digital x, 4=analog/digital y (default 0)", UINT8(0), END);
;;;49     	prm_add("I2C address", PRM_FLAG_HEX_FORMAT, 
0000ba  2000              MOVS     r0,#0
0000bc  2154              MOVS     r1,#0x54
0000be  2301              MOVS     r3,#1
0000c0  4a31              LDR      r2,|L1.392|
0000c2  e9cd1000          STRD     r1,r0,[sp,#0]
0000c6  2110              MOVS     r1,#0x10
0000c8  a030              ADR      r0,|L1.396|
0000ca  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;50     		"@c Interface Sets the I2C address if you are using I2C data out port. (default 0x54)", UINT8(I2C_DEFAULT_SLAVE_ADDR), END);
;;;51     	prm_add("UART baudrate", 0, 
0000ce  2000              MOVS     r0,#0
0000d0  f44f4196          MOV      r1,#0x4b00
0000d4  2304              MOVS     r3,#4
0000d6  4a30              LDR      r2,|L1.408|
0000d8  e9cd1000          STRD     r1,r0,[sp,#0]
0000dc  4601              MOV      r1,r0
0000de  a02f              ADR      r0,|L1.412|
0000e0  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;52     		"@c Interface Sets the UART baudrate if you are using UART data out port. (default 19200)", UINT32(19200), END);
;;;53     
;;;54     	uint8_t interface, addr;
;;;55     	uint32_t baudrate;
;;;56     
;;;57     	prm_get("Data out port", &interface, END);
0000e4  2200              MOVS     r2,#0
0000e6  a904              ADD      r1,sp,#0x10
0000e8  a023              ADR      r0,|L1.376|
0000ea  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;58     	ser_setInterface(interface);
0000ee  f89d0010          LDRB     r0,[sp,#0x10]
0000f2  f7fffffe          BL       _Z16ser_setInterfaceh ; ser_setInterface(unsigned char)
;;;59     
;;;60     	prm_get("I2C address", &addr, END);
0000f6  2200              MOVS     r2,#0
0000f8  a903              ADD      r1,sp,#0xc
0000fa  a024              ADR      r0,|L1.396|
0000fc  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;61     	g_i2c0->setSlaveAddr(addr);
000100  f89d100c          LDRB     r1,[sp,#0xc]
000104  4817              LDR      r0,|L1.356|
000106  6800              LDR      r0,[r0,#0]  ; g_i2c0
000108  f7fffffe          BL       _ZN3I2c12setSlaveAddrEh ; I2c::setSlaveAddr(unsigned char)
;;;62     
;;;63     	prm_get("UART baudrate", &baudrate, END);
00010c  2200              MOVS     r2,#0
00010e  a902              ADD      r1,sp,#8
000110  a022              ADR      r0,|L1.412|
000112  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;64     	g_uart0->setBaudrate(baudrate);
000116  4814              LDR      r0,|L1.360|
000118  9902              LDR      r1,[sp,#8]
00011a  6800              LDR      r0,[r0,#0]  ; g_uart0
00011c  f7fffffe          BL       _ZN4Uart11setBaudrateEj ; Uart::setBaudrate(unsigned)
;;;65     }
000120  b005              ADD      sp,sp,#0x14
000122  bd00              POP      {pc}
;;;66     
                          ENDP

                  _Z8ser_initv PROC ; ser_init()
;;;32     
;;;33     int ser_init()
000124  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	i2c_init(callback);
000126  f2af1027          ADR      r0,_Z8callbackPhj + 1 ; callback(unsigned char*, unsigned)
00012a  f7fffffe          BL       _Z8i2c_initPFjPhjE ; i2c_init(unsigned(*)(unsigned char*, unsigned))
;;;36     	spi_init(callback);
00012e  f2af102f          ADR      r0,_Z8callbackPhj + 1 ; callback(unsigned char*, unsigned)
000132  f7fffffe          BL       _Z8spi_initPFjPhjE ; spi_init(unsigned(*)(unsigned char*, unsigned))
;;;37     	uart_init(callback);
000136  f2af1037          ADR      r0,_Z8callbackPhj + 1 ; callback(unsigned char*, unsigned)
00013a  f7fffffe          BL       _Z9uart_initPFjPhjE ; uart_init(unsigned(*)(unsigned char*, unsigned))
;;;38     	ad_init();
00013e  f7fffffe          BL       _Z7ad_initv ; ad_init()
;;;39     
;;;40     	ser_loadParams();
000142  f7fffffe          BL       _Z14ser_loadParamsv ; ser_loadParams()
;;;41     		
;;;42     	return 0;	
000146  2000              MOVS     r0,#0
;;;43     }
000148  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  _Z16ser_getInterfacev PROC ; ser_getInterface()
;;;107    
;;;108    uint8_t ser_getInterface()
00014a  4805              LDR      r0,|L1.352|
;;;109    {
;;;110    	return g_interface;
00014c  7800              LDRB     r0,[r0,#0]  ; g_interface
;;;111    }
00014e  4770              BX       lr
;;;112    
                          ENDP

                  _Z13ser_getSerialv PROC ; ser_getSerial()
;;;113    Iserial *ser_getSerial()
000150  4802              LDR      r0,|L1.348|
;;;114    {
;;;115    	return g_serial;
000152  6800              LDR      r0,[r0,#0]  ; g_serial
;;;116    }
000154  4770              BX       lr
                          ENDP

000156  0000              DCW      0x0000
                  |L1.344|
                          DCD      g_blobs
                  |L1.348|
                          DCD      g_serial
                  |L1.352|
                          DCD      g_interface
                  |L1.356|
                          DCD      g_i2c0
                  |L1.360|
                          DCD      g_uart0
                  |L1.364|
                          DCD      g_ad
                  |L1.368|
                          DCD      g_spi
                  |L1.372|
                          DCD      ||.conststring||
                  |L1.376|
000178  44617461          DCB      "Data out port",0
00017c  206f7574
000180  20706f72
000184  7400    
000186  00                DCB      0
000187  00                DCB      0
                  |L1.392|
                          DCD      ||.conststring||+0x84
                  |L1.396|
00018c  49324320          DCB      "I2C address",0
000190  61646472
000194  65737300
                  |L1.408|
                          DCD      ||.conststring||+0xdc
                  |L1.412|
00019c  55415254          DCB      "UART baudrate",0
0001a0  20626175
0001a4  64726174
0001a8  6500    
0001aa  00                DCB      0
0001ab  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  40632049          DCB      "@c Interface Selects the port that's used to output dat"
000004  6e746572
000008  66616365
00000c  2053656c
000010  65637473
000014  20746865
000018  20706f72
00001c  74207468
000020  61742773
000024  20757365
000028  6420746f
00002c  206f7574
000030  70757420
000034  646174  
000037  612c2030          DCB      "a, 0=SPI, 1=I2C, 2=UART, 3=analog/digital x, 4=analog/d"
00003b  3d535049
00003f  2c20313d
000043  4932432c
000047  20323d55
00004b  4152542c
00004f  20333d61
000053  6e616c6f
000057  672f6469
00005b  67697461
00005f  6c20782c
000063  20343d61
000067  6e616c6f
00006b  672f64  
00006e  69676974          DCB      "igital y (default 0)",0
000072  616c2079
000076  20286465
00007a  6661756c
00007e  74203029
000082  00      
000083  00                DCB      0
000084  40632049          DCB      "@c Interface Sets the I2C address if you are using I2C "
000088  6e746572
00008c  66616365
000090  20536574
000094  73207468
000098  65204932
00009c  43206164
0000a0  64726573
0000a4  73206966
0000a8  20796f75
0000ac  20617265
0000b0  20757369
0000b4  6e672049
0000b8  324320  
0000bb  64617461          DCB      "data out port. (default 0x54)",0
0000bf  206f7574
0000c3  20706f72
0000c7  742e2028
0000cb  64656661
0000cf  756c7420
0000d3  30783534
0000d7  2900    
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  40632049          DCB      "@c Interface Sets the UART baudrate if you are using UA"
0000e0  6e746572
0000e4  66616365
0000e8  20536574
0000ec  73207468
0000f0  65205541
0000f4  52542062
0000f8  61756472
0000fc  61746520
000100  69662079
000104  6f752061
000108  72652075
00010c  73696e67
000110  205541  
000113  52542064          DCB      "RT data out port. (default 19200)",0
000117  61746120
00011b  6f757420
00011f  706f7274
000123  2e202864
000127  65666175
00012b  6c742031
00012f  39323030
000133  2900    

                          AREA ||.data||, DATA, ALIGN=2

                  g_interface
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_serial
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\serial.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_serial_cpp_ca1ff4c7___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___10_serial_cpp_ca1ff4c7___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_serial_cpp_ca1ff4c7___Z7__REVSHi|
#line 144
|__asm___10_serial_cpp_ca1ff4c7___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
