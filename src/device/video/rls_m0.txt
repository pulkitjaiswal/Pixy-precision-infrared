; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\m0\rls_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\m0\rls_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -D__MICROLIB -DCORE_M0 -DIPC_SLAVE -DPIXY --omf_browse=.\m0\rls_m0.crf ..\libpixy\rls_m0.c]
                          THUMB

                          AREA ||i.createLogLut||, CODE, READONLY, ALIGN=2

                  createLogLut PROC
;;;536    
;;;537    void createLogLut(void)
000000  b500              PUSH     {lr}
;;;538    {
;;;539    	int i;
;;;540    	
;;;541    	for (i=0; i<CAM_RES2_WIDTH; i++)
000002  2200              MOVS     r2,#0
000004  e007              B        |L1.22|
                  |L1.6|
;;;542    		g_logLut[i] = intLog(i) + 3;
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       intLog
00000c  1cc0              ADDS     r0,r0,#3
00000e  4904              LDR      r1,|L1.32|
000010  6809              LDR      r1,[r1,#0]  ; g_logLut
000012  5488              STRB     r0,[r1,r2]
000014  1c52              ADDS     r2,r2,#1              ;541
                  |L1.22|
000016  20ff              MOVS     r0,#0xff              ;541
000018  3041              ADDS     r0,r0,#0x41           ;541
00001a  4282              CMP      r2,r0                 ;541
00001c  dbf3              BLT      |L1.6|
;;;543    }
00001e  bd00              POP      {pc}
;;;544    
                          ENDP

                  |L1.32|
                          DCD      g_logLut

                          AREA ||i.getRLSFrame||, CODE, READONLY, ALIGN=2

                  getRLSFrame PROC
;;;557    
;;;558    int32_t getRLSFrame(uint32_t *m0Mem, uint32_t *lut)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;559    {
000002  b089              SUB      sp,sp,#0x24
;;;560    	uint8_t *lut2 = (uint8_t *)*lut;
000004  980a              LDR      r0,[sp,#0x28]
000006  6800              LDR      r0,[r0,#0]
000008  9008              STR      r0,[sp,#0x20]
;;;561    	Qval *qvalStore = (Qval *)*m0Mem;
00000a  9809              LDR      r0,[sp,#0x24]
00000c  6800              LDR      r0,[r0,#0]
00000e  9007              STR      r0,[sp,#0x1c]
;;;562    	uint32_t line;
;;;563    	uint32_t numQvals;
;;;564    	uint32_t totalQvals;
;;;565    	uint8_t *lineStore;
;;;566    	uint8_t *logLut;
;;;567    
;;;568    	lineStore = (uint8_t *)(qvalStore + MAX_QVALS_PER_LINE);
000010  9807              LDR      r0,[sp,#0x1c]
000012  1dc6              ADDS     r6,r0,#7
000014  36f9              ADDS     r6,r6,#0xf9
;;;569    	logLut = lineStore + CAM_RES2_WIDTH + 4;
000016  4637              MOV      r7,r6
000018  37ff              ADDS     r7,r7,#0xff
00001a  3745              ADDS     r7,r7,#0x45
;;;570    	// m0mem needs to be at least 64*4 + CAM_RES2_WIDTH*2 + 4 =	900 ~ 1024
;;;571    
;;;572    	if (g_logLut!=logLut)
00001c  4832              LDR      r0,|L2.232|
00001e  6800              LDR      r0,[r0,#0]  ; g_logLut
000020  42b8              CMP      r0,r7
000022  d003              BEQ      |L2.44|
;;;573    	{
;;;574    		g_logLut = logLut; 
000024  4830              LDR      r0,|L2.232|
000026  6007              STR      r7,[r0,#0]  ; g_logLut
;;;575    	 	createLogLut();
000028  f7fffffe          BL       createLogLut
                  |L2.44|
;;;576    	}
;;;577    
;;;578    	// don't even attempt to grab lines if we're lacking space...
;;;579    	if (qq_free()<MAX_QVALS_PER_LINE)
00002c  f7fffffe          BL       qq_free
000030  2840              CMP      r0,#0x40
000032  da03              BGE      |L2.60|
;;;580    		return -1; 
000034  2000              MOVS     r0,#0
000036  43c0              MVNS     r0,r0
                  |L2.56|
;;;581    
;;;582    	// indicate start of frame
;;;583    	qq_enqueue(0xffffffff); 
;;;584    	skipLines(0);
;;;585    	for (line=0, totalQvals=1; line<CAM_RES2_HEIGHT; line++)  // start totalQvals at 1 because of start of frame value
;;;586    	{
;;;587    		// not enough space--- return error
;;;588    		if (qq_free()<MAX_QVALS_PER_LINE)
;;;589    			return -1; 
;;;590    		// mark beginning of this row (column 0 = 0)
;;;591    		// column 1 is the first real column of pixels
;;;592    		qq_enqueue(0); 
;;;593    		lineProcessedRL0A((uint32_t *)&CAM_PORT, lineStore, CAM_RES2_WIDTH); 
;;;594    		numQvals = lineProcessedRL1A((uint32_t *)&CAM_PORT, qvalStore, lut2, lineStore, CAM_RES2_WIDTH, g_logLut, g_qqueue->data, g_qqueue->writeIndex, QQ_MEM_SIZE);
;;;595    		// modify qq to reflect added data
;;;596    		g_qqueue->writeIndex += numQvals;
;;;597    		if (g_qqueue->writeIndex>=QQ_MEM_SIZE)
;;;598    			g_qqueue->writeIndex -= QQ_MEM_SIZE;
;;;599    		g_qqueue->produced += numQvals;
;;;600    		totalQvals += numQvals+1; // +1 because of beginning of line 
;;;601    	}
;;;602    	return 0;
;;;603    }
000038  b00b              ADD      sp,sp,#0x2c
00003a  bdf0              POP      {r4-r7,pc}
                  |L2.60|
00003c  2000              MOVS     r0,#0                 ;583
00003e  43c0              MVNS     r0,r0                 ;583
000040  f7fffffe          BL       qq_enqueue
000044  2000              MOVS     r0,#0                 ;584
000046  f7fffffe          BL       skipLines
00004a  2500              MOVS     r5,#0                 ;585
00004c  2001              MOVS     r0,#1                 ;585
00004e  9006              STR      r0,[sp,#0x18]         ;585
000050  e046              B        |L2.224|
                  |L2.82|
000052  f7fffffe          BL       qq_free
000056  2840              CMP      r0,#0x40              ;588
000058  da02              BGE      |L2.96|
00005a  2000              MOVS     r0,#0                 ;589
00005c  43c0              MVNS     r0,r0                 ;589
00005e  e7eb              B        |L2.56|
                  |L2.96|
000060  2000              MOVS     r0,#0                 ;592
000062  f7fffffe          BL       qq_enqueue
000066  22ff              MOVS     r2,#0xff              ;593
000068  3241              ADDS     r2,r2,#0x41           ;593
00006a  4631              MOV      r1,r6                 ;593
00006c  481f              LDR      r0,|L2.236|
00006e  f7fffffe          BL       lineProcessedRL0A
000072  4a1f              LDR      r2,|L2.240|
000074  481f              LDR      r0,|L2.244|
000076  6800              LDR      r0,[r0,#0]            ;594  ; g_qqueue
000078  8840              LDRH     r0,[r0,#2]            ;594
00007a  491e              LDR      r1,|L2.244|
00007c  6809              LDR      r1,[r1,#0]            ;594  ; g_qqueue
00007e  3108              ADDS     r1,r1,#8              ;594
000080  4b19              LDR      r3,|L2.232|
000082  681b              LDR      r3,[r3,#0]            ;594  ; g_logLut
000084  9301              STR      r3,[sp,#4]            ;594
000086  9204              STR      r2,[sp,#0x10]         ;594
000088  9102              STR      r1,[sp,#8]            ;594
00008a  9003              STR      r0,[sp,#0xc]          ;594
00008c  20ff              MOVS     r0,#0xff              ;594
00008e  3041              ADDS     r0,r0,#0x41           ;594
000090  4633              MOV      r3,r6                 ;594
000092  9000              STR      r0,[sp,#0]            ;594
000094  4815              LDR      r0,|L2.236|
000096  9a08              LDR      r2,[sp,#0x20]         ;594
000098  9907              LDR      r1,[sp,#0x1c]         ;594
00009a  f7fffffe          BL       lineProcessedRL1A
00009e  4604              MOV      r4,r0                 ;594
0000a0  4814              LDR      r0,|L2.244|
0000a2  6800              LDR      r0,[r0,#0]            ;596  ; g_qqueue
0000a4  8840              LDRH     r0,[r0,#2]            ;596
0000a6  1900              ADDS     r0,r0,r4              ;596
0000a8  4912              LDR      r1,|L2.244|
0000aa  6809              LDR      r1,[r1,#0]            ;596  ; g_qqueue
0000ac  8048              STRH     r0,[r1,#2]            ;596
0000ae  4811              LDR      r0,|L2.244|
0000b0  6800              LDR      r0,[r0,#0]            ;597  ; g_qqueue
0000b2  8840              LDRH     r0,[r0,#2]            ;597
0000b4  490e              LDR      r1,|L2.240|
0000b6  4288              CMP      r0,r1                 ;597
0000b8  d306              BCC      |L2.200|
0000ba  480e              LDR      r0,|L2.244|
0000bc  6800              LDR      r0,[r0,#0]            ;598  ; g_qqueue
0000be  8840              LDRH     r0,[r0,#2]            ;598
0000c0  1a40              SUBS     r0,r0,r1              ;598
0000c2  490c              LDR      r1,|L2.244|
0000c4  6809              LDR      r1,[r1,#0]            ;598  ; g_qqueue
0000c6  8048              STRH     r0,[r1,#2]            ;598
                  |L2.200|
0000c8  480a              LDR      r0,|L2.244|
0000ca  6800              LDR      r0,[r0,#0]            ;599  ; g_qqueue
0000cc  8880              LDRH     r0,[r0,#4]            ;599
0000ce  1900              ADDS     r0,r0,r4              ;599
0000d0  4908              LDR      r1,|L2.244|
0000d2  6809              LDR      r1,[r1,#0]            ;599  ; g_qqueue
0000d4  8088              STRH     r0,[r1,#4]            ;599
0000d6  1c61              ADDS     r1,r4,#1              ;600
0000d8  9806              LDR      r0,[sp,#0x18]         ;600
0000da  1840              ADDS     r0,r0,r1              ;600
0000dc  9006              STR      r0,[sp,#0x18]         ;600
0000de  1c6d              ADDS     r5,r5,#1              ;585
                  |L2.224|
0000e0  2dc8              CMP      r5,#0xc8              ;585
0000e2  d3b6              BCC      |L2.82|
0000e4  2000              MOVS     r0,#0                 ;602
0000e6  e7a7              B        |L2.56|
;;;604    
                          ENDP

                  |L2.232|
                          DCD      g_logLut
                  |L2.236|
                          DCD      0x400f6104
                  |L2.240|
                          DCD      0x00000bfe
                  |L2.244|
                          DCD      g_qqueue

                          AREA ||i.intLog||, CODE, READONLY, ALIGN=1

                  intLog PROC
;;;531    
;;;532    uint8_t intLog(int i)
000000  4601              MOV      r1,r0
;;;533    {
;;;534    	return 0;
000002  2000              MOVS     r0,#0
;;;535    }
000004  4770              BX       lr
;;;536    
                          ENDP


                          AREA ||i.rls_init||, CODE, READONLY, ALIGN=2

                  rls_init PROC
;;;604    
;;;605    int rls_init(void)
000000  b510              PUSH     {r4,lr}
;;;606    {
;;;607    	chirpSetProc("getRLSFrame", (ProcPtr)getRLSFrame);
000002  4903              LDR      r1,|L4.16|
000004  a003              ADR      r0,|L4.20|
000006  f7fffffe          BL       chirpSetProc
;;;608    	return 0;
00000a  2000              MOVS     r0,#0
;;;609    }
00000c  bd10              POP      {r4,pc}
;;;610    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      getRLSFrame
                  |L4.20|
000014  67657452          DCB      "getRLSFrame",0
000018  4c534672
00001c  616d6500

                          AREA ||.data||, DATA, ALIGN=2

                  g_logLut
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\rls_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_g_logLut____REV16|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___8_rls_m0_c_g_logLut____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_g_logLut____REVSH|
#line 144
|__asm___8_rls_m0_c_g_logLut____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL0A|
#line 190 "..\\libpixy\\rls_m0.c"
|lineProcessedRL0A| PROC
#line 191
 
 PRESERVE8
 IMPORT callSyncM1

 PUSH {r4-r5, lr}

 
 ADDS r2, r1
 
 MOVS r5, #0x1
 LSLS r5, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  
 
 

 
dest10A LDR r3, [r0]  
 TST r3, r5  
 BEQ dest10A  

 
 NOP
 NOP

loop5A
 LDRB r3, [r0]  
 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r3, [r0]  
 
 
 ADDS r3, r4  
 SUBS r3, #127  
 ASRS r3, #1  
 STRB r3, [r1]  
 
 ADDS r1, #0x01
 CMP r1, r2
 NOP
 BLT loop5A

 
dest11A LDR r3, [r0]  
 TST r3, r5  
 BNE dest11A  

 POP {r4-r5, pc}
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL1A|
#line 254
|lineProcessedRL1A| PROC
#line 256

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


 MACRO 
$lx RED 
$lx LDRB r6, [r0]  
 
 MEND

 MACRO 
$lx GREEN 
$lx LDRB r5, [r0]  
 
 MEND
#line 319


 MACRO  
$lx LEXT $rx
$lx RED
 
 
 ADDS r6, r5  
 SUBS r6, #127  
 ASRS r6, #1  
 LSLS r6, #24  
 LSRS r6, #16  
 LDRB r5, [r3, r4]  
 
 ORRS r5, r6  
 LDRB r1, [r2, r5]  
 
 ADDS r4, #1  
 
 GREEN
 
 LSLS $rx, r1, #29  
 LSRS $rx, #29  
 MEND

 MACRO  
$lx EOL_CHECK
$lx CMP r4, r9
 BGE eol
 MEND

 
 
 
 MACRO  
$lx QVAL
 MOV r5, r10  
 LSLS r6, r5, #3  
 ORRS r6, r7  
 SUBS r1, r4, r5  
 LSLS r5, r1, #12  
 ORRS r6, r5  
 
 LDR r5, [sp, #0x24]  
 
 LDRB r1, [r1, r5]  
 
 MOV r5, r8  
 LSRS r5, r1  
 LSLS r5, #21  
 ORRS r6, r5  
 LSLS r1, #28  
 ORRS r6, r1  
 MOV r1, r12  
 MOVS r7, #4
 
 GREEN
 
 STR r6, [r1]  
 
 ADD r12, r7  
 MEND

 PRESERVE8
 IMPORT callSyncM1

 PUSH {r1-r7, lr}
 
 LDR r4, [sp, #0x20]
 MOV r9, r4
 MOVS r5, #0x1
 LSLS r5, #11

 PUSH {r0-r3}  
 BL.W callSyncM1  
 POP {r0-r3}  

 
 
 
dest12A LDR r6, [r0]  
 TST r6, r5  
 BEQ dest12A  

 
 MOV r12, r1  
 MOVS r4, #0  

 
 GREEN
 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
zero0 MOVS r6, #0 
 MOV r8, r6  
 EOL_CHECK
 
 
zero1 LEXT r7
 
 
 
 CMP r7, #0
 BEQ zero0 
 MOV r10, r4  
 ADD r8, r1  
 EOL_CHECK
 
 NOP
 NOP
 
 LEXT r6
 
 
 
 CMP r6, r7
 BNE zero0
 NOP
 NOP
one MOV r11, r1  
 ADD r8, r1  
 EOL_CHECK
 
 
 LEXT r6
 
 
 
 CMP r6, r7
 BEQ one
 ADD r8, r11  
 EOL_CHECK
 
 NOP
 NOP
 NOP
 
 LEXT r6
 
 
 
 CMP r6, r7
 BEQ one 
 
 QVAL
 
 
 
 
 MOVS r6, #0
 MOV r8, r6  
 ADDS r4, #1  
 NOP
 B zero1
 
eol 
 
 MOVS r6, #0
 CMP r8, r6
 BEQ eol0
 QVAL 

 
eol0 MOVS r5, #0x1
 LSLS r5, #11
dest20A LDR r6, [r0]  
 TST r6, r5  
 BNE dest20A  

 
 
 
 
 
 
 
 MOV r0, r12  
 LDR r1, [sp]  
 SUBS r0, r1  

 LDR r2, [sp, #0x28]  
 LDR r3, [sp, #0x2c]  
 LSLS r3, #2  
 LDR r4, [sp, #0x30]  
 LSLS r4, #2  

 MOVS r5, #0

lcpy CMP r0, r5  
 BEQ ecpy  

 LDR r6, [r1, r5]  
 STR r6, [r2, r3]  

 ADDS r3, #4  
 ADDS r5, #4  

 CMP r4, r3  
 BEQ wrap  
 B lcpy  

wrap MOVS r3, #0  
 B lcpy

ecpy LSRS r0, #2  
 POP {r1-r7, pc}
	ENDP

;*** End   embedded assembler ***
