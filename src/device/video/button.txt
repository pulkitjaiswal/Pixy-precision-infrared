; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\button.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\button.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\button.crf button.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z16interpolateBayerjjjPhRjS0_S0_ PROC ; interpolateBayer(unsigned, unsigned, unsigned, unsigned char*, unsigned&, unsigned&, unsigned&)
;;;26     
;;;27     void interpolateBayer(uint32_t width, uint32_t x, uint32_t y, uint8_t *pixel, uint32_t &r, uint32_t &g, uint32_t &b)
000000  b5f0              PUSH     {r4-r7,lr}
;;;28     {
000002  ac05              ADD      r4,sp,#0x14
000004  cc70              LDM      r4,{r4-r6}
;;;29         if (y&1)
000006  f0020701          AND      r7,r2,#1
00000a  b1af              CBZ      r7,|L1.56|
;;;30         {
;;;31             if (x&1)
00000c  f0010701          AND      r7,r1,#1
000010  b14f              CBZ      r7,|L1.38|
;;;32             {
;;;33                 r = *pixel;
000012  781f              LDRB     r7,[r3,#0]
000014  6027              STR      r7,[r4,#0]
;;;34                 g = *(pixel-1);
000016  f8137c01          LDRB     r7,[r3,#-1]
00001a  602f              STR      r7,[r5,#0]
;;;35                 b = *(pixel-width-1);
00001c  1a1f              SUBS     r7,r3,r0
00001e  f8177c01          LDRB     r7,[r7,#-1]
000022  6037              STR      r7,[r6,#0]
000024  e01d              B        |L1.98|
                  |L1.38|
;;;36             }
;;;37             else
;;;38             {
;;;39                 r = *(pixel-1);
000026  f8137c01          LDRB     r7,[r3,#-1]
00002a  6027              STR      r7,[r4,#0]
;;;40                 g = *pixel;
00002c  781f              LDRB     r7,[r3,#0]
00002e  602f              STR      r7,[r5,#0]
;;;41                 b = *(pixel-width);
000030  1a1f              SUBS     r7,r3,r0
000032  783f              LDRB     r7,[r7,#0]
000034  6037              STR      r7,[r6,#0]
000036  e014              B        |L1.98|
                  |L1.56|
;;;42             }
;;;43         }
;;;44         else
;;;45         {
;;;46             if (x&1)
000038  f0010701          AND      r7,r1,#1
00003c  b147              CBZ      r7,|L1.80|
;;;47             {
;;;48                 r = *(pixel-width);
00003e  1a1f              SUBS     r7,r3,r0
000040  783f              LDRB     r7,[r7,#0]
000042  6027              STR      r7,[r4,#0]
;;;49                 g = *pixel;
000044  781f              LDRB     r7,[r3,#0]
000046  602f              STR      r7,[r5,#0]
;;;50                 b = *(pixel-1);
000048  f8137c01          LDRB     r7,[r3,#-1]
00004c  6037              STR      r7,[r6,#0]
00004e  e008              B        |L1.98|
                  |L1.80|
;;;51             }
;;;52             else
;;;53             {
;;;54                 r = *(pixel-width-1);
000050  1a1f              SUBS     r7,r3,r0
000052  f8177c01          LDRB     r7,[r7,#-1]
000056  6027              STR      r7,[r4,#0]
;;;55                 g = *(pixel-1);
000058  f8137c01          LDRB     r7,[r3,#-1]
00005c  602f              STR      r7,[r5,#0]
;;;56                 b = *pixel;
00005e  781f              LDRB     r7,[r3,#0]
000060  6037              STR      r7,[r6,#0]
                  |L1.98|
;;;57             }
;;;58         }
;;;59     }
000062  bdf0              POP      {r4-r7,pc}
;;;60     
                          ENDP

                  _Z8getColorPhS_S_ PROC ; getColor(unsigned char*, unsigned char*, unsigned char*)
;;;61     void getColor(uint8_t *r, uint8_t *g, uint8_t *b)
000064  e92d4ff0          PUSH     {r4-r11,lr}
;;;62     {
000068  b088              SUB      sp,sp,#0x20
00006a  4607              MOV      r7,r0
00006c  4688              MOV      r8,r1
00006e  4691              MOV      r9,r2
;;;63     	uint32_t x, y, R, G, B, rsum, gsum, bsum, count;
;;;64     	uint8_t *frame = g_rawFrame.m_pixels;  // use the correct pointer
000070  48fe              LDR      r0,|L1.1132|
000072  6800              LDR      r0,[r0,#0]  ; g_rawFrame
000074  9003              STR      r0,[sp,#0xc]
;;;65     
;;;66     	for (rsum=0, gsum=0, bsum=0, count=0, y=(CAM_RES2_HEIGHT-BT_CENTER_SIZE)/2; y<(CAM_RES2_HEIGHT+BT_CENTER_SIZE)/2; y++)
000076  f04f0a00          MOV      r10,#0
00007a  46d3              MOV      r11,r10
00007c  2000              MOVS     r0,#0
00007e  9004              STR      r0,[sp,#0x10]
000080  2600              MOVS     r6,#0
000082  2561              MOVS     r5,#0x61
000084  e020              B        |L1.200|
                  |L1.134|
;;;67     	{
;;;68     		for (x=(CAM_RES2_WIDTH-BT_CENTER_SIZE)/2; x<(CAM_RES2_WIDTH+BT_CENTER_SIZE)/2; x++, count++)
000086  249d              MOVS     r4,#0x9d
000088  e01b              B        |L1.194|
                  |L1.138|
;;;69     		{
;;;70     			interpolateBayer(CAM_RES2_WIDTH, x, y, frame+CAM_RES2_WIDTH*y+x, R, G, B);
00008a  a805              ADD      r0,sp,#0x14
00008c  a906              ADD      r1,sp,#0x18
00008e  aa07              ADD      r2,sp,#0x1c
000090  e9cd2100          STRD     r2,r1,[sp,#0]
000094  9002              STR      r0,[sp,#8]
000096  f44f71a0          MOV      r1,#0x140
00009a  9803              LDR      r0,[sp,#0xc]
00009c  fb010005          MLA      r0,r1,r5,r0
0000a0  1903              ADDS     r3,r0,r4
0000a2  462a              MOV      r2,r5
0000a4  4621              MOV      r1,r4
0000a6  f44f70a0          MOV      r0,#0x140
0000aa  f7fffffe          BL       _Z16interpolateBayerjjjPhRjS0_S0_ ; interpolateBayer(unsigned, unsigned, unsigned, unsigned char*, unsigned&, unsigned&, unsigned&)
;;;71     		 	rsum += R;
0000ae  9807              LDR      r0,[sp,#0x1c]
0000b0  4482              ADD      r10,r10,r0
;;;72     			gsum += G;
0000b2  9806              LDR      r0,[sp,#0x18]
0000b4  4483              ADD      r11,r11,r0
;;;73     			bsum += B;
0000b6  e9dd0104          LDRD     r0,r1,[sp,#0x10]
0000ba  4408              ADD      r0,r0,r1
0000bc  9004              STR      r0,[sp,#0x10]
0000be  1c64              ADDS     r4,r4,#1              ;68
0000c0  1c76              ADDS     r6,r6,#1              ;68
                  |L1.194|
0000c2  2ca3              CMP      r4,#0xa3              ;68
0000c4  d3e1              BCC      |L1.138|
0000c6  1c6d              ADDS     r5,r5,#1              ;66
                  |L1.200|
0000c8  2d67              CMP      r5,#0x67              ;66
0000ca  d3dc              BCC      |L1.134|
;;;74     		}
;;;75     	}
;;;76     	*r = rsum/count;
0000cc  fbbaf0f6          UDIV     r0,r10,r6
0000d0  7038              STRB     r0,[r7,#0]
;;;77     	*g = gsum/count;										 
0000d2  fbbbf0f6          UDIV     r0,r11,r6
0000d6  f8880000          STRB     r0,[r8,#0]
;;;78     	*b = bsum/count;	 	
0000da  9804              LDR      r0,[sp,#0x10]
0000dc  fbb0f0f6          UDIV     r0,r0,r6
0000e0  f8890000          STRB     r0,[r9,#0]
;;;79     }
0000e4  b008              ADD      sp,sp,#0x20
0000e6  e8bd8ff0          POP      {r4-r11,pc}
;;;80     
                          ENDP

                  _Z8saturatePhS_S_ PROC ; saturate(unsigned char*, unsigned char*, unsigned char*)
;;;81     
;;;82     void saturate(uint8_t *r, uint8_t *g, uint8_t *b)
0000ea  e92d4ff0          PUSH     {r4-r11,lr}
;;;83     {
0000ee  b087              SUB      sp,sp,#0x1c
0000f0  4604              MOV      r4,r0
0000f2  460d              MOV      r5,r1
0000f4  4616              MOV      r6,r2
;;;84     	uint8_t max, min, bias;
;;;85     	float m, fr, fg, fb;
;;;86     
;;;87        	// find min
;;;88     	if (*r<*b)
0000f6  7820              LDRB     r0,[r4,#0]
0000f8  7831              LDRB     r1,[r6,#0]
0000fa  4288              CMP      r0,r1
0000fc  da02              BGE      |L1.260|
;;;89     		min = *r;
0000fe  f8948000          LDRB     r8,[r4,#0]
000102  e001              B        |L1.264|
                  |L1.260|
;;;90     	else
;;;91     		min = *b;
000104  f8968000          LDRB     r8,[r6,#0]
                  |L1.264|
;;;92     	if (*g<min)
000108  7828              LDRB     r0,[r5,#0]
00010a  4540              CMP      r0,r8
00010c  da01              BGE      |L1.274|
;;;93     		min = *g;
00010e  f8958000          LDRB     r8,[r5,#0]
                  |L1.274|
;;;94     
;;;95     	// find reasonable bias to subtract out
;;;96     	bias = min*3/4;
000112  eb080048          ADD      r0,r8,r8,LSL #1
000116  17c1              ASRS     r1,r0,#31
000118  eb007191          ADD      r1,r0,r1,LSR #30
00011c  f3c10987          UBFX     r9,r1,#2,#8
;;;97     	*r -= bias;
000120  7820              LDRB     r0,[r4,#0]
000122  eba00009          SUB      r0,r0,r9
000126  7020              STRB     r0,[r4,#0]
;;;98     	*g -= bias;
000128  7828              LDRB     r0,[r5,#0]
00012a  eba00009          SUB      r0,r0,r9
00012e  7028              STRB     r0,[r5,#0]
;;;99     	*b -= bias;
000130  7830              LDRB     r0,[r6,#0]
000132  eba00009          SUB      r0,r0,r9
000136  7030              STRB     r0,[r6,#0]
;;;100    
;;;101    	// find max
;;;102    	if (*r>*b)
000138  7820              LDRB     r0,[r4,#0]
00013a  7831              LDRB     r1,[r6,#0]
00013c  4288              CMP      r0,r1
00013e  dd01              BLE      |L1.324|
;;;103    		max = *r;
000140  7827              LDRB     r7,[r4,#0]
000142  e000              B        |L1.326|
                  |L1.324|
;;;104    	else
;;;105    		max = *b;
000144  7837              LDRB     r7,[r6,#0]
                  |L1.326|
;;;106    	if (*g>max)
000146  7828              LDRB     r0,[r5,#0]
000148  42b8              CMP      r0,r7
00014a  dd00              BLE      |L1.334|
;;;107    		max = *g;
00014c  782f              LDRB     r7,[r5,#0]
                  |L1.334|
;;;108    
;;;109    	// saturate
;;;110    	m = 255.0/max;
00014e  4638              MOV      r0,r7
000150  f7fffffe          BL       __aeabi_ui2d
000154  4602              MOV      r2,r0
000156  460b              MOV      r3,r1
000158  e9cd0100          STRD     r0,r1,[sp,#0]
00015c  2000              MOVS     r0,#0
00015e  49c4              LDR      r1,|L1.1136|
000160  f7fffffe          BL       __aeabi_ddiv
000164  e9cd0102          STRD     r0,r1,[sp,#8]
000168  f7fffffe          BL       __aeabi_d2f
00016c  4682              MOV      r10,r0
;;;111    	fr = m**r;
00016e  7820              LDRB     r0,[r4,#0]
000170  f7fffffe          BL       __aeabi_ui2f
000174  4651              MOV      r1,r10
000176  9003              STR      r0,[sp,#0xc]
000178  f7fffffe          BL       __aeabi_fmul
00017c  4683              MOV      r11,r0
;;;112    	fg = m**g;
00017e  7828              LDRB     r0,[r5,#0]
000180  f7fffffe          BL       __aeabi_ui2f
000184  4651              MOV      r1,r10
000186  9003              STR      r0,[sp,#0xc]
000188  f7fffffe          BL       __aeabi_fmul
00018c  9005              STR      r0,[sp,#0x14]
;;;113    	fb = m**b;
00018e  7830              LDRB     r0,[r6,#0]
000190  f7fffffe          BL       __aeabi_ui2f
000194  4651              MOV      r1,r10
000196  9003              STR      r0,[sp,#0xc]
000198  f7fffffe          BL       __aeabi_fmul
00019c  9004              STR      r0,[sp,#0x10]
;;;114    
;;;115    	*r = (uint8_t)fr;
00019e  4658              MOV      r0,r11
0001a0  f7fffffe          BL       __aeabi_f2uiz
0001a4  7020              STRB     r0,[r4,#0]
;;;116    	*g = (uint8_t)fg;				  
0001a6  9805              LDR      r0,[sp,#0x14]
0001a8  f7fffffe          BL       __aeabi_f2uiz
0001ac  7028              STRB     r0,[r5,#0]
;;;117    	*b = (uint8_t)fb;
0001ae  9804              LDR      r0,[sp,#0x10]
0001b0  f7fffffe          BL       __aeabi_f2uiz
0001b4  7030              STRB     r0,[r6,#0]
;;;118    }
0001b6  b007              ADD      sp,sp,#0x1c
0001b8  e8bd8ff0          POP      {r4-r11,pc}
;;;119    	
                          ENDP

                  _ZN13ButtonMachine5resetEv PROC ; ButtonMachine::reset()
;;;350    
;;;351    void ButtonMachine::reset()
0001bc  b538              PUSH     {r3-r5,lr}
;;;352    {
0001be  4604              MOV      r4,r0
;;;353    	m_ledPipe = false;
0001c0  2000              MOVS     r0,#0
0001c2  7220              STRB     r0,[r4,#8]
;;;354    	led_set(0);
0001c4  9000              STR      r0,[sp,#0]
0001c6  4668              MOV      r0,sp
0001c8  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;355    	m_goto = 0;
0001cc  2000              MOVS     r0,#0
0001ce  7020              STRB     r0,[r4,#0]
;;;356    }
0001d0  bd38              POP      {r3-r5,pc}
;;;357    
                          ENDP

                  _ZN13ButtonMachineC2Ev                  ; Alternate entry point ; ButtonMachine::ButtonMachine__sub_object()
                  _ZN13ButtonMachineC1Ev PROC ; ButtonMachine::ButtonMachine()
;;;120    
;;;121    ButtonMachine::ButtonMachine()
;;;122    {
;;;123    	reset();
;;;124    }
;;;125    
0001d2  b510              PUSH     {r4,lr}
0001d4  4604              MOV      r4,r0
0001d6  4620              MOV      r0,r4
0001d8  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0001dc  4620              MOV      r0,r4
0001de  bd10              POP      {r4,pc}
                          ENDP

                  _ZN13ButtonMachineD2Ev                  ; Alternate entry point ; ButtonMachine::~ButtonMachine__sub_object()
                  _ZN13ButtonMachineD1Ev PROC ; ButtonMachine::~ButtonMachine()
;;;126    ButtonMachine::~ButtonMachine()
;;;127    {
;;;128    }
;;;129    
0001e0  4770              BX       lr
                          ENDP

                  _ZN13ButtonMachine4waitEj PROC ; ButtonMachine::wait(unsigned)
;;;340    
;;;341    void ButtonMachine::wait(uint32_t us)
0001e2  b538              PUSH     {r3-r5,lr}
;;;342    {
0001e4  4605              MOV      r5,r0
0001e6  460c              MOV      r4,r1
;;;343    	uint32_t timer;
;;;344    
;;;345    	setTimer(&timer);
0001e8  4668              MOV      r0,sp
0001ea  f7fffffe          BL       setTimer
;;;346    
;;;347    	while(getTimer(timer)<us);
0001ee  bf00              NOP      
                  |L1.496|
0001f0  9800              LDR      r0,[sp,#0]
0001f2  f7fffffe          BL       getTimer
0001f6  42a0              CMP      r0,r4
0001f8  d3fa              BCC      |L1.496|
;;;348    		periodic();
0001fa  f7fffffe          BL       _Z8periodicv ; periodic()
;;;349    }
0001fe  bd38              POP      {r3-r5,pc}
;;;350    
                          ENDP

                  _ZN13ButtonMachine8flashLEDEh PROC ; ButtonMachine::flashLED(unsigned char)
;;;357    
;;;358    void ButtonMachine::flashLED(uint8_t flashes)
000200  b5f8              PUSH     {r3-r7,lr}
;;;359    {
000202  4604              MOV      r4,r0
000204  460d              MOV      r5,r1
;;;360    	 int i;
;;;361    
;;;362    	 for (i=0; i<flashes; i++)
000206  2600              MOVS     r6,#0
000208  e015              B        |L1.566|
                  |L1.522|
;;;363    	 {
;;;364    		led_set(0);
00020a  2000              MOVS     r0,#0
00020c  9000              STR      r0,[sp,#0]
00020e  4668              MOV      r0,sp
000210  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;365    		wait(BT_FLASH_TIMEOUT); // flash for just a little bit
000214  f64e2160          MOV      r1,#0xea60
000218  4620              MOV      r0,r4
00021a  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
;;;366    		led_set(g_colors[m_index]);
00021e  7861              LDRB     r1,[r4,#1]
000220  4a94              LDR      r2,|L1.1140|
000222  eb020081          ADD      r0,r2,r1,LSL #2
000226  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;367    		wait(BT_FLASH_TIMEOUT); // flash for just a little bit
00022a  f64e2160          MOV      r1,#0xea60
00022e  4620              MOV      r0,r4
000230  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
000234  1c76              ADDS     r6,r6,#1              ;362
                  |L1.566|
000236  42ae              CMP      r6,r5                 ;362
000238  dbe7              BLT      |L1.522|
;;;368    	 }
;;;369    	 	
;;;370    }
00023a  bdf8              POP      {r3-r7,pc}
;;;371    
                          ENDP

                  _ZN13ButtonMachine12setSignatureEv PROC ; ButtonMachine::setSignature()
;;;141    
;;;142    void ButtonMachine::setSignature()
00023c  b5f0              PUSH     {r4-r7,lr}
;;;143    {
00023e  b087              SUB      sp,sp,#0x1c
000240  4605              MOV      r5,r0
;;;144    	uint32_t current, saveCurrent; 
;;;145    	int goodness;
;;;146    
;;;147    	// grow region, create model, save
;;;148    	goodness = cc_setSigPoint(0, m_index, CAM_RES2_WIDTH/2, CAM_RES2_HEIGHT/2, g_chirpUsb);
000242  2000              MOVS     r0,#0
000244  9006              STR      r0,[sp,#0x18]
000246  20a0              MOVS     r0,#0xa0
000248  9005              STR      r0,[sp,#0x14]
00024a  2064              MOVS     r0,#0x64
00024c  9004              STR      r0,[sp,#0x10]
00024e  488a              LDR      r0,|L1.1144|
000250  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000252  9000              STR      r0,[sp,#0]
000254  ab04              ADD      r3,sp,#0x10
000256  aa05              ADD      r2,sp,#0x14
000258  1c69              ADDS     r1,r5,#1
00025a  a806              ADD      r0,sp,#0x18
00025c  f7fffffe          BL       _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
000260  4604              MOV      r4,r0
;;;149    	if (goodness>0)
000262  2c00              CMP      r4,#0
000264  dd1b              BLE      |L1.670|
;;;150    	{
;;;151    		cprintf("goodness=%d\n", goodness);
000266  4621              MOV      r1,r4
000268  a084              ADR      r0,|L1.1148|
00026a  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;152    		saveCurrent = led_getMaxCurrent(); // save off value
00026e  f7fffffe          BL       _Z17led_getMaxCurrentv ; led_getMaxCurrent()
000272  9002              STR      r0,[sp,#8]
;;;153    		current = (float)LED_MAX_CURRENT/100.0f*goodness;
000274  4620              MOV      r0,r4
000276  f7fffffe          BL       __aeabi_i2f
00027a  4607              MOV      r7,r0
00027c  4983              LDR      r1,|L1.1164|
00027e  f7fffffe          BL       __aeabi_fmul
000282  4606              MOV      r6,r0
000284  f7fffffe          BL       __aeabi_f2uiz
000288  9003              STR      r0,[sp,#0xc]
;;;154    		led_setMaxCurrent(current);
00028a  a803              ADD      r0,sp,#0xc
00028c  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;155    		flashLED(4); 
000290  2104              MOVS     r1,#4
000292  4628              MOV      r0,r5
000294  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
;;;156    		led_setMaxCurrent(saveCurrent);
000298  a802              ADD      r0,sp,#8
00029a  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
                  |L1.670|
;;;157    	}
;;;158    }
00029e  b007              ADD      sp,sp,#0x1c
0002a0  bdf0              POP      {r4-r7,pc}
;;;159    
                          ENDP

                  _ZN13ButtonMachine6setLEDEv PROC ; ButtonMachine::setLED()
;;;372    
;;;373    void ButtonMachine::setLED()
0002a2  b538              PUSH     {r3-r5,lr}
;;;374    {
0002a4  4604              MOV      r4,r0
;;;375    	if (m_index>7)
0002a6  7860              LDRB     r0,[r4,#1]
0002a8  2807              CMP      r0,#7
0002aa  dd00              BLE      |L1.686|
                  |L1.684|
;;;376    		return;
;;;377    
;;;378    	led_set(0);
;;;379    	wait(BT_FLASH_TIMEOUT); // flash for just a little bit
;;;380    	led_set(g_colors[m_index]);
;;;381    }
0002ac  bd38              POP      {r3-r5,pc}
                  |L1.686|
0002ae  2000              MOVS     r0,#0                 ;378
0002b0  9000              STR      r0,[sp,#0]            ;378
0002b2  4668              MOV      r0,sp                 ;378
0002b4  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
0002b8  f64e2160          MOV      r1,#0xea60            ;379
0002bc  4620              MOV      r0,r4                 ;379
0002be  f7fffffe          BL       _ZN13ButtonMachine4waitEj ; ButtonMachine::wait(unsigned)
0002c2  7861              LDRB     r1,[r4,#1]            ;380
0002c4  4a6b              LDR      r2,|L1.1140|
0002c6  eb020081          ADD      r0,r2,r1,LSL #2       ;380
0002ca  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
0002ce  bf00              NOP      
0002d0  e7ec              B        |L1.684|
;;;382    
                          ENDP

                  _ZN13ButtonMachine7ledPipeEv PROC ; ButtonMachine::ledPipe()
;;;129    
;;;130    void ButtonMachine::ledPipe()
0002d2  b570              PUSH     {r4-r6,lr}
;;;131    {
0002d4  b086              SUB      sp,sp,#0x18
0002d6  4604              MOV      r4,r0
;;;132    	uint8_t r, g, b;
;;;133    
;;;134    	BlobA blob(m_index, (CAM_RES2_WIDTH-BT_CENTER_SIZE)/2, (CAM_RES2_WIDTH+BT_CENTER_SIZE)/2, (CAM_RES2_HEIGHT-BT_CENTER_SIZE)/2, (CAM_RES2_HEIGHT+BT_CENTER_SIZE)/2);
0002d8  4668              MOV      r0,sp
0002da  7861              LDRB     r1,[r4,#1]
0002dc  229d              MOVS     r2,#0x9d
0002de  25a3              MOVS     r5,#0xa3
0002e0  2361              MOVS     r3,#0x61
0002e2  2667              MOVS     r6,#0x67
0002e4  8001              STRH     r1,[r0,#0]
0002e6  8042              STRH     r2,[r0,#2]
0002e8  8085              STRH     r5,[r0,#4]
0002ea  80c3              STRH     r3,[r0,#6]
0002ec  8106              STRH     r6,[r0,#8]
0002ee  bf00              NOP      
;;;135    	cc_sendBlobs(g_chirpUsb, &blob, 1);
0002f0  2301              MOVS     r3,#1
0002f2  461a              MOV      r2,r3
0002f4  4669              MOV      r1,sp
0002f6  4860              LDR      r0,|L1.1144|
0002f8  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0002fa  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpPK5BlobAjh ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)
;;;136    
;;;137    	getColor(&r, &g, &b);
0002fe  aa03              ADD      r2,sp,#0xc
000300  a904              ADD      r1,sp,#0x10
000302  a805              ADD      r0,sp,#0x14
000304  f7fffffe          BL       _Z8getColorPhS_S_ ; getColor(unsigned char*, unsigned char*, unsigned char*)
;;;138    	saturate(&r, &g, &b);
000308  aa03              ADD      r2,sp,#0xc
00030a  a904              ADD      r1,sp,#0x10
00030c  a805              ADD      r0,sp,#0x14
00030e  f7fffffe          BL       _Z8saturatePhS_S_ ; saturate(unsigned char*, unsigned char*, unsigned char*)
;;;139    	led_setRGB(r, g, b);	 	
000312  aa03              ADD      r2,sp,#0xc
000314  a904              ADD      r1,sp,#0x10
000316  a805              ADD      r0,sp,#0x14
000318  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;140    }
00031c  b006              ADD      sp,sp,#0x18
00031e  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP

                  _ZN13ButtonMachine15handleSignatureEv PROC ; ButtonMachine::handleSignature()
;;;161    
;;;162    bool ButtonMachine::handleSignature()
000320  b530              PUSH     {r4,r5,lr}
;;;163    {
000322  b089              SUB      sp,sp,#0x24
000324  4604              MOV      r4,r0
;;;164    	uint32_t bt;
;;;165    
;;;166    	bt = button();
000326  f7fffffe          BL       button
00032a  4605              MOV      r5,r0
;;;167    
;;;168       	if (m_ledPipe) // if ledpipe, grab frame, but don't flush 
00032c  7a20              LDRB     r0,[r4,#8]
00032e  b1d0              CBZ      r0,|L1.870|
;;;169    	{
;;;170    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb, 0);
000330  2021              MOVS     r0,#0x21
000332  9008              STR      r0,[sp,#0x20]
000334  2000              MOVS     r0,#0
000336  9007              STR      r0,[sp,#0x1c]
000338  9006              STR      r0,[sp,#0x18]
00033a  f44f70a0          MOV      r0,#0x140
00033e  9005              STR      r0,[sp,#0x14]
000340  20c8              MOVS     r0,#0xc8
000342  9004              STR      r0,[sp,#0x10]
000344  2000              MOVS     r0,#0
000346  494c              LDR      r1,|L1.1144|
000348  6809              LDR      r1,[r1,#0]  ; g_chirpUsb
00034a  aa04              ADD      r2,sp,#0x10
00034c  e9cd2100          STRD     r2,r1,[sp,#0]
000350  9002              STR      r0,[sp,#8]
000352  ab05              ADD      r3,sp,#0x14
000354  aa06              ADD      r2,sp,#0x18
000356  a907              ADD      r1,sp,#0x1c
000358  a808              ADD      r0,sp,#0x20
00035a  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;171    		ledPipe();
00035e  4620              MOV      r0,r4
000360  f7fffffe          BL       _ZN13ButtonMachine7ledPipeEv ; ButtonMachine::ledPipe()
;;;172    	}
000364  e019              B        |L1.922|
                  |L1.870|
;;;173    	else if (m_goto!=0) // else grab frame and flush
000366  7820              LDRB     r0,[r4,#0]
000368  b1b8              CBZ      r0,|L1.922|
;;;174    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
00036a  2021              MOVS     r0,#0x21
00036c  9008              STR      r0,[sp,#0x20]
00036e  2000              MOVS     r0,#0
000370  9007              STR      r0,[sp,#0x1c]
000372  9006              STR      r0,[sp,#0x18]
000374  f44f70a0          MOV      r0,#0x140
000378  9005              STR      r0,[sp,#0x14]
00037a  20c8              MOVS     r0,#0xc8
00037c  9004              STR      r0,[sp,#0x10]
00037e  2001              MOVS     r0,#1
000380  493d              LDR      r1,|L1.1144|
000382  6809              LDR      r1,[r1,#0]  ; g_chirpUsb
000384  aa04              ADD      r2,sp,#0x10
000386  e9cd2100          STRD     r2,r1,[sp,#0]
00038a  9002              STR      r0,[sp,#8]
00038c  ab05              ADD      r3,sp,#0x14
00038e  aa06              ADD      r2,sp,#0x18
000390  a907              ADD      r1,sp,#0x1c
000392  a808              ADD      r0,sp,#0x20
000394  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirph ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char)
;;;175    
;;;176    	switch(m_goto)
000398  bf00              NOP      
                  |L1.922|
00039a  7820              LDRB     r0,[r4,#0]
00039c  2806              CMP      r0,#6
00039e  d264              BCS      |L1.1130|
0003a0  e8dff000          TBB      [pc,r0]
0003a4  0310397c          DCB      0x03,0x10,0x39,0x7c
0003a8  8db5              DCB      0x8d,0xb5
;;;177    	{
;;;178    	case 0:  // wait for button press
;;;179    		if (bt)
0003aa  b155              CBZ      r5,|L1.962|
;;;180    		{
;;;181    			setTimer(&m_timer);
0003ac  1d20              ADDS     r0,r4,#4
0003ae  f7fffffe          BL       setTimer
;;;182    			m_goto = 1;
0003b2  2001              MOVS     r0,#1
0003b4  7020              STRB     r0,[r4,#0]
;;;183    			led_set(0);
0003b6  2000              MOVS     r0,#0
0003b8  9008              STR      r0,[sp,#0x20]
0003ba  a808              ADD      r0,sp,#0x20
0003bc  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;184    		}
0003c0  bf00              NOP      
                  |L1.962|
;;;185    		break;
0003c2  e0ad              B        |L1.1312|
;;;186    
;;;187    	case 1: // wait for button timeout
;;;188    		if (!bt)
0003c4  b985              CBNZ     r5,|L1.1000|
;;;189    		{
;;;190    			m_goto = 0;
0003c6  2000              MOVS     r0,#0
0003c8  7020              STRB     r0,[r4,#0]
;;;191    			/// TMS ///
;;;192    			cam_setECV(ecv_index);
0003ca  4831              LDR      r0,|L1.1168|
0003cc  f7fffffe          BL       _Z10cam_setECVRKj ; cam_setECV(const unsigned&)
;;;193    			ecv_index++;
0003d0  482f              LDR      r0,|L1.1168|
0003d2  6800              LDR      r0,[r0,#0]  ; ecv_index
0003d4  1c40              ADDS     r0,r0,#1
0003d6  492e              LDR      r1,|L1.1168|
0003d8  6008              STR      r0,[r1,#0]  ; ecv_index
;;;194    			if (ecv_index>20)
0003da  4608              MOV      r0,r1
0003dc  6800              LDR      r0,[r0,#0]  ; ecv_index
0003de  2814              CMP      r0,#0x14
0003e0  d918              BLS      |L1.1044|
;;;195    				ecv_index = 1;
0003e2  2001              MOVS     r0,#1
0003e4  6008              STR      r0,[r1,#0]  ; ecv_index
0003e6  e015              B        |L1.1044|
                  |L1.1000|
;;;196    			/// TMS ///
;;;197    		}
;;;198    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
0003e8  6860              LDR      r0,[r4,#4]
0003ea  f7fffffe          BL       getTimer
0003ee  4929              LDR      r1,|L1.1172|
0003f0  4288              CMP      r0,r1
0003f2  d90f              BLS      |L1.1044|
;;;199    		{
;;;200    			if (cam_getAWB())
0003f4  f7fffffe          BL       _Z10cam_getAWBv ; cam_getAWB()
0003f8  b110              CBZ      r0,|L1.1024|
;;;201    				m_index = 1;
0003fa  2001              MOVS     r0,#1
0003fc  7060              STRB     r0,[r4,#1]
0003fe  e001              B        |L1.1028|
                  |L1.1024|
;;;202    			else
;;;203    				m_index = 0;
000400  2000              MOVS     r0,#0
000402  7060              STRB     r0,[r4,#1]
                  |L1.1028|
;;;204    			setTimer(&m_timer);
000404  1d20              ADDS     r0,r4,#4
000406  f7fffffe          BL       setTimer
;;;205    			setLED();
00040a  4620              MOV      r0,r4
00040c  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
;;;206    			m_goto = 2;
000410  2002              MOVS     r0,#2
000412  7020              STRB     r0,[r4,#0]
                  |L1.1044|
;;;207    		}
;;;208    		break;
000414  e084              B        |L1.1312|
;;;209    
;;;210    	case 2: // wait and increment index 
;;;211    		if (!bt)
000416  b99d              CBNZ     r5,|L1.1088|
;;;212    		{
;;;213    			flashLED(3);
000418  2103              MOVS     r1,#3
00041a  4620              MOV      r0,r4
00041c  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
;;;214    			setTimer(&m_timer);
000420  1d20              ADDS     r0,r4,#4
000422  f7fffffe          BL       setTimer
;;;215    			if (m_index==0)
000426  7860              LDRB     r0,[r4,#1]
000428  b928              CBNZ     r0,|L1.1078|
;;;216    				cam_setAWB(1);
00042a  2001              MOVS     r0,#1
00042c  9008              STR      r0,[sp,#0x20]
00042e  a808              ADD      r0,sp,#0x20
000430  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;217    			else
000434  e001              B        |L1.1082|
                  |L1.1078|
;;;218    				m_ledPipe = true;
000436  2001              MOVS     r0,#1
000438  7220              STRB     r0,[r4,#8]
                  |L1.1082|
;;;219    			m_goto = 3;
00043a  2003              MOVS     r0,#3
00043c  7020              STRB     r0,[r4,#0]
00043e  e013              B        |L1.1128|
                  |L1.1088|
;;;220    		}
;;;221    		else if (getTimer(m_timer)>BT_INDEX_CYCLE_TIMEOUT)
000440  6860              LDR      r0,[r4,#4]
000442  f7fffffe          BL       getTimer
000446  4914              LDR      r1,|L1.1176|
000448  4288              CMP      r0,r1
00044a  d90d              BLS      |L1.1128|
;;;222    		{
;;;223    			setTimer(&m_timer);
00044c  1d20              ADDS     r0,r4,#4
00044e  f7fffffe          BL       setTimer
;;;224    			m_index++;
000452  7860              LDRB     r0,[r4,#1]
000454  1c40              ADDS     r0,r0,#1
000456  7060              STRB     r0,[r4,#1]
;;;225    			if (m_index==NUM_MODELS+1)
000458  7860              LDRB     r0,[r4,#1]
00045a  2808              CMP      r0,#8
00045c  d101              BNE      |L1.1122|
;;;226    				m_index = 0;
00045e  2000              MOVS     r0,#0
000460  7060              STRB     r0,[r4,#1]
                  |L1.1122|
;;;227    
;;;228    			setLED();
000462  4620              MOV      r0,r4
000464  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
                  |L1.1128|
;;;229    		}							   
;;;230    		break;
000468  e05a              B        |L1.1312|
                  |L1.1130|
00046a  e055              B        |L1.1304|
                  |L1.1132|
                          DCD      g_rawFrame
                  |L1.1136|
                          DCD      0x406fe000
                  |L1.1140|
                          DCD      g_colors
                  |L1.1144|
                          DCD      g_chirpUsb
                  |L1.1148|
00047c  676f6f64          DCB      "goodness=%d\n",0
000480  6e657373
000484  3d25640a
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
                          DCD      0x43480000
                  |L1.1168|
                          DCD      ecv_index
                  |L1.1172|
                          DCD      0x001312d0
                  |L1.1176|
                          DCD      0x000f4240
;;;231    
;;;232    	case 3: // wait for button down
;;;233    		if (bt)
00049c  b12d              CBZ      r5,|L1.1194|
;;;234    		{
;;;235    			setTimer(&m_timer);
00049e  1d20              ADDS     r0,r4,#4
0004a0  f7fffffe          BL       setTimer
;;;236    			m_goto = 4;
0004a4  2004              MOVS     r0,#4
0004a6  7020              STRB     r0,[r4,#0]
0004a8  e008              B        |L1.1212|
                  |L1.1194|
;;;237    		}
;;;238    		else if (getTimer(m_timer)>BT_LIGHTPIPE_TIMEOUT) // abort
0004aa  6860              LDR      r0,[r4,#4]
0004ac  f7fffffe          BL       getTimer
0004b0  4950              LDR      r1,|L1.1524|
0004b2  4288              CMP      r0,r1
0004b4  d902              BLS      |L1.1212|
;;;239    			reset();
0004b6  4620              MOV      r0,r4
0004b8  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
                  |L1.1212|
;;;240    		break;
0004bc  e030              B        |L1.1312|
;;;241    
;;;242    	case 4: // wait for button up
;;;243    		if (!bt)
0004be  b995              CBNZ     r5,|L1.1254|
;;;244    		{
;;;245    			if (m_index==0)
0004c0  7860              LDRB     r0,[r4,#1]
0004c2  b948              CBNZ     r0,|L1.1240|
;;;246    			{
;;;247    				cam_setAWB(0);
0004c4  2000              MOVS     r0,#0
0004c6  9008              STR      r0,[sp,#0x20]
0004c8  a808              ADD      r0,sp,#0x20
0004ca  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;248    				flashLED(4); 
0004ce  2104              MOVS     r1,#4
0004d0  4620              MOV      r0,r4
0004d2  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
;;;249    			}
0004d6  e002              B        |L1.1246|
                  |L1.1240|
;;;250    			else
;;;251    				setSignature();
0004d8  4620              MOV      r0,r4
0004da  f7fffffe          BL       _ZN13ButtonMachine12setSignatureEv ; ButtonMachine::setSignature()
                  |L1.1246|
;;;252    			reset(); // done	
0004de  4620              MOV      r0,r4
0004e0  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0004e4  e012              B        |L1.1292|
                  |L1.1254|
;;;253    		}
;;;254    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
0004e6  6860              LDR      r0,[r4,#4]
0004e8  f7fffffe          BL       getTimer
0004ec  4942              LDR      r1,|L1.1528|
0004ee  4288              CMP      r0,r1
0004f0  d90c              BLS      |L1.1292|
;;;255    		{
;;;256     			if (m_index==0)
0004f2  7860              LDRB     r0,[r4,#1]
0004f4  b928              CBNZ     r0,|L1.1282|
;;;257    				cam_setAWB(0);
0004f6  2000              MOVS     r0,#0
0004f8  9008              STR      r0,[sp,#0x20]
0004fa  a808              ADD      r0,sp,#0x20
0004fc  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
;;;258    
;;;259    			reset();
000500  bf00              NOP      
                  |L1.1282|
000502  4620              MOV      r0,r4
000504  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
;;;260    			m_goto = 5;
000508  2005              MOVS     r0,#5
00050a  7020              STRB     r0,[r4,#0]
                  |L1.1292|
;;;261    		}
;;;262    	 	break;
00050c  e008              B        |L1.1312|
;;;263    
;;;264    	case 5: // wait for button up only
;;;265    		if (!bt)
00050e  b915              CBNZ     r5,|L1.1302|
;;;266    			reset();
000510  4620              MOV      r0,r4
000512  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
                  |L1.1302|
;;;267    		break;
000516  e003              B        |L1.1312|
                  |L1.1304|
;;;268    
;;;269    	default:
;;;270    		reset();
000518  4620              MOV      r0,r4
00051a  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
00051e  bf00              NOP                            ;176
                  |L1.1312|
000520  bf00              NOP                            ;185
;;;271    	}	
;;;272    
;;;273    	return m_goto!=0;
000522  7820              LDRB     r0,[r4,#0]
000524  b110              CBZ      r0,|L1.1324|
000526  2001              MOVS     r0,#1
                  |L1.1320|
;;;274    }
000528  b009              ADD      sp,sp,#0x24
00052a  bd30              POP      {r4,r5,pc}
                  |L1.1324|
00052c  2000              MOVS     r0,#0                 ;273
00052e  e7fb              B        |L1.1320|
;;;275    
                          ENDP

                  _ZN13ButtonMachine13selectProgramEi PROC ; ButtonMachine::selectProgram(int)
;;;276    int ButtonMachine::selectProgram(int progs)
000530  e92d41f0          PUSH     {r4-r8,lr}
;;;277    {
000534  4604              MOV      r4,r0
000536  460d              MOV      r5,r1
;;;278    	int result;
;;;279    
;;;280    	uint32_t bt; 
;;;281    
;;;282    	if (progs<=1)
000538  2d01              CMP      r5,#1
00053a  dc02              BGT      |L1.1346|
;;;283    		return 0;
00053c  2000              MOVS     r0,#0
                  |L1.1342|
;;;284    
;;;285    	while(1)
;;;286    	{
;;;287    		bt = button();
;;;288    		periodic();
;;;289    
;;;290    		switch(m_goto)
;;;291    		{
;;;292    		case 0:  // wait for nothing
;;;293    			setTimer(&m_timer);
;;;294    			m_goto = 1;
;;;295    			setLED();
;;;296    			break;
;;;297    
;;;298    		case 1:	// wait for button down
;;;299    			if (bt)
;;;300    			{
;;;301    				setTimer(&m_timer);
;;;302    				m_index=1;
;;;303    				setLED();
;;;304    				m_goto = 2;
;;;305    			}
;;;306    			else if (getTimer(m_timer)>BT_PROG_TIMEOUT)
;;;307    			{
;;;308    				flashLED(4); 
;;;309    				reset();
;;;310    				return 0;
;;;311    			}
;;;312    			break;
;;;313    
;;;314    		case 2: // cycle through choices, wait for button up
;;;315    			if (!bt)
;;;316    			{
;;;317    				result = m_index; // save m_index
;;;318    				flashLED(4); 
;;;319    				reset(); // resets m_index
;;;320    				return result;
;;;321    			}
;;;322    			else if (getTimer(m_timer)>BT_INDEX_CYCLE_TIMEOUT)
;;;323    			{
;;;324    				setTimer(&m_timer);
;;;325    				m_index++;
;;;326    				if (m_index==progs+1)
;;;327    					m_index = 1;
;;;328    
;;;329    				setLED();
;;;330    			}							   
;;;331    			break;
;;;332    
;;;333    		default:
;;;334    			reset();
;;;335    		}
;;;336    	}
;;;337    }
00053e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1346|
000542  e056              B        |L1.1522|
                  |L1.1348|
000544  f7fffffe          BL       button
000548  4606              MOV      r6,r0                 ;287
00054a  f7fffffe          BL       _Z8periodicv ; periodic()
00054e  7820              LDRB     r0,[r4,#0]            ;290
000550  b120              CBZ      r0,|L1.1372|
000552  2801              CMP      r0,#1                 ;290
000554  d00b              BEQ      |L1.1390|
000556  2802              CMP      r0,#2                 ;290
000558  d146              BNE      |L1.1512|
00055a  e024              B        |L1.1446|
                  |L1.1372|
00055c  1d20              ADDS     r0,r4,#4              ;293
00055e  f7fffffe          BL       setTimer
000562  2001              MOVS     r0,#1                 ;294
000564  7020              STRB     r0,[r4,#0]            ;294
000566  4620              MOV      r0,r4                 ;295
000568  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
00056c  e040              B        |L1.1520|
                  |L1.1390|
00056e  b156              CBZ      r6,|L1.1414|
000570  1d20              ADDS     r0,r4,#4              ;301
000572  f7fffffe          BL       setTimer
000576  2001              MOVS     r0,#1                 ;302
000578  7060              STRB     r0,[r4,#1]            ;302
00057a  4620              MOV      r0,r4                 ;303
00057c  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
000580  2002              MOVS     r0,#2                 ;304
000582  7020              STRB     r0,[r4,#0]            ;304
000584  e00e              B        |L1.1444|
                  |L1.1414|
000586  6860              LDR      r0,[r4,#4]            ;306
000588  f7fffffe          BL       getTimer
00058c  491b              LDR      r1,|L1.1532|
00058e  4288              CMP      r0,r1                 ;306
000590  d908              BLS      |L1.1444|
000592  2104              MOVS     r1,#4                 ;308
000594  4620              MOV      r0,r4                 ;308
000596  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
00059a  4620              MOV      r0,r4                 ;309
00059c  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0005a0  2000              MOVS     r0,#0                 ;310
0005a2  e7cc              B        |L1.1342|
                  |L1.1444|
0005a4  e024              B        |L1.1520|
                  |L1.1446|
0005a6  b94e              CBNZ     r6,|L1.1468|
0005a8  7867              LDRB     r7,[r4,#1]            ;317
0005aa  2104              MOVS     r1,#4                 ;318
0005ac  4620              MOV      r0,r4                 ;318
0005ae  f7fffffe          BL       _ZN13ButtonMachine8flashLEDEh ; ButtonMachine::flashLED(unsigned char)
0005b2  4620              MOV      r0,r4                 ;319
0005b4  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0005b8  4638              MOV      r0,r7                 ;320
0005ba  e7c0              B        |L1.1342|
                  |L1.1468|
0005bc  6860              LDR      r0,[r4,#4]            ;322
0005be  f7fffffe          BL       getTimer
0005c2  490f              LDR      r1,|L1.1536|
0005c4  4288              CMP      r0,r1                 ;322
0005c6  d90e              BLS      |L1.1510|
0005c8  1d20              ADDS     r0,r4,#4              ;324
0005ca  f7fffffe          BL       setTimer
0005ce  7860              LDRB     r0,[r4,#1]            ;325
0005d0  1c40              ADDS     r0,r0,#1              ;325
0005d2  7060              STRB     r0,[r4,#1]            ;325
0005d4  7861              LDRB     r1,[r4,#1]            ;326
0005d6  1c68              ADDS     r0,r5,#1              ;326
0005d8  4281              CMP      r1,r0                 ;326
0005da  d101              BNE      |L1.1504|
0005dc  2001              MOVS     r0,#1                 ;327
0005de  7060              STRB     r0,[r4,#1]            ;327
                  |L1.1504|
0005e0  4620              MOV      r0,r4                 ;329
0005e2  f7fffffe          BL       _ZN13ButtonMachine6setLEDEv ; ButtonMachine::setLED()
                  |L1.1510|
0005e6  e003              B        |L1.1520|
                  |L1.1512|
0005e8  4620              MOV      r0,r4                 ;334
0005ea  f7fffffe          BL       _ZN13ButtonMachine5resetEv ; ButtonMachine::reset()
0005ee  bf00              NOP                            ;290
                  |L1.1520|
0005f0  bf00              NOP                            ;296
                  |L1.1522|
0005f2  e7a7              B        |L1.1348|
;;;338    
                          ENDP

                  |L1.1524|
                          DCD      0x03938700
                  |L1.1528|
                          DCD      0x001312d0
                  |L1.1532|
                          DCD      0x0016e360
                  |L1.1536|
                          DCD      0x000f4240

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  ecv_index
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "button.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_button_cpp_32e029a3___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___10_button_cpp_32e029a3___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_button_cpp_32e029a3___Z7__REVSHi|
#line 144
|__asm___10_button_cpp_32e029a3___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
