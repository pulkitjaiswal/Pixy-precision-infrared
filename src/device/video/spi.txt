; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\spi.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\spi.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\spi.crf ..\libpixy\spi.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN3Spi12slaveHandlerEv PROC ; Spi::slaveHandler()
;;;79     
;;;80     void Spi::slaveHandler()
000000  b5f8              PUSH     {r3-r7,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82     	uint32_t d;
;;;83     	uint16_t d16; 
;;;84     
;;;85     	// toggle SPI_SS so we can receive the next word
;;;86     	SS_NEGATE(); // negate SPI_SS
000004  f44f4080          MOV      r0,#0x4000
000008  49e3              LDR      r1,|L1.920|
00000a  6008              STR      r0,[r1,#0]
;;;87     	SS_ASSERT(); // assert SPI_SS
00000c  2000              MOVS     r0,#0
00000e  49e3              LDR      r1,|L1.924|
000010  f8c10214          STR      r0,[r1,#0x214]
;;;88     
;;;89     	d = LPC_SSP1->DR; // grab data
000014  48e2              LDR      r0,|L1.928|
000016  6886              LDR      r6,[r0,#8]
;;;90     	// clear interrupt
;;;91     	LPC_SSP1->ICR = SSP_INTCFG_RX;  
000018  2004              MOVS     r0,#4
00001a  49e1              LDR      r1,|L1.928|
00001c  6208              STR      r0,[r1,#0x20]
;;;92     
;;;93     	// fill fifo
;;;94     	while(LPC_SSP1->SR&SSP_SR_TNF) 
00001e  e020              B        |L1.98|
                  |L1.32|
;;;95     	{
;;;96     		if (m_tq.read(&d16)==0)
000020  bf00              NOP      
000022  6aa0              LDR      r0,[r4,#0x28]
000024  b960              CBNZ     r0,|L1.64|
000026  69e3              LDR      r3,[r4,#0x1c]
000028  0059              LSLS     r1,r3,#1
00002a  6ae2              LDR      r2,[r4,#0x2c]
00002c  6a20              LDR      r0,[r4,#0x20]
00002e  4790              BLX      r2
000030  0840              LSRS     r0,r0,#1
000032  62a0              STR      r0,[r4,#0x28]
000034  6aa0              LDR      r0,[r4,#0x28]
000036  b908              CBNZ     r0,|L1.60|
000038  2000              MOVS     r0,#0
00003a  e00c              B        |L1.86|
                  |L1.60|
00003c  2000              MOVS     r0,#0
00003e  6260              STR      r0,[r4,#0x24]
                  |L1.64|
000040  6a61              LDR      r1,[r4,#0x24]
000042  1c48              ADDS     r0,r1,#1
000044  6260              STR      r0,[r4,#0x24]
000046  6a20              LDR      r0,[r4,#0x20]
000048  f8300011          LDRH     r0,[r0,r1,LSL #1]
00004c  9000              STR      r0,[sp,#0]
00004e  6aa0              LDR      r0,[r4,#0x28]
000050  1e40              SUBS     r0,r0,#1
000052  62a0              STR      r0,[r4,#0x28]
000054  2001              MOVS     r0,#1
                  |L1.86|
000056  b900              CBNZ     r0,|L1.90|
;;;97     			break;
000058  e009              B        |L1.110|
                  |L1.90|
;;;98     		LPC_SSP1->DR = d16;
00005a  f8bd0000          LDRH     r0,[sp,#0]
00005e  49d0              LDR      r1,|L1.928|
000060  6088              STR      r0,[r1,#8]
                  |L1.98|
000062  48cf              LDR      r0,|L1.928|
000064  68c0              LDR      r0,[r0,#0xc]          ;94
000066  f0000002          AND      r0,r0,#2              ;94
00006a  2800              CMP      r0,#0                 ;94
00006c  d1d8              BNE      |L1.32|
                  |L1.110|
00006e  bf00              NOP                            ;97
;;;99     	}
;;;100    	
;;;101    	// receive data
;;;102    	if ((d&SPI_SYNC_MASK)==SPI_SYNC_WORD)
000070  f406407f          AND      r0,r6,#0xff00
000074  f5b04fb4          CMP      r0,#0x5a00
000078  d103              BNE      |L1.130|
;;;103    		m_sync = true;
00007a  2001              MOVS     r0,#1
00007c  f8840030          STRB     r0,[r4,#0x30]
000080  e026              B        |L1.208|
                  |L1.130|
;;;104    	else if ((d&SPI_SYNC_MASK)==SPI_SYNC_WORD_DATA)
000082  f406407f          AND      r0,r6,#0xff00
000086  f5b04fb6          CMP      r0,#0x5b00
00008a  d11e              BNE      |L1.202|
;;;105    	{
;;;106    		m_rq.write(d);
00008c  1d25              ADDS     r5,r4,#4
00008e  b2b7              UXTH     r7,r6
000090  bf00              NOP      
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
000098  6829              LDR      r1,[r5,#0]
00009a  1a08              SUBS     r0,r1,r0
00009c  2800              CMP      r0,#0
00009e  dc00              BGT      |L1.162|
0000a0  e00f              B        |L1.194|
                  |L1.162|
0000a2  68e9              LDR      r1,[r5,#0xc]
0000a4  1c48              ADDS     r0,r1,#1
0000a6  60e8              STR      r0,[r5,#0xc]
0000a8  6868              LDR      r0,[r5,#4]
0000aa  f8207011          STRH     r7,[r0,r1,LSL #1]
0000ae  6928              LDR      r0,[r5,#0x10]
0000b0  1c40              ADDS     r0,r0,#1
0000b2  6128              STR      r0,[r5,#0x10]
0000b4  6829              LDR      r1,[r5,#0]
0000b6  68e8              LDR      r0,[r5,#0xc]
0000b8  4288              CMP      r0,r1
0000ba  d101              BNE      |L1.192|
0000bc  2000              MOVS     r0,#0
0000be  60e8              STR      r0,[r5,#0xc]
                  |L1.192|
0000c0  bf00              NOP      
                  |L1.194|
;;;107    		m_sync = true;
0000c2  2001              MOVS     r0,#1
0000c4  f8840030          STRB     r0,[r4,#0x30]
0000c8  e002              B        |L1.208|
                  |L1.202|
;;;108    	}
;;;109    	else
;;;110    		m_sync = false;
0000ca  2000              MOVS     r0,#0
0000cc  f8840030          STRB     r0,[r4,#0x30]
                  |L1.208|
;;;111    
;;;112    	m_recvCounter++;
0000d0  6b60              LDR      r0,[r4,#0x34]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  6360              STR      r0,[r4,#0x34]
;;;113    }
0000d6  bdf8              POP      {r3-r7,pc}
;;;114    
                          ENDP

                  SSP1_IRQHandler PROC
;;;74     
;;;75     void SSP1_IRQHandler(void)
0000d8  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	g_spi->slaveHandler();
0000da  48b2              LDR      r0,|L1.932|
0000dc  6800              LDR      r0,[r0,#0]  ; g_spi
0000de  f7fffffe          BL       _ZN3Spi12slaveHandlerEv ; Spi::slaveHandler()
;;;78     }
0000e2  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  _ZN3Spi9checkIdleEv PROC ; Spi::checkIdle()
;;;22     
;;;23     int Spi::checkIdle()
0000e4  4602              MOV      r2,r0
;;;24     {
;;;25     	uint32_t i;
;;;26     	// 2000, 120us
;;;27     	// 1000, 60us
;;;28     	SS_NEGATE(); // negate SPI_SS
0000e6  f44f4080          MOV      r0,#0x4000
0000ea  4bab              LDR      r3,|L1.920|
0000ec  6018              STR      r0,[r3,#0]
;;;29     	for (i=0; i<150; i++) // 9us
0000ee  2100              MOVS     r1,#0
0000f0  e006              B        |L1.256|
                  |L1.242|
;;;30     	{
;;;31     		if (LPC_GPIO_PORT->PIN[5]&0x04)
0000f2  48ad              LDR      r0,|L1.936|
0000f4  6940              LDR      r0,[r0,#0x14]
0000f6  f0000004          AND      r0,r0,#4
0000fa  b100              CBZ      r0,|L1.254|
;;;32     			break;
0000fc  e002              B        |L1.260|
                  |L1.254|
0000fe  1c49              ADDS     r1,r1,#1              ;29
                  |L1.256|
000100  2996              CMP      r1,#0x96              ;29
000102  d3f6              BCC      |L1.242|
                  |L1.260|
000104  bf00              NOP      
;;;33     	}
;;;34     	if (i==150)
000106  2996              CMP      r1,#0x96
000108  d112              BNE      |L1.304|
;;;35     	{
;;;36     		SS_ASSERT(); // assert SPI_SS
00010a  2000              MOVS     r0,#0
00010c  4ba2              LDR      r3,|L1.920|
00010e  6018              STR      r0,[r3,#0]
;;;37     		for (i=0; i<16; i++) // 1us
000110  2100              MOVS     r1,#0
000112  e006              B        |L1.290|
                  |L1.276|
;;;38     		{
;;;39     			if (LPC_GPIO_PORT->PIN[5]&0x04)
000114  48a4              LDR      r0,|L1.936|
000116  6940              LDR      r0,[r0,#0x14]
000118  f0000004          AND      r0,r0,#4
00011c  b100              CBZ      r0,|L1.288|
;;;40     				break;
00011e  e002              B        |L1.294|
                  |L1.288|
000120  1c49              ADDS     r1,r1,#1              ;37
                  |L1.290|
000122  2910              CMP      r1,#0x10              ;37
000124  d3f6              BCC      |L1.276|
                  |L1.294|
000126  bf00              NOP      
;;;41     		}
;;;42     		if (i==16)
000128  2910              CMP      r1,#0x10
00012a  d101              BNE      |L1.304|
;;;43     			return 1;
00012c  2001              MOVS     r0,#1
                  |L1.302|
;;;44      	}
;;;45     	SS_ASSERT(); // assert SPI_SS
;;;46     	return 0;
;;;47     }
00012e  4770              BX       lr
                  |L1.304|
000130  2000              MOVS     r0,#0                 ;45
000132  4b99              LDR      r3,|L1.920|
000134  6018              STR      r0,[r3,#0]            ;45
000136  bf00              NOP                            ;46
000138  e7f9              B        |L1.302|
;;;48     
                          ENDP

                  _ZN3Spi4syncEv PROC ; Spi::sync()
;;;49     int Spi::sync()
00013a  b538              PUSH     {r3-r5,lr}
;;;50     {
00013c  4604              MOV      r4,r0
;;;51     	uint32_t timer;
;;;52     	int res = 0;
00013e  2500              MOVS     r5,#0
;;;53     
;;;54     	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, DISABLE);
000140  2200              MOVS     r2,#0
000142  2104              MOVS     r1,#4
000144  4896              LDR      r0,|L1.928|
000146  f7fffffe          BL       SSP_IntConfig
;;;55     
;;;56     	setTimer(&timer);
00014a  4668              MOV      r0,sp
00014c  f7fffffe          BL       setTimer
;;;57     	while(1)
000150  e00c              B        |L1.364|
                  |L1.338|
;;;58     	{
;;;59     		if(checkIdle())
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       _ZN3Spi9checkIdleEv ; Spi::checkIdle()
000158  b108              CBZ      r0,|L1.350|
;;;60     		{
;;;61     			res = 1;
00015a  2501              MOVS     r5,#1
;;;62     			break;
00015c  e007              B        |L1.366|
                  |L1.350|
;;;63     		}
;;;64     		if (getTimer(timer)>500000) // timeout .5 seconds
00015e  9800              LDR      r0,[sp,#0]
000160  f7fffffe          BL       getTimer
000164  4991              LDR      r1,|L1.940|
000166  4288              CMP      r0,r1
000168  d900              BLS      |L1.364|
;;;65     			break;
00016a  e000              B        |L1.366|
                  |L1.364|
00016c  e7f1              B        |L1.338|
                  |L1.366|
00016e  bf00              NOP                            ;62
;;;66     	}
;;;67     
;;;68     	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, ENABLE);
000170  2201              MOVS     r2,#1
000172  2104              MOVS     r1,#4
000174  488a              LDR      r0,|L1.928|
000176  f7fffffe          BL       SSP_IntConfig
;;;69     	return res;	
00017a  4628              MOV      r0,r5
;;;70     }
00017c  bd38              POP      {r3-r5,pc}
;;;71     
                          ENDP

                  _ZN3SpiC2EPFjPhjE                  ; Alternate entry point ; Spi::Spi__sub_object(unsigned(*)(unsigned char*, unsigned))
                  _ZN3SpiC1EPFjPhjE PROC ; Spi::Spi(unsigned(*)(unsigned char*, unsigned))
;;;194    
;;;195    Spi::Spi(SerialCallback callback) : m_rq(SPI_RECEIVEBUF_SIZE), m_tq(SPI_TRANSMITBUF_SIZE, callback)
;;;196    {
;;;197    	uint32_t i;
;;;198    	volatile uint32_t d;
;;;199    	SSP_CFG_Type configStruct;
;;;200    
;;;201    	configStruct.CPHA = SSP_CPHA_FIRST;
;;;202    	configStruct.CPOL = SSP_CPOL_HI;
;;;203    	configStruct.ClockRate = 204000000;
;;;204    	configStruct.Databit = SSP_DATABIT_16;
;;;205    	configStruct.Mode = SSP_SLAVE_MODE;
;;;206    	configStruct.FrameFormat = SSP_FRAME_SPI;
;;;207    
;;;208    	// Initialize SSP peripheral with parameter given in structure above
;;;209    	SSP_Init(LPC_SSP1, &configStruct);
;;;210    
;;;211    	// clear receive fifo
;;;212    	for (i=0; i<8; i++)
;;;213    		d = LPC_SSP1->DR;
;;;214    
;;;215    	// Enable SSP peripheral
;;;216    	SSP_Cmd(LPC_SSP1, ENABLE);
;;;217    		
;;;218    	SSP_ClearIntPending(LPC_SSP1, SSP_INTCFG_RX);
;;;219    	SSP_IntConfig(LPC_SSP1, SSP_INTCFG_RX, ENABLE);
;;;220    
;;;221    	NVIC_SetPriority(SSP1_IRQn, 0);	// high priority interrupt
;;;222    
;;;223    	m_sync = false;
;;;224    	m_recvCounter = 0;
;;;225    	m_lastRecvCounter = 0; 
;;;226    	m_syncCounter = 0;
;;;227    
;;;228    	// sync
;;;229    	sync();					
;;;230    }
00017e  e92d41f0          PUSH     {r4-r8,lr}
000182  b088              SUB      sp,sp,#0x20
000184  4604              MOV      r4,r0
000186  460e              MOV      r6,r1
000188  4989              LDR      r1,|L1.944|
00018a  488a              LDR      r0,|L1.948|
00018c  6020              STR      r0,[r4,#0]
00018e  1d25              ADDS     r5,r4,#4
000190  f04f0810          MOV      r8,#0x10
000194  f8c58000          STR      r8,[r5,#0]
000198  6829              LDR      r1,[r5,#0]
00019a  0048              LSLS     r0,r1,#1
00019c  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
0001a0  6068              STR      r0,[r5,#4]
0001a2  2000              MOVS     r0,#0
0001a4  60a8              STR      r0,[r5,#8]
0001a6  60e8              STR      r0,[r5,#0xc]
0001a8  6128              STR      r0,[r5,#0x10]
0001aa  6168              STR      r0,[r5,#0x14]
0001ac  bf00              NOP      
0001ae  1f2c              SUBS     r4,r5,#4
0001b0  f104051c          ADD      r5,r4,#0x1c
0001b4  f8c58000          STR      r8,[r5,#0]
0001b8  6829              LDR      r1,[r5,#0]
0001ba  0048              LSLS     r0,r1,#1
0001bc  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
0001c0  6068              STR      r0,[r5,#4]
0001c2  2000              MOVS     r0,#0
0001c4  60a8              STR      r0,[r5,#8]
0001c6  60e8              STR      r0,[r5,#0xc]
0001c8  612e              STR      r6,[r5,#0x10]
0001ca  bf00              NOP      
0001cc  f1a5041c          SUB      r4,r5,#0x1c
0001d0  9002              STR      r0,[sp,#8]
0001d2  9003              STR      r0,[sp,#0xc]
0001d4  4878              LDR      r0,|L1.952|
0001d6  9006              STR      r0,[sp,#0x18]
0001d8  200f              MOVS     r0,#0xf
0001da  9001              STR      r0,[sp,#4]
0001dc  2004              MOVS     r0,#4
0001de  9004              STR      r0,[sp,#0x10]
0001e0  2000              MOVS     r0,#0
0001e2  9005              STR      r0,[sp,#0x14]
0001e4  a901              ADD      r1,sp,#4
0001e6  486e              LDR      r0,|L1.928|
0001e8  f7fffffe          BL       SSP_Init
0001ec  2700              MOVS     r7,#0
0001ee  e003              B        |L1.504|
                  |L1.496|
0001f0  486b              LDR      r0,|L1.928|
0001f2  6880              LDR      r0,[r0,#8]
0001f4  9007              STR      r0,[sp,#0x1c]
0001f6  1c7f              ADDS     r7,r7,#1
                  |L1.504|
0001f8  2f08              CMP      r7,#8
0001fa  d3f9              BCC      |L1.496|
0001fc  2101              MOVS     r1,#1
0001fe  4868              LDR      r0,|L1.928|
000200  f7fffffe          BL       SSP_Cmd
000204  2104              MOVS     r1,#4
000206  4866              LDR      r0,|L1.928|
000208  f7fffffe          BL       SSP_ClearIntPending
00020c  2201              MOVS     r2,#1
00020e  2104              MOVS     r1,#4
000210  4863              LDR      r0,|L1.928|
000212  f7fffffe          BL       SSP_IntConfig
000216  2017              MOVS     r0,#0x17
000218  2100              MOVS     r1,#0
00021a  2800              CMP      r0,#0
00021c  da07              BGE      |L1.558|
00021e  070a              LSLS     r2,r1,#28
000220  0e15              LSRS     r5,r2,#24
000222  4a66              LDR      r2,|L1.956|
000224  f000030f          AND      r3,r0,#0xf
000228  1f1b              SUBS     r3,r3,#4
00022a  54d5              STRB     r5,[r2,r3]
00022c  e003              B        |L1.566|
                  |L1.558|
00022e  070a              LSLS     r2,r1,#28
000230  0e13              LSRS     r3,r2,#24
000232  4a63              LDR      r2,|L1.960|
000234  5413              STRB     r3,[r2,r0]
                  |L1.566|
000236  bf00              NOP      
000238  2000              MOVS     r0,#0
00023a  f8840030          STRB     r0,[r4,#0x30]
00023e  6360              STR      r0,[r4,#0x34]
000240  63a0              STR      r0,[r4,#0x38]
000242  f884003c          STRB     r0,[r4,#0x3c]
000246  4620              MOV      r0,r4
000248  f7fffffe          BL       _ZN3Spi4syncEv ; Spi::sync()
00024c  4620              MOV      r0,r4
00024e  b008              ADD      sp,sp,#0x20
000250  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _Z8spi_initPFjPhjE PROC ; spi_init(unsigned(*)(unsigned char*, unsigned))
;;;189    	
;;;190    void spi_init(SerialCallback callback)
000254  b570              PUSH     {r4-r6,lr}
;;;191    {
000256  4604              MOV      r4,r0
;;;192    	g_spi = new Spi(callback);
000258  2040              MOVS     r0,#0x40
00025a  f7fffffe          BL       _Znwj ; operator new(unsigned)
00025e  4605              MOV      r5,r0
000260  4621              MOV      r1,r4
000262  f7fffffe          BL       _ZN3SpiC1EPFjPhjE ; Spi::Spi(unsigned(*)(unsigned char*, unsigned))
000266  4605              MOV      r5,r0
000268  484e              LDR      r0,|L1.932|
00026a  6005              STR      r5,[r0,#0]  ; g_spi
;;;193    }
00026c  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

                  _ZN3Spi4openEv PROC ; Spi::open()
;;;134    
;;;135    int Spi::open()
00026e  b510              PUSH     {r4,lr}
;;;136    {
000270  4604              MOV      r4,r0
;;;137    	// configure SGPIO bit as output so we can toggle slave select (SS)
;;;138    	LPC_SGPIO->OUT_MUX_CFG14 = 4;
000272  2004              MOVS     r0,#4
000274  4949              LDR      r1,|L1.924|
000276  6388              STR      r0,[r1,#0x38]
;;;139    	LPC_SGPIO->GPIO_OENREG = 1<<14;
000278  0300              LSLS     r0,r0,#12
00027a  4947              LDR      r1,|L1.920|
00027c  1d09              ADDS     r1,r1,#4
00027e  6008              STR      r0,[r1,#0]
;;;140    	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); // SSP1_MISO
000280  2305              MOVS     r3,#5
000282  22f0              MOVS     r2,#0xf0
000284  2103              MOVS     r1,#3
000286  2001              MOVS     r0,#1
000288  f7fffffe          BL       scu_pinmux
;;;141    	scu_pinmux(0x1, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); // SSP1_MOSI 
00028c  2305              MOVS     r3,#5
00028e  22f0              MOVS     r2,#0xf0
000290  2104              MOVS     r1,#4
000292  2001              MOVS     r0,#1
000294  f7fffffe          BL       scu_pinmux
;;;142    	scu_pinmux(0x1, 19, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); // SSP1_SCK 
000298  2301              MOVS     r3,#1
00029a  22f0              MOVS     r2,#0xf0
00029c  2113              MOVS     r1,#0x13
00029e  4618              MOV      r0,r3
0002a0  f7fffffe          BL       scu_pinmux
;;;143    
;;;144    	// enable interrupt
;;;145    	NVIC_EnableIRQ(SSP1_IRQn);
0002a4  2017              MOVS     r0,#0x17
0002a6  2101              MOVS     r1,#1
0002a8  4081              LSLS     r1,r1,r0
0002aa  0942              LSRS     r2,r0,#5
0002ac  0092              LSLS     r2,r2,#2
0002ae  f10222e0          ADD      r2,r2,#0xe000e000
0002b2  f8c21100          STR      r1,[r2,#0x100]
0002b6  bf00              NOP      
;;;146    
;;;147    	return 0;
0002b8  2000              MOVS     r0,#0
;;;148    }
0002ba  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  _ZN3Spi5closeEv PROC ; Spi::close()
;;;150    int Spi::close()
0002bc  b510              PUSH     {r4,lr}
;;;151    {
0002be  4601              MOV      r1,r0
;;;152    	// turn off driver for SS
;;;153    	LPC_SGPIO->GPIO_OENREG = 0;
0002c0  2000              MOVS     r0,#0
0002c2  4a35              LDR      r2,|L1.920|
0002c4  1d12              ADDS     r2,r2,#4
0002c6  6010              STR      r0,[r2,#0]
;;;154    
;;;155    	// enable interrupt
;;;156    	NVIC_DisableIRQ(SSP1_IRQn);
0002c8  2017              MOVS     r0,#0x17
0002ca  2201              MOVS     r2,#1
0002cc  4082              LSLS     r2,r2,r0
0002ce  4b3d              LDR      r3,|L1.964|
0002d0  0944              LSRS     r4,r0,#5
0002d2  f8432024          STR      r2,[r3,r4,LSL #2]
0002d6  bf00              NOP      
;;;157    	return 0;
0002d8  2000              MOVS     r0,#0
;;;158    }
0002da  bd10              POP      {r4,pc}
;;;159    
                          ENDP

                  _ZN3Spi7receiveEPhj PROC ; Spi::receive(unsigned char*, unsigned)
;;;114    
;;;115    int Spi::receive(uint8_t *buf, uint32_t len)
0002dc  e92d43f8          PUSH     {r3-r9,lr}
;;;116    {
0002e0  4680              MOV      r8,r0
0002e2  460e              MOV      r6,r1
0002e4  4617              MOV      r7,r2
;;;117    	uint32_t i;
;;;118    	uint16_t buf16;
;;;119    
;;;120    	for (i=0; i<len; i++)
0002e6  2500              MOVS     r5,#0
0002e8  e01f              B        |L1.810|
                  |L1.746|
;;;121    	{
;;;122    		if (m_rq.read(&buf16)==0)
0002ea  f1080404          ADD      r4,r8,#4
0002ee  4620              MOV      r0,r4
0002f0  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
0002f4  2800              CMP      r0,#0
0002f6  dc01              BGT      |L1.764|
0002f8  2000              MOVS     r0,#0
0002fa  e010              B        |L1.798|
                  |L1.764|
0002fc  68a1              LDR      r1,[r4,#8]
0002fe  1c48              ADDS     r0,r1,#1
000300  60a0              STR      r0,[r4,#8]
000302  6860              LDR      r0,[r4,#4]
000304  f8300011          LDRH     r0,[r0,r1,LSL #1]
000308  9000              STR      r0,[sp,#0]
00030a  6960              LDR      r0,[r4,#0x14]
00030c  1c40              ADDS     r0,r0,#1
00030e  6160              STR      r0,[r4,#0x14]
000310  6821              LDR      r1,[r4,#0]
000312  68a0              LDR      r0,[r4,#8]
000314  4288              CMP      r0,r1
000316  d101              BNE      |L1.796|
000318  2000              MOVS     r0,#0
00031a  60a0              STR      r0,[r4,#8]
                  |L1.796|
00031c  2001              MOVS     r0,#1
                  |L1.798|
00031e  b900              CBNZ     r0,|L1.802|
;;;123    			break;
000320  e005              B        |L1.814|
                  |L1.802|
;;;124    		buf[i] = buf16&0xff;
000322  f8bd0000          LDRH     r0,[sp,#0]
000326  5570              STRB     r0,[r6,r5]
000328  1c6d              ADDS     r5,r5,#1              ;120
                  |L1.810|
00032a  42bd              CMP      r5,r7                 ;120
00032c  d3dd              BCC      |L1.746|
                  |L1.814|
00032e  bf00              NOP                            ;123
;;;125    	}
;;;126    
;;;127    	return i;
000330  4628              MOV      r0,r5
;;;128    }
000332  e8bd83f8          POP      {r3-r9,pc}
;;;129    
                          ENDP

                  _ZN3Spi10receiveLenEv PROC ; Spi::receiveLen()
;;;130    int Spi::receiveLen()
000336  b510              PUSH     {r4,lr}
;;;131    {	
000338  4604              MOV      r4,r0
;;;132    	return m_rq.receiveLen();
00033a  1d20              ADDS     r0,r4,#4
00033c  f7fffffe          BL       _ZN8ReceiveQItE10receiveLenEv ; ReceiveQ<unsigned short>::receiveLen()
;;;133    }
000340  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  _ZN3Spi6updateEv PROC ; Spi::update()
;;;159    
;;;160    int Spi::update()
000342  b510              PUSH     {r4,lr}
;;;161    {
000344  4604              MOV      r4,r0
;;;162    	// check to see if we've received new data (m_rq.m_produced would have increased)
;;;163    	if (m_recvCounter-m_lastRecvCounter>0)
000346  e9d4010d          LDRD     r0,r1,[r4,#0x34]
00034a  1a40              SUBS     r0,r0,r1
00034c  d018              BEQ      |L1.896|
;;;164    	{
;;;165    		if (!m_sync) // if received data isn't correct, we're out of sync
00034e  f8940030          LDRB     r0,[r4,#0x30]
000352  b988              CBNZ     r0,|L1.888|
;;;166    		{
;;;167    			m_syncCounter++;
000354  f8140f3c          LDRB     r0,[r4,#0x3c]!
000358  1c40              ADDS     r0,r0,#1
00035a  7020              STRB     r0,[r4,#0]
;;;168    
;;;169    			if (m_syncCounter==SPI_MIN_SYNC_COUNT) // if we receive enough bad syncs in a row, we need to resync 
00035c  f814093c          LDRB     r0,[r4],#-0x3c
000360  2805              CMP      r0,#5
000362  d115              BNE      |L1.912|
;;;170    			{
;;;171    				sync();
000364  4620              MOV      r0,r4
000366  f7fffffe          BL       _ZN3Spi4syncEv ; Spi::sync()
;;;172    				cprintf("sync\n");
00036a  a017              ADR      r0,|L1.968|
00036c  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;173    				m_syncCounter = 0;
000370  2000              MOVS     r0,#0
000372  f884003c          STRB     r0,[r4,#0x3c]
000376  e00b              B        |L1.912|
                  |L1.888|
;;;174    			}
;;;175    		}
;;;176    		else
;;;177    			m_syncCounter = 0;
000378  2000              MOVS     r0,#0
00037a  f884003c          STRB     r0,[r4,#0x3c]
00037e  e007              B        |L1.912|
                  |L1.896|
;;;178    	}
;;;179    	else
;;;180    	{
;;;181    		// need to pump up the fifo because we only get an interrupt when fifo is half full
;;;182    		// (and we won't receive data if we don't toggle SS)
;;;183    		SS_NEGATE();
000380  f44f4080          MOV      r0,#0x4000
000384  4904              LDR      r1,|L1.920|
000386  6008              STR      r0,[r1,#0]
;;;184    		SS_ASSERT();
000388  2000              MOVS     r0,#0
00038a  4904              LDR      r1,|L1.924|
00038c  f8c10214          STR      r0,[r1,#0x214]
                  |L1.912|
;;;185    	}
;;;186    	m_lastRecvCounter = m_recvCounter;
000390  6b60              LDR      r0,[r4,#0x34]
000392  63a0              STR      r0,[r4,#0x38]
;;;187    	return 0;
000394  2000              MOVS     r0,#0
;;;188    }
000396  bd10              POP      {r4,pc}
;;;189    	
                          ENDP

                  |L1.920|
                          DCD      0x40101214
                  |L1.924|
                          DCD      0x40101000
                  |L1.928|
                          DCD      0x400c5000
                  |L1.932|
                          DCD      g_spi
                  |L1.936|
                          DCD      0x400f6100
                  |L1.940|
                          DCD      0x0007a120
                  |L1.944|
                          DCD      _ZTV7Iserial+0x8 ; vtable for Iserial
                  |L1.948|
                          DCD      _ZTV3Spi+0x8 ; vtable for Spi
                  |L1.952|
                          DCD      0x0c28cb00
                  |L1.956|
                          DCD      0xe000ed18
                  |L1.960|
                          DCD      0xe000e400
                  |L1.964|
                          DCD      0xe000e180
                  |L1.968|
0003c8  73796e63          DCB      "sync\n",0
0003cc  0a00    
0003ce  00                DCB      0
0003cf  00                DCB      0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  g_spi
                          DCD      0x00000000

                          AREA ||.constdata__ZTV3Spi||, COMGROUP=_ZTV3Spi, DATA, READONLY, ALIGN=2

                  _ZTV3Spi ; vtable for Spi
                          DCD      0x00000000
                          DCD      _ZTI3Spi ; typeinfo for Spi
                          DCD      _ZN3Spi4openEv ; Spi::open()
                          DCD      _ZN3Spi5closeEv ; Spi::close()
                          DCD      _ZN3Spi7receiveEPhj ; Spi::receive(unsigned char*, unsigned)
                          DCD      _ZN3Spi10receiveLenEv ; Spi::receiveLen()
                          DCD      _ZN3Spi6updateEv ; Spi::update()

                          AREA ||t._ZN8ReceiveQItE10receiveLenEv||, COMGROUP=_ZN8ReceiveQItE10receiveLenEv, CODE, READONLY, ALIGN=1

                  _ZN8ReceiveQItE10receiveLenEv PROC ; ReceiveQ<unsigned short>::receiveLen()
;;;41     
;;;42     	inline int32_t receiveLen()
000000  4601              MOV      r1,r0
;;;43     	{
;;;44     		return m_produced - m_consumed;
000002  e9d10204          LDRD     r0,r2,[r1,#0x10]
000006  1a80              SUBS     r0,r0,r2
;;;45     	}
000008  4770              BX       lr
;;;46     
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN8ReceiveQItE10receiveLenEv, LINKORDER=||t._ZN8ReceiveQItE10receiveLenEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN8ReceiveQItE10receiveLenEv||
                          DCD      0x00000001

                          AREA ||.constdata__ZTV7Iserial||, COMGROUP=_ZTV7Iserial, DATA, READONLY, ALIGN=2

                  _ZTV7Iserial ; vtable for Iserial
                          DCD      0x00000000
                          DCD      _ZTI7Iserial ; typeinfo for Iserial
                          DCD      _ZN7Iserial4openEv ; Iserial::open()
                          DCD      _ZN7Iserial5closeEv ; Iserial::close()
                          DCD      _ZN7Iserial7receiveEPhj ; Iserial::receive(unsigned char*, unsigned)
                          DCD      _ZN7Iserial10receiveLenEv ; Iserial::receiveLen()
                          DCD      _ZN7Iserial6updateEv ; Iserial::update()

                          AREA ||.constdata__ZTI3Spi||, COMGROUP=_ZTI3Spi, DATA, READONLY, ALIGN=2

                  _ZTI3Spi ; typeinfo for Spi
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS3Spi ; typeinfo name for Spi
                          DCD      _ZTI7Iserial ; typeinfo for Iserial

                          AREA ||.constdata__ZTI7Iserial||, COMGROUP=_ZTI7Iserial, DATA, READONLY, ALIGN=2

                  _ZTI7Iserial ; typeinfo for Iserial
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS7Iserial ; typeinfo name for Iserial

                          AREA ||.constdata__ZTS3Spi||, COMGROUP=_ZTS3Spi, DATA, READONLY, ALIGN=0

                  _ZTS3Spi ; typeinfo name for Spi
000000  33537069          DCB      0x33,0x53,0x70,0x69
000004  00                DCB      0x00

                          AREA ||.constdata__ZTS7Iserial||, COMGROUP=_ZTS7Iserial, DATA, READONLY, ALIGN=0

                  _ZTS7Iserial ; typeinfo name for Iserial
000000  37497365          DCB      0x37,0x49,0x73,0x65
000004  7269616c          DCB      0x72,0x69,0x61,0x6c
000008  00                DCB      0x00

                          AREA ||i._ZN7Iserial4openEv||, COMGROUP=_ZN7Iserial4openEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial4openEv PROC ; Iserial::open()
;;;131    public:
;;;132    	virtual int open()
000000  4601              MOV      r1,r0
;;;133    	{
;;;134    		return 0;
000002  2000              MOVS     r0,#0
;;;135    	}
000004  4770              BX       lr
;;;136    	virtual int close()
                          ENDP


                          AREA ||area_number.39||, COMGROUP=_ZN7Iserial4openEv, LINKORDER=||i._ZN7Iserial4openEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial4openEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial5closeEv||, COMGROUP=_ZN7Iserial5closeEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial5closeEv PROC ; Iserial::close()
;;;135    	}
;;;136    	virtual int close()
000000  4601              MOV      r1,r0
;;;137    	{
;;;138    		return 0;
000002  2000              MOVS     r0,#0
;;;139    	}
000004  4770              BX       lr
;;;140    	virtual int receive(uint8_t *buf, uint32_t len)
                          ENDP


                          AREA ||area_number.46||, COMGROUP=_ZN7Iserial5closeEv, LINKORDER=||i._ZN7Iserial5closeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial5closeEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial7receiveEPhj||, COMGROUP=_ZN7Iserial7receiveEPhj, CODE, READONLY, ALIGN=1

                  _ZN7Iserial7receiveEPhj PROC ; Iserial::receive(unsigned char*, unsigned)
;;;139    	}
;;;140    	virtual int receive(uint8_t *buf, uint32_t len)
000000  4603              MOV      r3,r0
;;;141    	{
;;;142    		return 0;
000002  2000              MOVS     r0,#0
;;;143    	}
000004  4770              BX       lr
;;;144    	virtual int receiveLen()
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN7Iserial7receiveEPhj, LINKORDER=||i._ZN7Iserial7receiveEPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial7receiveEPhj||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial10receiveLenEv||, COMGROUP=_ZN7Iserial10receiveLenEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial10receiveLenEv PROC ; Iserial::receiveLen()
;;;143    	}
;;;144    	virtual int receiveLen()
000000  4601              MOV      r1,r0
;;;145    	{
;;;146    		return 0;
000002  2000              MOVS     r0,#0
;;;147    	}
000004  4770              BX       lr
;;;148    	virtual int update()
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN7Iserial10receiveLenEv, LINKORDER=||i._ZN7Iserial10receiveLenEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial10receiveLenEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial6updateEv||, COMGROUP=_ZN7Iserial6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial6updateEv PROC ; Iserial::update()
;;;147    	}
;;;148    	virtual int update()
000000  4601              MOV      r1,r0
;;;149    	{
;;;150    		return 0;
000002  2000              MOVS     r0,#0
;;;151    	}
000004  4770              BX       lr
;;;152    };
                          ENDP


                          AREA ||area_number.67||, COMGROUP=_ZN7Iserial6updateEv, LINKORDER=||i._ZN7Iserial6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial6updateEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\libpixy\\spi.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_spi_cpp_g_spi___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___7_spi_cpp_g_spi___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_spi_cpp_g_spi___Z7__REVSHi|
#line 144
|__asm___7_spi_cpp_g_spi___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
