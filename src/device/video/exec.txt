; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\exec.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\exec.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\exec.crf exec.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10loadParamsv PROC ; loadParams()
;;;384    
;;;385    static void loadParams()
000000  b51c              PUSH     {r2-r4,lr}
;;;386    {
;;;387    	// exec's params added here
;;;388    	prm_add("Default program", 0, 
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  2301              MOVS     r3,#1
000008  4ae2              LDR      r2,|L1.916|
00000a  4601              MOV      r1,r0
00000c  9001              STR      r0,[sp,#4]
00000e  a0e2              ADR      r0,|L1.920|
000010  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;389    		"Selects the program number that's run by default upon power-up. (default 0)", UINT8(0), END);
;;;390    }
000014  bd1c              POP      {r2-r4,pc}
;;;391    
                          ENDP

                  _Z9exec_initP5Chirp PROC ; exec_init(Chirp*)
;;;219    
;;;220    int exec_init(Chirp *chirp)
000016  b570              PUSH     {r4-r6,lr}
;;;221    {
000018  4605              MOV      r5,r0
;;;222    	g_bMachine = new ButtonMachine;
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       _Znwj ; operator new(unsigned)
000020  4604              MOV      r4,r0
000022  f7fffffe          BL       _ZN13ButtonMachineC1Ev ; ButtonMachine::ButtonMachine()
000026  4604              MOV      r4,r0
000028  48df              LDR      r0,|L1.936|
00002a  6004              STR      r4,[r0,#0]  ; g_bMachine
;;;223    
;;;224    	chirp->registerModule(g_module);
00002c  49df              LDR      r1,|L1.940|
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;225    
;;;226    	g_runM0 = g_chirpM0->getProc("run", NULL);
000034  2200              MOVS     r2,#0
000036  a1de              ADR      r1,|L1.944|
000038  48de              LDR      r0,|L1.948|
00003a  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00003c  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000040  49dd              LDR      r1,|L1.952|
000042  8008              STRH     r0,[r1,#0]
;;;227    	g_runningM0 = g_chirpM0->getProc("running", NULL);
000044  2200              MOVS     r2,#0
000046  a1dd              ADR      r1,|L1.956|
000048  48da              LDR      r0,|L1.948|
00004a  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00004c  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000050  49dc              LDR      r1,|L1.964|
000052  8008              STRH     r0,[r1,#0]
;;;228    	g_stopM0 = g_chirpM0->getProc("stop", NULL);	
000054  2200              MOVS     r2,#0
000056  a1dc              ADR      r1,|L1.968|
000058  48d6              LDR      r0,|L1.948|
00005a  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00005c  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
000060  49db              LDR      r1,|L1.976|
000062  8008              STRH     r0,[r1,#0]
;;;229    
;;;230    	loadParams();		
000064  f7fffffe          BL       _Z10loadParamsv ; loadParams()
;;;231    
;;;232    	return 0;	
000068  2000              MOVS     r0,#0
;;;233    }
00006a  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

                  _Z12exec_addProgP7Programb PROC ; exec_addProg(Program*, bool)
;;;235    
;;;236    int exec_addProg(Program *prog, bool video)
00006c  4602              MOV      r2,r0
;;;237    {
00006e  460b              MOV      r3,r1
;;;238    	int i;
;;;239    
;;;240    	if (video)
000070  b113              CBZ      r3,|L1.120|
;;;241    		g_progTable[EXEC_VIDEO_PROG-1] = prog;
000072  48d8              LDR      r0,|L1.980|
000074  61c2              STR      r2,[r0,#0x1c]  ; g_progTable
000076  e00f              B        |L1.152|
                  |L1.120|
;;;242    	else
;;;243    	{
;;;244    		for (i=0; g_progTable[i]; i++)
000078  2100              MOVS     r1,#0
00007a  e005              B        |L1.136|
                  |L1.124|
;;;245    
;;;246    		if (i>=EXEC_MAX_PROGS)
00007c  2908              CMP      r1,#8
00007e  db02              BLT      |L1.134|
;;;247    			return -1;
000080  f04f30ff          MOV      r0,#0xffffffff
                  |L1.132|
;;;248    
;;;249       		g_progTable[i] = prog;
;;;250    	}
;;;251    	return 0;
;;;252    }
000084  4770              BX       lr
                  |L1.134|
000086  1c49              ADDS     r1,r1,#1              ;244
                  |L1.136|
000088  48d2              LDR      r0,|L1.980|
00008a  f8500021          LDR      r0,[r0,r1,LSL #2]     ;244
00008e  2800              CMP      r0,#0                 ;244
000090  d1f4              BNE      |L1.124|
000092  48d0              LDR      r0,|L1.980|
000094  f8402021          STR      r2,[r0,r1,LSL #2]     ;249
                  |L1.152|
000098  2000              MOVS     r0,#0                 ;251
00009a  e7f3              B        |L1.132|
;;;253    
                          ENDP

                  _Z12exec_runningv PROC ; exec_running()
;;;254    
;;;255    uint32_t exec_running()
00009c  48ce              LDR      r0,|L1.984|
;;;256    {
;;;257     	if (g_running)
00009e  7800              LDRB     r0,[r0,#0]  ; g_running
0000a0  b110              CBZ      r0,|L1.168|
;;;258    		return g_running;
0000a2  48cd              LDR      r0,|L1.984|
0000a4  7800              LDRB     r0,[r0,#0]  ; g_running
                  |L1.166|
;;;259    	if (g_override)
;;;260    		return 2; // we're not running and we're pressing the button
;;;261    	return 0;
;;;262    }
0000a6  4770              BX       lr
                  |L1.168|
0000a8  48cc              LDR      r0,|L1.988|
0000aa  7800              LDRB     r0,[r0,#0]            ;259  ; g_override
0000ac  b108              CBZ      r0,|L1.178|
0000ae  2002              MOVS     r0,#2                 ;260
0000b0  e7f9              B        |L1.166|
                  |L1.178|
0000b2  2000              MOVS     r0,#0                 ;261
0000b4  e7f7              B        |L1.166|
;;;263    
                          ENDP

                  _Z9exec_stopv PROC ; exec_stop()
;;;264    int32_t exec_stop()
0000b6  2000              MOVS     r0,#0
;;;265    {
;;;266    	g_run = 0;
0000b8  49c9              LDR      r1,|L1.992|
0000ba  7008              STRB     r0,[r1,#0]
;;;267    	return 0;
;;;268    }
0000bc  4770              BX       lr
;;;269    
                          ENDP

                  _Z8exec_runv PROC ; exec_run()
;;;270    int32_t exec_run()
0000be  2001              MOVS     r0,#1
;;;271    {
;;;272    	g_run = true;
0000c0  49c7              LDR      r1,|L1.992|
0000c2  7008              STRB     r0,[r1,#0]
;;;273    	g_running = true;		
0000c4  49c4              LDR      r1,|L1.984|
0000c6  7008              STRB     r0,[r1,#0]
;;;274    	return 0;
0000c8  2000              MOVS     r0,#0
;;;275    }
0000ca  4770              BX       lr
;;;276    
                          ENDP

                  _Z12exec_runprogRKh PROC ; exec_runprog(const unsigned char&)
;;;277    
;;;278    int32_t exec_runprog(const uint8_t &progNum)
0000cc  b538              PUSH     {r3-r5,lr}
;;;279    {			   
0000ce  4604              MOV      r4,r0
;;;280    	if (progNum!=0 && (progNum>EXEC_MAX_PROGS || g_progTable[progNum-1]==NULL))
0000d0  7820              LDRB     r0,[r4,#0]
0000d2  b158              CBZ      r0,|L1.236|
0000d4  7820              LDRB     r0,[r4,#0]
0000d6  2808              CMP      r0,#8
0000d8  dc05              BGT      |L1.230|
0000da  7820              LDRB     r0,[r4,#0]
0000dc  1e40              SUBS     r0,r0,#1
0000de  49bd              LDR      r1,|L1.980|
0000e0  f8510020          LDR      r0,[r1,r0,LSL #2]
0000e4  b910              CBNZ     r0,|L1.236|
                  |L1.230|
;;;281    		return -1;
0000e6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.234|
;;;282    
;;;283    	g_execArg = 0;
;;;284    
;;;285    	if (progNum==0) // default program!
;;;286    
;;;287    	{
;;;288    		uint8_t program;
;;;289    		prm_get("Default program", &program, END);
;;;290    		if (program==0 || program>EXEC_MAX_PROGS)
;;;291    			g_program = 0;
;;;292    		if (g_progTable[program-1]!=NULL)
;;;293    			g_program = program-1;
;;;294    	}
;;;295      	else
;;;296    		g_program = progNum-1;
;;;297    	return exec_run();
;;;298    }
0000ea  bd38              POP      {r3-r5,pc}
                  |L1.236|
0000ec  2000              MOVS     r0,#0                 ;283
0000ee  49bd              LDR      r1,|L1.996|
0000f0  6008              STR      r0,[r1,#0]            ;283  ; g_execArg
0000f2  7820              LDRB     r0,[r4,#0]            ;285
0000f4  b9d8              CBNZ     r0,|L1.302|
0000f6  2200              MOVS     r2,#0                 ;289
0000f8  4669              MOV      r1,sp                 ;289
0000fa  a0a7              ADR      r0,|L1.920|
0000fc  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
000100  f89d0000          LDRB     r0,[sp,#0]            ;290
000104  b118              CBZ      r0,|L1.270|
000106  f89d0000          LDRB     r0,[sp,#0]            ;290
00010a  2808              CMP      r0,#8                 ;290
00010c  dd02              BLE      |L1.276|
                  |L1.270|
00010e  2000              MOVS     r0,#0                 ;291
000110  49b5              LDR      r1,|L1.1000|
000112  7008              STRB     r0,[r1,#0]            ;291
                  |L1.276|
000114  f89d0000          LDRB     r0,[sp,#0]            ;292
000118  1e40              SUBS     r0,r0,#1              ;292
00011a  49ae              LDR      r1,|L1.980|
00011c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;292
000120  b120              CBZ      r0,|L1.300|
000122  f89d0000          LDRB     r0,[sp,#0]            ;293
000126  1e40              SUBS     r0,r0,#1              ;293
000128  49af              LDR      r1,|L1.1000|
00012a  7008              STRB     r0,[r1,#0]            ;293
                  |L1.300|
00012c  e003              B        |L1.310|
                  |L1.302|
00012e  7820              LDRB     r0,[r4,#0]            ;296
000130  1e40              SUBS     r0,r0,#1              ;296
000132  49ad              LDR      r1,|L1.1000|
000134  7008              STRB     r0,[r1,#0]            ;296
                  |L1.310|
000136  f7fffffe          BL       _Z8exec_runv ; exec_run()
00013a  e7d6              B        |L1.234|
;;;299    
                          ENDP

                  _Z15exec_runprogArgRKhRKi PROC ; exec_runprogArg(const unsigned char&, const int&)
;;;300    int32_t exec_runprogArg(const uint8_t &progNum, const int32_t &arg)
00013c  b570              PUSH     {r4-r6,lr}
;;;301    {
00013e  4606              MOV      r6,r0
000140  460c              MOV      r4,r1
;;;302    	int32_t res = exec_runprog(progNum);
000142  4630              MOV      r0,r6
000144  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
000148  4605              MOV      r5,r0
;;;303    	if (res<0)
00014a  2d00              CMP      r5,#0
00014c  da01              BGE      |L1.338|
;;;304    		return res;
00014e  4628              MOV      r0,r5
                  |L1.336|
;;;305    
;;;306    	g_execArg = arg;
;;;307    	return 0;
;;;308    }
000150  bd70              POP      {r4-r6,pc}
                  |L1.338|
000152  49a4              LDR      r1,|L1.996|
000154  6820              LDR      r0,[r4,#0]            ;306
000156  6008              STR      r0,[r1,#0]            ;306  ; g_execArg
000158  2000              MOVS     r0,#0                 ;307
00015a  e7f9              B        |L1.336|
;;;309    
                          ENDP

                  _Z9exec_listv PROC ; exec_list()
;;;310    int32_t exec_list()
00015c  b510              PUSH     {r4,lr}
;;;311    {
;;;312    	int i;
;;;313    	for (i=0; g_progTable[i]; i++)
00015e  2400              MOVS     r4,#0
000160  e00c              B        |L1.380|
                  |L1.354|
;;;314    		cprintf("%d: %s, %s\n", i+1, g_progTable[i]->progName, g_progTable[i]->desc);
000162  489c              LDR      r0,|L1.980|
000164  f8500024          LDR      r0,[r0,r4,LSL #2]
000168  6843              LDR      r3,[r0,#4]
00016a  489a              LDR      r0,|L1.980|
00016c  f8500024          LDR      r0,[r0,r4,LSL #2]
000170  1c61              ADDS     r1,r4,#1
000172  6802              LDR      r2,[r0,#0]
000174  a09d              ADR      r0,|L1.1004|
000176  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
00017a  1c64              ADDS     r4,r4,#1              ;313
                  |L1.380|
00017c  4895              LDR      r0,|L1.980|
00017e  f8500024          LDR      r0,[r0,r4,LSL #2]     ;313
000182  2800              CMP      r0,#0                 ;313
000184  d1ed              BNE      |L1.354|
;;;315    
;;;316     	return 0;
;;;317    }
000186  bd10              POP      {r4,pc}
;;;318    
                          ENDP

                  _Z12exec_versionP5Chirp PROC ; exec_version(Chirp*)
;;;319    int32_t exec_version(Chirp *chirp)
000188  b510              PUSH     {r4,lr}
;;;320    {
00018a  b086              SUB      sp,sp,#0x18
00018c  4604              MOV      r4,r0
;;;321    	uint16_t ver[] = {FW_MAJOR_VER, FW_MINOR_VER, FW_BUILD_VER};
00018e  499a              LDR      r1,|L1.1016|
000190  c903              LDM      r1,{r0,r1}
000192  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;322    
;;;323    	cprintf("Pixy firmware version %d.%d.%d\n", ver[0], ver[1], ver[2]);
000196  f8bd3014          LDRH     r3,[sp,#0x14]
00019a  f8bd2012          LDRH     r2,[sp,#0x12]
00019e  f8bd1010          LDRH     r1,[sp,#0x10]
0001a2  a096              ADR      r0,|L1.1020|
0001a4  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
;;;324    	if (chirp)
0001a8  b154              CBZ      r4,|L1.448|
;;;325    		CRP_RETURN(chirp, UINTS16(sizeof(ver), ver), END);
0001aa  2000              MOVS     r0,#0
0001ac  aa04              ADD      r2,sp,#0x10
0001ae  e9cd2000          STRD     r2,r0,[sp,#0]
0001b2  2306              MOVS     r3,#6
0001b4  2282              MOVS     r2,#0x82
0001b6  4601              MOV      r1,r0
0001b8  9002              STR      r0,[sp,#8]
0001ba  4620              MOV      r0,r4
0001bc  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.448|
;;;326    
;;;327    	return 0;
0001c0  2000              MOVS     r0,#0
;;;328    }
0001c2  b006              ADD      sp,sp,#0x18
0001c4  bd10              POP      {r4,pc}
;;;329    
                          ENDP

                  _Z14exec_getActionRKtP5Chirp PROC ; exec_getAction(const unsigned short&, Chirp*)
;;;330    int32_t exec_getAction(const uint16_t &index, Chirp *chirp)
0001c6  b57f              PUSH     {r0-r6,lr}
;;;331    {
0001c8  4604              MOV      r4,r0
0001ca  460d              MOV      r5,r1
;;;332    	int n = sizeof(actions)/sizeof(ActionScriptlet);
0001cc  2612              MOVS     r6,#0x12
;;;333    
;;;334    	if (index>=n)
0001ce  8820              LDRH     r0,[r4,#0]
0001d0  42b0              CMP      r0,r6
0001d2  db03              BLT      |L1.476|
;;;335    		return -1;
0001d4  f04f30ff          MOV      r0,#0xffffffff
                  |L1.472|
;;;336    
;;;337    	if (chirp)
;;;338    		CRP_RETURN(chirp, STRING(actions[index].action), STRING(actions[index].scriptlet), END);
;;;339    
;;;340    	return 0;		
;;;341    }
0001d8  b004              ADD      sp,sp,#0x10
0001da  bd70              POP      {r4-r6,pc}
                  |L1.476|
0001dc  b19d              CBZ      r5,|L1.518|
0001de  2100              MOVS     r1,#0                 ;338
0001e0  8820              LDRH     r0,[r4,#0]            ;338
0001e2  4b8e              LDR      r3,|L1.1052|
0001e4  eb0300c0          ADD      r0,r3,r0,LSL #3       ;338
0001e8  6840              LDR      r0,[r0,#4]            ;338
0001ea  23a1              MOVS     r3,#0xa1              ;338
0001ec  e9cd0101          STRD     r0,r1,[sp,#4]         ;338
0001f0  9300              STR      r3,[sp,#0]            ;338
0001f2  9103              STR      r1,[sp,#0xc]          ;338
0001f4  8820              LDRH     r0,[r4,#0]            ;338
0001f6  4989              LDR      r1,|L1.1052|
0001f8  f8513030          LDR      r3,[r1,r0,LSL #3]     ;338
0001fc  22a1              MOVS     r2,#0xa1              ;338
0001fe  2100              MOVS     r1,#0                 ;338
000200  4628              MOV      r0,r5                 ;338
000202  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.518|
000206  2000              MOVS     r0,#0                 ;340
000208  e7e6              B        |L1.472|
;;;342    
                          ENDP

                  _Z10exec_runM0h PROC ; exec_runM0(unsigned char)
;;;343    int exec_runM0(uint8_t prog)
00020a  b510              PUSH     {r4,lr}
;;;344    {
00020c  b086              SUB      sp,sp,#0x18
00020e  4604              MOV      r4,r0
;;;345    	int responseInt;
;;;346    
;;;347    	g_chirpM0->callSync(g_runM0, UINT8(prog), END_OUT_ARGS,
000210  2000              MOVS     r0,#0
000212  aa05              ADD      r2,sp,#0x14
000214  e9cd0201          STRD     r0,r2,[sp,#4]
000218  9003              STR      r0,[sp,#0xc]
00021a  2301              MOVS     r3,#1
00021c  9400              STR      r4,[sp,#0]
00021e  9004              STR      r0,[sp,#0x10]
000220  4865              LDR      r0,|L1.952|
000222  f9b02000          LDRSH    r2,[r0,#0]  ; g_runM0
000226  2100              MOVS     r1,#0
000228  4862              LDR      r0,|L1.948|
00022a  6800              LDR      r0,[r0,#0]  ; g_chirpM0
00022c  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;348    		&responseInt, END_IN_ARGS);
;;;349    
;;;350    	return responseInt;
000230  9805              LDR      r0,[sp,#0x14]
;;;351    }
000232  b006              ADD      sp,sp,#0x18
000234  bd10              POP      {r4,pc}
;;;352    
                          ENDP

                  _Z11exec_stopM0v PROC ; exec_stopM0()
;;;353    int exec_stopM0()
000236  b51f              PUSH     {r0-r4,lr}
;;;354    {
;;;355    	int responseInt;
;;;356    
;;;357    	g_chirpM0->callSync(g_stopM0, END_OUT_ARGS,
000238  2000              MOVS     r0,#0
00023a  aa03              ADD      r2,sp,#0xc
00023c  e9cd2000          STRD     r2,r0,[sp,#0]
000240  4603              MOV      r3,r0
000242  9002              STR      r0,[sp,#8]
000244  4862              LDR      r0,|L1.976|
000246  f9b02000          LDRSH    r2,[r0,#0]  ; g_stopM0
00024a  2100              MOVS     r1,#0
00024c  4859              LDR      r0,|L1.948|
00024e  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000250  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;358    		&responseInt, END_IN_ARGS);
;;;359    
;;;360    	return responseInt;
000254  9803              LDR      r0,[sp,#0xc]
;;;361    }
000256  b004              ADD      sp,sp,#0x10
000258  bd10              POP      {r4,pc}
;;;362    
                          ENDP

                  _Z15exec_loadParamsv PROC ; exec_loadParams()
;;;391    
;;;392    void exec_loadParams()
00025a  b510              PUSH     {r4,lr}
;;;393    {
;;;394     	cc_loadParams();
00025c  f7fffffe          BL       _Z13cc_loadParamsv ; cc_loadParams()
;;;395    	ser_loadParams();
000260  f7fffffe          BL       _Z14ser_loadParamsv ; ser_loadParams()
;;;396    	cam_loadParams();
000264  f7fffffe          BL       _Z14cam_loadParamsv ; cam_loadParams()
;;;397    	rcs_loadParams();
000268  f7fffffe          BL       _Z14rcs_loadParamsv ; rcs_loadParams()
;;;398    
;;;399    	ptLoadParams();
00026c  f7fffffe          BL       _Z12ptLoadParamsv ; ptLoadParams()
;;;400    	//chaseLoadParams();
;;;401    
;;;402    	loadParams(); // local
000270  f7fffffe          BL       _Z10loadParamsv ; loadParams()
;;;403    }
000274  bd10              POP      {r4,pc}
;;;404    
                          ENDP

                  _Z13exec_periodicv PROC ; exec_periodic()
;;;362    
;;;363    void exec_periodic()
000276  b510              PUSH     {r4,lr}
;;;364    {
;;;365    	periodic();
000278  f7fffffe          BL       _Z8periodicv ; periodic()
;;;366    	g_override = g_bMachine->handleSignature();
00027c  484a              LDR      r0,|L1.936|
00027e  6800              LDR      r0,[r0,#0]  ; g_bMachine
000280  f7fffffe          BL       _ZN13ButtonMachine15handleSignatureEv ; ButtonMachine::handleSignature()
000284  4955              LDR      r1,|L1.988|
000286  7008              STRB     r0,[r1,#0]
;;;367    	if (prm_dirty())
000288  f7fffffe          BL       _Z9prm_dirtyv ; prm_dirty()
00028c  b108              CBZ      r0,|L1.658|
;;;368    		exec_loadParams();
00028e  f7fffffe          BL       _Z15exec_loadParamsv ; exec_loadParams()
                  |L1.658|
;;;369    }
000292  bd10              POP      {r4,pc}
;;;370    
                          ENDP

                  _Z11exec_selectv PROC ; exec_select()
;;;371    void exec_select()
000294  b538              PUSH     {r3-r5,lr}
;;;372    {
;;;373    	uint8_t prog, progs;
;;;374    
;;;375    	// count number of progs
;;;376    	for (progs=0; g_progTable[progs]; progs++);
000296  2400              MOVS     r4,#0
000298  e001              B        |L1.670|
                  |L1.666|
00029a  1c60              ADDS     r0,r4,#1
00029c  b2c4              UXTB     r4,r0
                  |L1.670|
00029e  484d              LDR      r0,|L1.980|
0002a0  f8500024          LDR      r0,[r0,r4,LSL #2]
0002a4  2800              CMP      r0,#0
0002a6  d1f8              BNE      |L1.666|
;;;377    
;;;378    	// select using button state machine
;;;379    	prog = g_bMachine->selectProgram(progs);
0002a8  4621              MOV      r1,r4
0002aa  483f              LDR      r0,|L1.936|
0002ac  6800              LDR      r0,[r0,#0]  ; g_bMachine
0002ae  f7fffffe          BL       _ZN13ButtonMachine13selectProgramEi ; ButtonMachine::selectProgram(int)
0002b2  b2c0              UXTB     r0,r0
0002b4  9000              STR      r0,[sp,#0]
;;;380    
;;;381    	// set it up to run
;;;382    	exec_runprog(prog);
0002b6  4668              MOV      r0,sp
0002b8  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;383    }
0002bc  bd38              POP      {r3-r5,pc}
;;;384    
                          ENDP

                  _Z9exec_loopv PROC ; exec_loop()
;;;405    
;;;406    void exec_loop()
0002be  b51c              PUSH     {r2-r4,lr}
;;;407    {
;;;408    	uint8_t state = 0;
0002c0  2500              MOVS     r5,#0
;;;409    	bool prevConnected = false;
0002c2  2600              MOVS     r6,#0
;;;410    	bool connected;
;;;411    
;;;412    	exec_select();
0002c4  f7fffffe          BL       _Z11exec_selectv ; exec_select()
;;;413    
;;;414    	while(1)
0002c8  e063              B        |L1.914|
                  |L1.714|
;;;415    	{
;;;416    		connected = g_chirpUsb->connected();
0002ca  4855              LDR      r0,|L1.1056|
0002cc  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0002ce  f7fffffe          BL       _ZN5Chirp9connectedEv ; Chirp::connected()
0002d2  4604              MOV      r4,r0
;;;417    
;;;418    		exec_periodic();
0002d4  f7fffffe          BL       _Z13exec_periodicv ; exec_periodic()
;;;419    
;;;420    		switch (state)
0002d8  2d05              CMP      r5,#5
0002da  d256              BCS      |L1.906|
0002dc  e8dff005          TBB      [pc,r5]
0002e0  03153439          DCB      0x03,0x15,0x34,0x39
0002e4  4200              DCB      0x42,0x00
;;;421    		{
;;;422    		case 0:	// setup state
;;;423    			led_set(0);  // turn off any stray led
0002e6  2000              MOVS     r0,#0
0002e8  9001              STR      r0,[sp,#4]
0002ea  a801              ADD      r0,sp,#4
0002ec  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;424    			if ((*g_progTable[g_program]->setup)()<0)
0002f0  4938              LDR      r1,|L1.980|
0002f2  4a3d              LDR      r2,|L1.1000|
0002f4  7812              LDRB     r2,[r2,#0]  ; g_program
0002f6  f8511022          LDR      r1,[r1,r2,LSL #2]
0002fa  6888              LDR      r0,[r1,#8]
0002fc  4780              BLX      r0
0002fe  2800              CMP      r0,#0
000300  da01              BGE      |L1.774|
;;;425    				state = 3; // stop state
000302  2503              MOVS     r5,#3
000304  e000              B        |L1.776|
                  |L1.774|
;;;426    			else 
;;;427    				state = 1; // loop state
000306  2501              MOVS     r5,#1
                  |L1.776|
;;;428    			break;
000308  e041              B        |L1.910|
;;;429    
;;;430    		case 1:	 // loop state
;;;431    			if (g_override)
00030a  4834              LDR      r0,|L1.988|
00030c  7800              LDRB     r0,[r0,#0]  ; g_override
00030e  b118              CBZ      r0,|L1.792|
;;;432    			{
;;;433    				// need to stop M0 because it's using the same memory and can possibly interfere.
;;;434    				// For example if we try to grab a raw frame while M0 is running (gathering RLS values)
;;;435    				// M0 could overwrite the frame memory with RLS scratch data.
;;;436    				exec_stopM0(); 
000310  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
;;;437    				state = 2; // override state
000314  2502              MOVS     r5,#2
000316  e016              B        |L1.838|
                  |L1.792|
;;;438    			}
;;;439    			else if (!g_run  || (*g_progTable[g_program]->loop)()<0)
000318  4831              LDR      r0,|L1.992|
00031a  7800              LDRB     r0,[r0,#0]  ; g_run
00031c  b140              CBZ      r0,|L1.816|
00031e  492d              LDR      r1,|L1.980|
000320  4a31              LDR      r2,|L1.1000|
000322  7812              LDRB     r2,[r2,#0]  ; g_program
000324  f8511022          LDR      r1,[r1,r2,LSL #2]
000328  68c8              LDR      r0,[r1,#0xc]
00032a  4780              BLX      r0
00032c  2800              CMP      r0,#0
00032e  da01              BGE      |L1.820|
                  |L1.816|
;;;440    				state = 3; // stop state
000330  2503              MOVS     r5,#3
000332  e008              B        |L1.838|
                  |L1.820|
;;;441    			else if (prevConnected && !connected) // if we disconnect from pixymon, revert back to default program
000334  b13e              CBZ      r6,|L1.838|
000336  b934              CBNZ     r4,|L1.838|
;;;442    			{
;;;443    				exec_runprog(0); // run default program
000338  2000              MOVS     r0,#0
00033a  9000              STR      r0,[sp,#0]
00033c  4668              MOV      r0,sp
00033e  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;444    				state = 0; // setup state
000342  2500              MOVS     r5,#0
;;;445    			}
000344  bf00              NOP      
                  |L1.838|
;;;446    			break;
000346  e022              B        |L1.910|
;;;447    
;;;448    		case 2:	// override state
;;;449    			if (!g_override) 
000348  4824              LDR      r0,|L1.988|
00034a  7800              LDRB     r0,[r0,#0]  ; g_override
00034c  b900              CBNZ     r0,|L1.848|
;;;450    				state = 0; // back to setup state
00034e  2500              MOVS     r5,#0
                  |L1.848|
;;;451    			break;
000350  e01d              B        |L1.910|
;;;452    
;;;453    		case 3:	// stop state
;;;454    			// set variable to indicate we've stopped
;;;455    			g_run = false;
000352  2000              MOVS     r0,#0
000354  4922              LDR      r1,|L1.992|
000356  7008              STRB     r0,[r1,#0]
;;;456    			g_running = false;
000358  491f              LDR      r1,|L1.984|
00035a  7008              STRB     r0,[r1,#0]
;;;457    			// stop M0
;;;458    			exec_stopM0();
00035c  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
;;;459    			state = 4; // wait for run state
000360  2504              MOVS     r5,#4
;;;460    			break;
000362  e014              B        |L1.910|
;;;461    
;;;462    		case 4:	// wait for run state
;;;463    			if (g_run) 
000364  481e              LDR      r0,|L1.992|
000366  7800              LDRB     r0,[r0,#0]  ; g_run
000368  b118              CBZ      r0,|L1.882|
;;;464    			{
;;;465    				exec_run();
00036a  f7fffffe          BL       _Z8exec_runv ; exec_run()
;;;466    				state = 0; // back to setup state
00036e  2500              MOVS     r5,#0
000370  e00a              B        |L1.904|
                  |L1.882|
;;;467    			}
;;;468    			else if (!connected || !USB_Configuration) // if we disconnect from pixy or unplug cable, revert back to default program
000372  b114              CBZ      r4,|L1.890|
000374  482b              LDR      r0,|L1.1060|
000376  7800              LDRB     r0,[r0,#0]  ; USB_Configuration
000378  b930              CBNZ     r0,|L1.904|
                  |L1.890|
;;;469    			{
;;;470    				exec_runprog(0); // run default program
00037a  2000              MOVS     r0,#0
00037c  9000              STR      r0,[sp,#0]
00037e  4668              MOV      r0,sp
000380  f7fffffe          BL       _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
;;;471    				state = 0;	// back to setup state
000384  2500              MOVS     r5,#0
;;;472    			}
000386  bf00              NOP      
                  |L1.904|
;;;473    			break;
000388  e001              B        |L1.910|
                  |L1.906|
;;;474    
;;;475    		default:
;;;476    			state = 3; // stop state				
00038a  2503              MOVS     r5,#3
00038c  bf00              NOP                            ;420
                  |L1.910|
00038e  bf00              NOP                            ;428
;;;477    		}
;;;478    
;;;479    		prevConnected = connected;
000390  4626              MOV      r6,r4
                  |L1.914|
000392  e79a              B        |L1.714|
;;;480    	}
;;;481    }
                          ENDP

                  |L1.916|
                          DCD      ||.conststring||+0x8b8
                  |L1.920|
000398  44656661          DCB      "Default program",0
00039c  756c7420
0003a0  70726f67
0003a4  72616d00
                  |L1.936|
                          DCD      g_bMachine
                  |L1.940|
                          DCD      g_module
                  |L1.944|
0003b0  72756e00          DCB      "run",0
                  |L1.948|
                          DCD      g_chirpM0
                  |L1.952|
                          DCD      g_runM0
                  |L1.956|
0003bc  72756e6e          DCB      "running",0
0003c0  696e6700
                  |L1.964|
                          DCD      g_runningM0
                  |L1.968|
0003c8  73746f70          DCB      "stop",0
0003cc  00      
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L1.976|
                          DCD      g_stopM0
                  |L1.980|
                          DCD      g_progTable
                  |L1.984|
                          DCD      g_running
                  |L1.988|
                          DCD      g_override
                  |L1.992|
                          DCD      g_run
                  |L1.996|
                          DCD      g_execArg
                  |L1.1000|
                          DCD      g_program
                  |L1.1004|
0003ec  25643a20          DCB      "%d: %s, %s\n",0
0003f0  25732c20
0003f4  25730a00
                  |L1.1016|
                          DCD      ||.constdata||+0x168
                  |L1.1020|
0003fc  50697879          DCB      "Pixy firmware version %d.%d.%d\n",0
000400  20666972
000404  6d776172
000408  65207665
00040c  7273696f
000410  6e202564
000414  2e25642e
000418  25640a00
                  |L1.1052|
                          DCD      actions
                  |L1.1056|
                          DCD      g_chirpUsb
                  |L1.1060|
                          DCD      USB_Configuration

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_progTable
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z12exec_runningv ; exec_running()
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x64
                          DCD      _Z9exec_stopv ; exec_stop()
000020  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0xa8
                          DCD      _Z8exec_runv ; exec_run()
000038  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0xec
                          DCD      _Z12exec_runprogRKh ; exec_runprog(const unsigned char&)
000050  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xf4
                          DCD      ||.conststring||+0x148
                          DCD      _Z15exec_runprogArgRKhRKi ; exec_runprogArg(const unsigned char&, const int&)
000068  01040000          DCB      0x01,0x04,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x154
                          DCD      ||.conststring||+0x1dc
                          DCD      _Z9exec_listv ; exec_list()
000080  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1e4
                          DCD      ||.conststring||+0x210
                          DCD      _Z12exec_versionP5Chirp ; exec_version(Chirp*)
000098  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x218
                          DCD      ||.conststring||+0x284
                          DCD      _Z14exec_getActionRKtP5Chirp ; exec_getAction(const unsigned short&, Chirp*)
0000b0  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x290
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  actions
                          DCD      ||.conststring||+0x320
                          DCD      ||.conststring||+0x334
                          DCD      ||.conststring||+0x340
                          DCD      ||.conststring||+0x354
                          DCD      ||.conststring||+0x398
                          DCD      ||.conststring||+0x3ac
                          DCD      ||.conststring||+0x3f0
                          DCD      ||.conststring||+0x404
                          DCD      ||.conststring||+0x448
                          DCD      ||.conststring||+0x45c
                          DCD      ||.conststring||+0x4a0
                          DCD      ||.conststring||+0x4b4
                          DCD      ||.conststring||+0x4f8
                          DCD      ||.conststring||+0x50c
                          DCD      ||.conststring||+0x550
                          DCD      ||.conststring||+0x564
                          DCD      ||.conststring||+0x5a8
                          DCD      ||.conststring||+0x5c0
                          DCD      ||.conststring||+0x604
                          DCD      ||.conststring||+0x61c
                          DCD      ||.conststring||+0x660
                          DCD      ||.conststring||+0x678
                          DCD      ||.conststring||+0x6bc
                          DCD      ||.conststring||+0x6d4
                          DCD      ||.conststring||+0x718
                          DCD      ||.conststring||+0x730
                          DCD      ||.conststring||+0x774
                          DCD      ||.conststring||+0x78c
                          DCD      ||.conststring||+0x7d0
                          DCD      ||.conststring||+0x7e8
                          DCD      ||.conststring||+0x82c
                          DCD      ||.conststring||+0x840
                          DCD      ||.conststring||+0x854
                          DCD      ||.conststring||+0x86c
                          DCD      ||.conststring||+0x880
                          DCD      ||.conststring||+0x8a4
000168  00010000          DCW      0x0001,0x0000
00016c  0003              DCW      0x0003

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  72756e6e          DCB      "running",0
000004  696e6700
000008  49732061          DCB      "Is a program running?@r 1 if a program is running, 2 if"
00000c  2070726f
000010  6772616d
000014  2072756e
000018  6e696e67
00001c  3f407220
000020  31206966
000024  20612070
000028  726f6772
00002c  616d2069
000030  73207275
000034  6e6e696e
000038  672c2032
00003c  206966  
00003f  2072756e          DCB      " running in ""forced"" state, 0 if not",0
000043  6e696e67
000047  20696e20
00004b  22666f72
00004f  63656422
000053  20737461
000057  74652c20
00005b  30206966
00005f  206e6f74
000063  00      
000064  73746f70          DCB      "stop",0
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
00006c  53746f70          DCB      "Stop execution of the current program@r always returns "
000070  20657865
000074  63757469
000078  6f6e206f
00007c  66207468
000080  65206375
000084  7272656e
000088  74207072
00008c  6f677261
000090  6d407220
000094  616c7761
000098  79732072
00009c  65747572
0000a0  6e7320  
0000a3  3000              DCB      "0",0
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
0000a8  72756e00          DCB      "run",0
0000ac  52756e20          DCB      "Run the current program@r returns 0 if successful, -1 o"
0000b0  74686520
0000b4  63757272
0000b8  656e7420
0000bc  70726f67
0000c0  72616d40
0000c4  72207265
0000c8  7475726e
0000cc  73203020
0000d0  69662073
0000d4  75636365
0000d8  73736675
0000dc  6c2c202d
0000e0  31206f  
0000e3  74686572          DCB      "therwise",0
0000e7  77697365
0000eb  00      
0000ec  72756e70          DCB      "runprog",0
0000f0  726f6700
0000f4  52756e20          DCB      "Run the specified program@p program number@r returns 0 "
0000f8  74686520
0000fc  73706563
000100  69666965
000104  64207072
000108  6f677261
00010c  6d407020
000110  70726f67
000114  72616d20
000118  6e756d62
00011c  65724072
000120  20726574
000124  75726e73
000128  203020  
00012b  69662073          DCB      "if successful, -1 otherwise",0
00012f  75636365
000133  73736675
000137  6c2c202d
00013b  31206f74
00013f  68657277
000143  69736500
000147  00                DCB      0
000148  72756e70          DCB      "runprogArg",0
00014c  726f6741
000150  726700  
000153  00                DCB      0
000154  52756e20          DCB      "Run the specified program with an argument@p program nu"
000158  74686520
00015c  73706563
000160  69666965
000164  64207072
000168  6f677261
00016c  6d207769
000170  74682061
000174  6e206172
000178  67756d65
00017c  6e744070
000180  2070726f
000184  6772616d
000188  206e75  
00018b  6d626572          DCB      "mber@p argument to be passed to program@r returns 0 if "
00018f  40702061
000193  7267756d
000197  656e7420
00019b  746f2062
00019f  65207061
0001a3  73736564
0001a7  20746f20
0001ab  70726f67
0001af  72616d40
0001b3  72207265
0001b7  7475726e
0001bb  73203020
0001bf  696620  
0001c2  73756363          DCB      "successful, -1 otherwise",0
0001c6  65737366
0001ca  756c2c20
0001ce  2d31206f
0001d2  74686572
0001d6  77697365
0001da  00      
0001db  00                DCB      0
0001dc  70726f67          DCB      "progs",0
0001e0  7300    
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  4c697374          DCB      "List available programs@r always returns 0",0
0001e8  20617661
0001ec  696c6162
0001f0  6c652070
0001f4  726f6772
0001f8  616d7340
0001fc  7220616c
000200  77617973
000204  20726574
000208  75726e73
00020c  203000  
00020f  00                DCB      0
000210  76657273          DCB      "version",0
000214  696f6e00
000218  47657420          DCB      "Get firmware version@r always returns 0 and an array of"
00021c  6669726d
000220  77617265
000224  20766572
000228  73696f6e
00022c  40722061
000230  6c776179
000234  73207265
000238  7475726e
00023c  73203020
000240  616e6420
000244  616e2061
000248  72726179
00024c  206f66  
00024f  20332075          DCB      " 3 uint16 values: major, minor, and build versions.",0
000253  696e7431
000257  36207661
00025b  6c756573
00025f  3a206d61
000263  6a6f722c
000267  206d696e
00026b  6f722c20
00026f  616e6420
000273  6275696c
000277  64207665
00027b  7273696f
00027f  6e732e00
000283  00                DCB      0
000284  67657441          DCB      "getAction",0
000288  6374696f
00028c  6e00    
00028e  00                DCB      0
00028f  00                DCB      0
000290  47657420          DCB      "Get the action scriptlet assocated with the index argum"
000294  74686520
000298  61637469
00029c  6f6e2073
0002a0  63726970
0002a4  746c6574
0002a8  20617373
0002ac  6f636174
0002b0  65642077
0002b4  69746820
0002b8  74686520
0002bc  696e6465
0002c0  78206172
0002c4  67756d  
0002c7  656e7440          DCB      "ent@p action index@r returns 0 if successful, -1 otherw"
0002cb  70206163
0002cf  74696f6e
0002d3  20696e64
0002d7  65784072
0002db  20726574
0002df  75726e73
0002e3  20302069
0002e7  66207375
0002eb  63636573
0002ef  7366756c
0002f3  2c202d31
0002f7  206f7468
0002fb  657277  
0002fe  6973652c          DCB      "ise, or if index is out of range",0
000302  206f7220
000306  69662069
00030a  6e646578
00030e  20697320
000312  6f757420
000316  6f662072
00031a  616e6765
00031e  00      
00031f  00                DCB      0
000320  52756e20          DCB      "Run pan/tilt demo",0
000324  70616e2f
000328  74696c74
00032c  2064656d
000330  6f00    
000332  00                DCB      0
000333  00                DCB      0
000334  72756e70          DCB      "runprog 2\n",0
000338  726f6720
00033c  320a00  
00033f  00                DCB      0
000340  53657420          DCB      "Set signature 1...",0
000344  7369676e
000348  61747572
00034c  6520312e
000350  2e2e00  
000353  00                DCB      0
000354  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 1\nrun"
000358  67657446
00035c  72616d65
000360  20307832
000364  31203020
000368  30203332
00036c  30203230
000370  300a6363
000374  5f736574
000378  53696752
00037c  6567696f
000380  6e203020
000384  310a7275
000388  6e      
000389  70726f67          DCB      "progArg 8 1\n",0
00038d  41726720
000391  3820310a
000395  00      
000396  00                DCB      0
000397  00                DCB      0
000398  53657420          DCB      "Set signature 2...",0
00039c  7369676e
0003a0  61747572
0003a4  6520322e
0003a8  2e2e00  
0003ab  00                DCB      0
0003ac  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 2\nrun"
0003b0  67657446
0003b4  72616d65
0003b8  20307832
0003bc  31203020
0003c0  30203332
0003c4  30203230
0003c8  300a6363
0003cc  5f736574
0003d0  53696752
0003d4  6567696f
0003d8  6e203020
0003dc  320a7275
0003e0  6e      
0003e1  70726f67          DCB      "progArg 8 1\n",0
0003e5  41726720
0003e9  3820310a
0003ed  00      
0003ee  00                DCB      0
0003ef  00                DCB      0
0003f0  53657420          DCB      "Set signature 3...",0
0003f4  7369676e
0003f8  61747572
0003fc  6520332e
000400  2e2e00  
000403  00                DCB      0
000404  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 3\nrun"
000408  67657446
00040c  72616d65
000410  20307832
000414  31203020
000418  30203332
00041c  30203230
000420  300a6363
000424  5f736574
000428  53696752
00042c  6567696f
000430  6e203020
000434  330a7275
000438  6e      
000439  70726f67          DCB      "progArg 8 1\n",0
00043d  41726720
000441  3820310a
000445  00      
000446  00                DCB      0
000447  00                DCB      0
000448  53657420          DCB      "Set signature 4...",0
00044c  7369676e
000450  61747572
000454  6520342e
000458  2e2e00  
00045b  00                DCB      0
00045c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 4\nrun"
000460  67657446
000464  72616d65
000468  20307832
00046c  31203020
000470  30203332
000474  30203230
000478  300a6363
00047c  5f736574
000480  53696752
000484  6567696f
000488  6e203020
00048c  340a7275
000490  6e      
000491  70726f67          DCB      "progArg 8 1\n",0
000495  41726720
000499  3820310a
00049d  00      
00049e  00                DCB      0
00049f  00                DCB      0
0004a0  53657420          DCB      "Set signature 5...",0
0004a4  7369676e
0004a8  61747572
0004ac  6520352e
0004b0  2e2e00  
0004b3  00                DCB      0
0004b4  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 5\nrun"
0004b8  67657446
0004bc  72616d65
0004c0  20307832
0004c4  31203020
0004c8  30203332
0004cc  30203230
0004d0  300a6363
0004d4  5f736574
0004d8  53696752
0004dc  6567696f
0004e0  6e203020
0004e4  350a7275
0004e8  6e      
0004e9  70726f67          DCB      "progArg 8 1\n",0
0004ed  41726720
0004f1  3820310a
0004f5  00      
0004f6  00                DCB      0
0004f7  00                DCB      0
0004f8  53657420          DCB      "Set signature 6...",0
0004fc  7369676e
000500  61747572
000504  6520362e
000508  2e2e00  
00050b  00                DCB      0
00050c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 6\nrun"
000510  67657446
000514  72616d65
000518  20307832
00051c  31203020
000520  30203332
000524  30203230
000528  300a6363
00052c  5f736574
000530  53696752
000534  6567696f
000538  6e203020
00053c  360a7275
000540  6e      
000541  70726f67          DCB      "progArg 8 1\n",0
000545  41726720
000549  3820310a
00054d  00      
00054e  00                DCB      0
00054f  00                DCB      0
000550  53657420          DCB      "Set signature 7...",0
000554  7369676e
000558  61747572
00055c  6520372e
000560  2e2e00  
000563  00                DCB      0
000564  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 0 7\nrun"
000568  67657446
00056c  72616d65
000570  20307832
000574  31203020
000578  30203332
00057c  30203230
000580  300a6363
000584  5f736574
000588  53696752
00058c  6567696f
000590  6e203020
000594  370a7275
000598  6e      
000599  70726f67          DCB      "progArg 8 1\n",0
00059d  41726720
0005a1  3820310a
0005a5  00      
0005a6  00                DCB      0
0005a7  00                DCB      0
0005a8  53657420          DCB      "Set CC signature 1...",0
0005ac  43432073
0005b0  69676e61
0005b4  74757265
0005b8  20312e2e
0005bc  2e00    
0005be  00                DCB      0
0005bf  00                DCB      0
0005c0  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 1\nrun"
0005c4  67657446
0005c8  72616d65
0005cc  20307832
0005d0  31203020
0005d4  30203332
0005d8  30203230
0005dc  300a6363
0005e0  5f736574
0005e4  53696752
0005e8  6567696f
0005ec  6e203120
0005f0  310a7275
0005f4  6e      
0005f5  70726f67          DCB      "progArg 8 1\n",0
0005f9  41726720
0005fd  3820310a
000601  00      
000602  00                DCB      0
000603  00                DCB      0
000604  53657420          DCB      "Set CC signature 2...",0
000608  43432073
00060c  69676e61
000610  74757265
000614  20322e2e
000618  2e00    
00061a  00                DCB      0
00061b  00                DCB      0
00061c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 2\nrun"
000620  67657446
000624  72616d65
000628  20307832
00062c  31203020
000630  30203332
000634  30203230
000638  300a6363
00063c  5f736574
000640  53696752
000644  6567696f
000648  6e203120
00064c  320a7275
000650  6e      
000651  70726f67          DCB      "progArg 8 1\n",0
000655  41726720
000659  3820310a
00065d  00      
00065e  00                DCB      0
00065f  00                DCB      0
000660  53657420          DCB      "Set CC signature 3...",0
000664  43432073
000668  69676e61
00066c  74757265
000670  20332e2e
000674  2e00    
000676  00                DCB      0
000677  00                DCB      0
000678  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 3\nrun"
00067c  67657446
000680  72616d65
000684  20307832
000688  31203020
00068c  30203332
000690  30203230
000694  300a6363
000698  5f736574
00069c  53696752
0006a0  6567696f
0006a4  6e203120
0006a8  330a7275
0006ac  6e      
0006ad  70726f67          DCB      "progArg 8 1\n",0
0006b1  41726720
0006b5  3820310a
0006b9  00      
0006ba  00                DCB      0
0006bb  00                DCB      0
0006bc  53657420          DCB      "Set CC signature 4...",0
0006c0  43432073
0006c4  69676e61
0006c8  74757265
0006cc  20342e2e
0006d0  2e00    
0006d2  00                DCB      0
0006d3  00                DCB      0
0006d4  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 4\nrun"
0006d8  67657446
0006dc  72616d65
0006e0  20307832
0006e4  31203020
0006e8  30203332
0006ec  30203230
0006f0  300a6363
0006f4  5f736574
0006f8  53696752
0006fc  6567696f
000700  6e203120
000704  340a7275
000708  6e      
000709  70726f67          DCB      "progArg 8 1\n",0
00070d  41726720
000711  3820310a
000715  00      
000716  00                DCB      0
000717  00                DCB      0
000718  53657420          DCB      "Set CC signature 5...",0
00071c  43432073
000720  69676e61
000724  74757265
000728  20352e2e
00072c  2e00    
00072e  00                DCB      0
00072f  00                DCB      0
000730  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 5\nrun"
000734  67657446
000738  72616d65
00073c  20307832
000740  31203020
000744  30203332
000748  30203230
00074c  300a6363
000750  5f736574
000754  53696752
000758  6567696f
00075c  6e203120
000760  350a7275
000764  6e      
000765  70726f67          DCB      "progArg 8 1\n",0
000769  41726720
00076d  3820310a
000771  00      
000772  00                DCB      0
000773  00                DCB      0
000774  53657420          DCB      "Set CC signature 6...",0
000778  43432073
00077c  69676e61
000780  74757265
000784  20362e2e
000788  2e00    
00078a  00                DCB      0
00078b  00                DCB      0
00078c  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 6\nrun"
000790  67657446
000794  72616d65
000798  20307832
00079c  31203020
0007a0  30203332
0007a4  30203230
0007a8  300a6363
0007ac  5f736574
0007b0  53696752
0007b4  6567696f
0007b8  6e203120
0007bc  360a7275
0007c0  6e      
0007c1  70726f67          DCB      "progArg 8 1\n",0
0007c5  41726720
0007c9  3820310a
0007cd  00      
0007ce  00                DCB      0
0007cf  00                DCB      0
0007d0  53657420          DCB      "Set CC signature 7...",0
0007d4  43432073
0007d8  69676e61
0007dc  74757265
0007e0  20372e2e
0007e4  2e00    
0007e6  00                DCB      0
0007e7  00                DCB      0
0007e8  63616d5f          DCB      "cam_getFrame 0x21 0 0 320 200\ncc_setSigRegion 1 7\nrun"
0007ec  67657446
0007f0  72616d65
0007f4  20307832
0007f8  31203020
0007fc  30203332
000800  30203230
000804  300a6363
000808  5f736574
00080c  53696752
000810  6567696f
000814  6e203120
000818  370a7275
00081c  6e      
00081d  70726f67          DCB      "progArg 8 1\n",0
000821  41726720
000825  3820310a
000829  00      
00082a  00                DCB      0
00082b  00                DCB      0
00082c  436c6561          DCB      "Clear signature...",0
000830  72207369
000834  676e6174
000838  7572652e
00083c  2e2e00  
00083f  00                DCB      0
000840  63635f63          DCB      "cc_clearSig\nrun\n",0
000844  6c656172
000848  5369670a
00084c  72756e0a
000850  00      
000851  00                DCB      0
000852  00                DCB      0
000853  00                DCB      0
000854  436c6561          DCB      "Clear all signatures",0
000858  7220616c
00085c  6c207369
000860  676e6174
000864  75726573
000868  00      
000869  00                DCB      0
00086a  00                DCB      0
00086b  00                DCB      0
00086c  63635f63          DCB      "cc_clearAllSig\nrun\n",0
000870  6c656172
000874  416c6c53
000878  69670a72
00087c  756e0a00
000880  52657374          DCB      "Restore default parameter values",0
000884  6f726520
000888  64656661
00088c  756c7420
000890  70617261
000894  6d657465
000898  72207661
00089c  6c756573
0008a0  00      
0008a1  00                DCB      0
0008a2  00                DCB      0
0008a3  00                DCB      0
0008a4  70726d5f          DCB      "prm_restore\nrun\n",0
0008a8  72657374
0008ac  6f72650a
0008b0  72756e0a
0008b4  00      
0008b5  00                DCB      0
0008b6  00                DCB      0
0008b7  00                DCB      0
0008b8  53656c65          DCB      "Selects the program number that's run by default upon p"
0008bc  63747320
0008c0  74686520
0008c4  70726f67
0008c8  72616d20
0008cc  6e756d62
0008d0  65722074
0008d4  68617427
0008d8  73207275
0008dc  6e206279
0008e0  20646566
0008e4  61756c74
0008e8  2075706f
0008ec  6e2070  
0008ef  6f776572          DCB      "ower-up. (default 0)",0
0008f3  2d75702e
0008f7  20286465
0008fb  6661756c
0008ff  74203029
000903  00      

                          AREA ||.data||, DATA, ALIGN=2

                  g_running
000000  00                DCB      0x00
                  g_run
000001  00                DCB      0x00
                  g_program
000002  00                DCB      0x00
                  g_override
000003  00                DCB      0x00
                  g_execArg
                          DCD      0x00000000
                  g_runM0
000008  ffff              DCW      0xffff
                  g_runningM0
00000a  ffff              DCW      0xffff
                  g_stopM0
00000c  ffff              DCW      0xffff
00000e  0000              DCB      0x00,0x00
                  g_bMachine
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "exec.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_exec_cpp_e0404fb8___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___8_exec_cpp_e0404fb8___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_exec_cpp_e0404fb8___Z7__REVSHi|
#line 144
|__asm___8_exec_cpp_e0404fb8___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
