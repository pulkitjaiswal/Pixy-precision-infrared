; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\blobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\blobs.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\blobs.crf ..\..\common\blobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN5BlobsC2EP6Qqueue                  ; Alternate entry point ; Blobs::Blobs__sub_object(Qqueue*)
                  _ZN5BlobsC1EP6Qqueue PROC ; Blobs::Blobs(Qqueue*)
;;;26     
;;;27     Blobs::Blobs(Qqueue *qq)
;;;28     {
;;;29         int i;
;;;30     
;;;31         m_mutex = false;
;;;32         m_minArea = MIN_AREA;
;;;33         m_maxBlobs = MAX_BLOBS;
;;;34         m_maxBlobsPerModel = MAX_BLOBS_PER_MODEL;
;;;35         m_mergeDist = MAX_MERGE_DIST;
;;;36     #ifdef PIXY
;;;37         m_maxCodedDist = MAX_CODED_DIST;
;;;38     #else
;;;39         m_maxCodedDist = MAX_CODED_DIST/2;
;;;40     #endif
;;;41         m_ccMode = ENABLED;
;;;42     
;;;43         m_qq = qq;
;;;44         m_blobs = new uint16_t[MAX_BLOBS*5];
;;;45         m_numBlobs = 0;
;;;46         m_blobReadIndex = 0;
;;;47         m_ccBlobReadIndex = 0;
;;;48     
;;;49     #ifdef PIXY
;;;50         m_clut = new ColorLUT((void *)LUT_MEMORY);
;;;51     #else
;;;52         m_lut = new uint8_t[CL_LUT_SIZE];
;;;53         m_clut = new ColorLUT(m_lut);
;;;54     #endif
;;;55     
;;;56         // reset blob assemblers
;;;57         for (i=0; i<NUM_MODELS; i++)
;;;58             m_assembler[i].Reset();
;;;59     }
;;;60     
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  2307              MOVS     r3,#7
00000a  221c              MOVS     r2,#0x1c
00000c  49fe              LDR      r1,|L1.1032|
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000014  1f04              SUBS     r4,r0,#4
000016  2000              MOVS     r0,#0
000018  34bc              ADDS     r4,r4,#0xbc
00001a  77a0              STRB     r0,[r4,#0x1e]
00001c  2001              MOVS     r0,#1
00001e  62a0              STR      r0,[r4,#0x28]
000020  2064              MOVS     r0,#0x64
000022  8420              STRH     r0,[r4,#0x20]
000024  2014              MOVS     r0,#0x14
000026  8460              STRH     r0,[r4,#0x22]
000028  2005              MOVS     r0,#5
00002a  85a0              STRH     r0,[r4,#0x2c]
00002c  2006              MOVS     r0,#6
00002e  85e0              STRH     r0,[r4,#0x2e]
000030  2001              MOVS     r0,#1
000032  f8840030          STRB     r0,[r4,#0x30]
000036  60e6              STR      r6,[r4,#0xc]
000038  f44f707a          MOV      r0,#0x3e8
00003c  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
000040  6120              STR      r0,[r4,#0x10]
000042  2000              MOVS     r0,#0
000044  82a0              STRH     r0,[r4,#0x14]
000046  84a0              STRH     r0,[r4,#0x24]
000048  84e0              STRH     r0,[r4,#0x26]
00004a  2044              MOVS     r0,#0x44
00004c  f7fffffe          BL       _Znwj ; operator new(unsigned)
000050  4607              MOV      r7,r0
000052  49ee              LDR      r1,|L1.1036|
000054  f7fffffe          BL       _ZN8ColorLUTC1EPKv ; ColorLUT::ColorLUT(const void*)
000058  4607              MOV      r7,r0
00005a  f8440dbc          STR      r0,[r4,#-0xbc]!
00005e  2500              MOVS     r5,#0
000060  e007              B        |L1.114|
                  |L1.98|
000062  ebc502c5          RSB      r2,r5,r5,LSL #3
000066  1d21              ADDS     r1,r4,#4
000068  eb010082          ADD      r0,r1,r2,LSL #2
00006c  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
000070  1c6d              ADDS     r5,r5,#1
                  |L1.114|
000072  2d07              CMP      r5,#7
000074  dbf5              BLT      |L1.98|
000076  4620              MOV      r0,r4
000078  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _ZN5BlobsD2Ev                  ; Alternate entry point ; Blobs::~Blobs__sub_object()
                  _ZN5BlobsD1Ev PROC ; Blobs::~Blobs()
;;;74     
;;;75     Blobs::~Blobs()
;;;76     {
;;;77     #ifndef PIXY
;;;78         delete [] m_lut;
;;;79     #endif
;;;80         delete m_clut;
;;;81         delete [] m_blobs;
;;;82     }
;;;83     
00007c  b570              PUSH     {r4-r6,lr}
00007e  4604              MOV      r4,r0
000080  6820              LDR      r0,[r4,#0]
000082  b128              CBZ      r0,|L1.144|
000084  6820              LDR      r0,[r4,#0]
000086  f7fffffe          BL       _ZN8ColorLUTD1Ev ; ColorLUT::~ColorLUT()
00008a  4605              MOV      r5,r0
00008c  f7fffffe          BL       _ZdlPv ; operator delete (void*)
                  |L1.144|
000090  f8d400cc          LDR      r0,[r4,#0xcc]
000094  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000098  2307              MOVS     r3,#7
00009a  221c              MOVS     r2,#0x1c
00009c  49dc              LDR      r1,|L1.1040|
00009e  1d20              ADDS     r0,r4,#4
0000a0  f7fffffe          BL       __aeabi_vec_dtor
0000a4  4620              MOV      r0,r4
0000a6  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN5Blobs8compressEPtt PROC ; Blobs::compress(unsigned short*, unsigned short)
;;;417    
;;;418    uint16_t Blobs::compress(uint16_t *blobs, uint16_t numBlobs)
0000a8  b5f0              PUSH     {r4-r7,lr}
;;;419    {
0000aa  4606              MOV      r6,r0
0000ac  460b              MOV      r3,r1
0000ae  4614              MOV      r4,r2
;;;420        uint16_t i, ii;
;;;421        uint16_t *destination, invalid;
;;;422    
;;;423        // compress list
;;;424        for (i=0, ii=0, destination=NULL, invalid=0; i<numBlobs; i++, ii+=5)
0000b0  2500              MOVS     r5,#0
0000b2  2100              MOVS     r1,#0
0000b4  2200              MOVS     r2,#0
0000b6  2000              MOVS     r0,#0
0000b8  e022              B        |L1.256|
                  |L1.186|
;;;425        {
;;;426            if (blobs[ii+0]==0)
0000ba  f8337011          LDRH     r7,[r3,r1,LSL #1]
0000be  b92f              CBNZ     r7,|L1.204|
;;;427            {
;;;428                if (destination==NULL)
0000c0  b90a              CBNZ     r2,|L1.198|
;;;429                    destination = blobs+ii;
0000c2  eb030241          ADD      r2,r3,r1,LSL #1
                  |L1.198|
;;;430                invalid++;
0000c6  1c47              ADDS     r7,r0,#1
0000c8  b2b8              UXTH     r0,r7
;;;431                continue;
0000ca  e015              B        |L1.248|
                  |L1.204|
;;;432            }
;;;433            if (destination)
0000cc  b19a              CBZ      r2,|L1.246|
;;;434            {
;;;435                destination[0] = blobs[ii+0];
0000ce  f8337011          LDRH     r7,[r3,r1,LSL #1]
0000d2  8017              STRH     r7,[r2,#0]
;;;436                destination[1] = blobs[ii+1];
0000d4  1c4f              ADDS     r7,r1,#1
0000d6  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000da  8057              STRH     r7,[r2,#2]
;;;437                destination[2] = blobs[ii+2];
0000dc  1c8f              ADDS     r7,r1,#2
0000de  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000e2  8097              STRH     r7,[r2,#4]
;;;438                destination[3] = blobs[ii+3];
0000e4  1ccf              ADDS     r7,r1,#3
0000e6  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000ea  80d7              STRH     r7,[r2,#6]
;;;439                destination[4] = blobs[ii+4];
0000ec  1d0f              ADDS     r7,r1,#4
0000ee  f8337017          LDRH     r7,[r3,r7,LSL #1]
0000f2  8117              STRH     r7,[r2,#8]
;;;440                destination += 5;
0000f4  320a              ADDS     r2,r2,#0xa
                  |L1.246|
0000f6  bf00              NOP                            ;431
                  |L1.248|
0000f8  1c6f              ADDS     r7,r5,#1              ;424
0000fa  b2bd              UXTH     r5,r7                 ;424
0000fc  1d4f              ADDS     r7,r1,#5              ;424
0000fe  b2b9              UXTH     r1,r7                 ;424
                  |L1.256|
000100  42a5              CMP      r5,r4                 ;424
000102  dbda              BLT      |L1.186|
;;;441            }
;;;442        }
;;;443        return invalid;
;;;444    }
000104  bdf0              POP      {r4-r7,pc}
;;;445    
                          ENDP

                  _ZN5Blobs5angleEP5BlobAS1_ PROC ; Blobs::angle(BlobA*, BlobA*)
;;;632    
;;;633    int16_t Blobs::angle(BlobA *blob0, BlobA *blob1)
000106  e92d4ffe          PUSH     {r1-r11,lr}
;;;634    {
00010a  460c              MOV      r4,r1
00010c  4615              MOV      r5,r2
;;;635        int acx, acy, bcx, bcy;
;;;636        float res;
;;;637    
;;;638        acx = (blob0->m_right + blob0->m_left)/2;
00010e  88a1              LDRH     r1,[r4,#4]
000110  8862              LDRH     r2,[r4,#2]
000112  1888              ADDS     r0,r1,r2
000114  eb0071d0          ADD      r1,r0,r0,LSR #31
000118  104e              ASRS     r6,r1,#1
;;;639        acy = (blob0->m_bottom + blob0->m_top)/2;
00011a  8921              LDRH     r1,[r4,#8]
00011c  88e2              LDRH     r2,[r4,#6]
00011e  1888              ADDS     r0,r1,r2
000120  eb0071d0          ADD      r1,r0,r0,LSR #31
000124  104f              ASRS     r7,r1,#1
;;;640        bcx = (blob1->m_right + blob1->m_left)/2;
000126  88a9              LDRH     r1,[r5,#4]
000128  886a              LDRH     r2,[r5,#2]
00012a  1888              ADDS     r0,r1,r2
00012c  eb0071d0          ADD      r1,r0,r0,LSR #31
000130  ea4f0861          ASR      r8,r1,#1
;;;641        bcy = (blob1->m_bottom + blob1->m_top)/2;
000134  8929              LDRH     r1,[r5,#8]
000136  88ea              LDRH     r2,[r5,#6]
000138  1888              ADDS     r0,r1,r2
00013a  eb0071d0          ADD      r1,r0,r0,LSR #31
00013e  ea4f0961          ASR      r9,r1,#1
;;;642    
;;;643        res = atan2((float)(acy-bcy), (float)(bcx-acx))*180/3.1415f;
000142  eba70009          SUB      r0,r7,r9
000146  f7fffffe          BL       __aeabi_i2f
00014a  9000              STR      r0,[sp,#0]
00014c  eba80006          SUB      r0,r8,r6
000150  f7fffffe          BL       __aeabi_i2f
000154  9001              STR      r0,[sp,#4]
000156  e9dd0100          LDRD     r0,r1,[sp,#0]
00015a  f7fffffe          BL       atan2f
00015e  4683              MOV      r11,r0
000160  49ac              LDR      r1,|L1.1044|
000162  f7fffffe          BL       __aeabi_fmul
000166  49ac              LDR      r1,|L1.1048|
000168  9002              STR      r0,[sp,#8]
00016a  f7fffffe          BL       __aeabi_fdiv
00016e  4682              MOV      r10,r0
;;;644    
;;;645        return (int16_t)res;
000170  4650              MOV      r0,r10
000172  f7fffffe          BL       __aeabi_f2iz
000176  b200              SXTH     r0,r0
;;;646    }
000178  e8bd8ffe          POP      {r1-r11,pc}
;;;647    
                          ENDP

                  _ZN5Blobs8cleanup2EPP5BlobAPs PROC ; Blobs::cleanup2(BlobA**, short*)
;;;775    // eliminate duplicate and adjacent signatures
;;;776    void Blobs::cleanup2(BlobA *blobs[], int16_t *numBlobs)
00017c  e92d41f0          PUSH     {r4-r8,lr}
;;;777    {
000180  b08a              SUB      sp,sp,#0x28
000182  4606              MOV      r6,r0
;;;778        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;779        int i, j;
;;;780        uint16_t numNewBlobs;
;;;781        bool set;
;;;782    
;;;783        for (i=0, numNewBlobs=0, set=false; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i=j)
000184  2000              MOVS     r0,#0
000186  2400              MOVS     r4,#0
000188  2500              MOVS     r5,#0
00018a  e021              B        |L1.464|
                  |L1.396|
;;;784        {
;;;785            newBlobs[numNewBlobs++] = blobs[i];
00018c  f8518020          LDR      r8,[r1,r0,LSL #2]
000190  4627              MOV      r7,r4
000192  f1040c01          ADD      r12,r4,#1
000196  fa1ff48c          UXTH     r4,r12
00019a  f84d8027          STR      r8,[sp,r7,LSL #2]
;;;786            for (j=i+1; j<*numBlobs; j++)
00019e  1c43              ADDS     r3,r0,#1
0001a0  e010              B        |L1.452|
                  |L1.418|
;;;787            {
;;;788                if ((blobs[j]->m_model&0x07)==(blobs[i]->m_model&0x07))
0001a2  f8517023          LDR      r7,[r1,r3,LSL #2]
0001a6  783f              LDRB     r7,[r7,#0]
0001a8  f0070707          AND      r7,r7,#7
0001ac  f851c020          LDR      r12,[r1,r0,LSL #2]
0001b0  f89cc000          LDRB     r12,[r12,#0]
0001b4  f00c0c07          AND      r12,r12,#7
0001b8  4567              CMP      r7,r12
0001ba  d101              BNE      |L1.448|
;;;789                    set = true;
0001bc  2501              MOVS     r5,#1
0001be  e000              B        |L1.450|
                  |L1.448|
;;;790                else
;;;791                    break;
0001c0  e004              B        |L1.460|
                  |L1.450|
0001c2  1c5b              ADDS     r3,r3,#1              ;786
                  |L1.452|
0001c4  f9b27000          LDRSH    r7,[r2,#0]            ;786
0001c8  429f              CMP      r7,r3                 ;786
0001ca  dcea              BGT      |L1.418|
                  |L1.460|
0001cc  bf00              NOP      
0001ce  4618              MOV      r0,r3                 ;783
                  |L1.464|
0001d0  f9b27000          LDRSH    r7,[r2,#0]            ;783
0001d4  4287              CMP      r7,r0                 ;783
0001d6  dd01              BLE      |L1.476|
0001d8  2c0a              CMP      r4,#0xa               ;783
0001da  dbd7              BLT      |L1.396|
                  |L1.476|
;;;792            }
;;;793        }
;;;794        if (set)
0001dc  b155              CBZ      r5,|L1.500|
;;;795        {
;;;796            // copy new blobs over
;;;797            for (i=0; i<numNewBlobs; i++)
0001de  2000              MOVS     r0,#0
0001e0  e004              B        |L1.492|
                  |L1.482|
;;;798                blobs[i] = newBlobs[i];
0001e2  f85d7020          LDR      r7,[sp,r0,LSL #2]
0001e6  f8417020          STR      r7,[r1,r0,LSL #2]
0001ea  1c40              ADDS     r0,r0,#1              ;797
                  |L1.492|
0001ec  42a0              CMP      r0,r4                 ;797
0001ee  dbf8              BLT      |L1.482|
;;;799            *numBlobs = numNewBlobs;
0001f0  b227              SXTH     r7,r4
0001f2  8017              STRH     r7,[r2,#0]
                  |L1.500|
;;;800        }
;;;801    }
0001f4  b00a              ADD      sp,sp,#0x28
0001f6  e8bd81f0          POP      {r4-r8,pc}
;;;802    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_b PROC ; Blobs::distance(BlobA*, BlobA*, bool)
;;;617    
;;;618    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1, bool horiz)
0001fa  e92d41f0          PUSH     {r4-r8,lr}
;;;619    {
0001fe  4606              MOV      r6,r0
000200  461c              MOV      r4,r3
;;;620        int16_t dist;
;;;621    
;;;622        if (horiz)
000202  b19c              CBZ      r4,|L1.556|
;;;623            dist = (blob0->m_right+blob0->m_left)/2 - (blob1->m_right+blob1->m_left)/2;
000204  888f              LDRH     r7,[r1,#4]
000206  f8b1c002          LDRH     r12,[r1,#2]
00020a  eb07050c          ADD      r5,r7,r12
00020e  eb0577d5          ADD      r7,r5,r5,LSR #31
000212  107f              ASRS     r7,r7,#1
000214  f8b2c004          LDRH     r12,[r2,#4]
000218  f8b28002          LDRH     r8,[r2,#2]
00021c  eb0c0008          ADD      r0,r12,r8
000220  eb007cd0          ADD      r12,r0,r0,LSR #31
000224  eba7076c          SUB      r7,r7,r12,ASR #1
000228  b23b              SXTH     r3,r7
00022a  e012              B        |L1.594|
                  |L1.556|
;;;624        else
;;;625            dist = (blob0->m_bottom+blob0->m_top)/2 - (blob1->m_bottom+blob1->m_top)/2;
00022c  890f              LDRH     r7,[r1,#8]
00022e  f8b1c006          LDRH     r12,[r1,#6]
000232  eb07050c          ADD      r5,r7,r12
000236  eb0577d5          ADD      r7,r5,r5,LSR #31
00023a  107f              ASRS     r7,r7,#1
00023c  f8b2c008          LDRH     r12,[r2,#8]
000240  f8b28006          LDRH     r8,[r2,#6]
000244  eb0c0008          ADD      r0,r12,r8
000248  eb007cd0          ADD      r12,r0,r0,LSR #31
00024c  eba7076c          SUB      r7,r7,r12,ASR #1
000250  b23b              SXTH     r3,r7
                  |L1.594|
;;;626    
;;;627        if (dist<0)
000252  2b00              CMP      r3,#0
000254  da03              BGE      |L1.606|
;;;628            return -dist;
000256  4258              RSBS     r0,r3,#0
000258  b200              SXTH     r0,r0
                  |L1.602|
;;;629        else
;;;630            return dist;
;;;631    }
00025a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.606|
00025e  4618              MOV      r0,r3                 ;630
000260  e7fb              B        |L1.602|
;;;632    
                          ENDP

                  _ZN5Blobs4sortEPP5BlobAtS1_b PROC ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
;;;647    
;;;648    void Blobs::sort(BlobA *blobs[], uint16_t len, BlobA *firstBlob, bool horiz)
000262  e92d4ff0          PUSH     {r4-r11,lr}
;;;649    {
000266  b085              SUB      sp,sp,#0x14
000268  4682              MOV      r10,r0
00026a  460d              MOV      r5,r1
00026c  4616              MOV      r6,r2
00026e  461f              MOV      r7,r3
;;;650        uint16_t i, td, distances[MAX_COLOR_CODE_MODELS*2];
;;;651        bool done;
;;;652        BlobA *tb;
;;;653    
;;;654        // create list of distances
;;;655        for (i=0; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
000270  2400              MOVS     r4,#0
000272  e00b              B        |L1.652|
                  |L1.628|
;;;656            distances[i] = distance(firstBlob, blobs[i], horiz);
000274  f8552024          LDR      r2,[r5,r4,LSL #2]
000278  4639              MOV      r1,r7
00027a  4650              MOV      r0,r10
00027c  9b0e              LDR      r3,[sp,#0x38]
00027e  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_b ; Blobs::distance(BlobA*, BlobA*, bool)
000282  b280              UXTH     r0,r0
000284  f82d0014          STRH     r0,[sp,r4,LSL #1]
000288  1c60              ADDS     r0,r4,#1              ;655
00028a  b284              UXTH     r4,r0                 ;655
                  |L1.652|
00028c  42b4              CMP      r4,r6                 ;655
00028e  da01              BGE      |L1.660|
000290  2c0a              CMP      r4,#0xa               ;655
000292  dbef              BLT      |L1.628|
                  |L1.660|
;;;657    
;;;658        // sort -- note, we only have 5 maximum to sort, so no worries about efficiency
;;;659        while(1)
000294  e028              B        |L1.744|
                  |L1.662|
;;;660        {
;;;661            for (i=1, done=true; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
000296  2401              MOVS     r4,#1
000298  46a3              MOV      r11,r4
00029a  e01d              B        |L1.728|
                  |L1.668|
;;;662            {
;;;663                if (distances[i-1]>distances[i])
00029c  1e60              SUBS     r0,r4,#1
00029e  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0002a2  f83d1014          LDRH     r1,[sp,r4,LSL #1]
0002a6  4288              CMP      r0,r1
0002a8  dd14              BLE      |L1.724|
;;;664                {
;;;665                    // swap distances
;;;666                    td = distances[i];
0002aa  f83d8014          LDRH     r8,[sp,r4,LSL #1]
;;;667                    distances[i] = distances[i-1];
0002ae  1e60              SUBS     r0,r4,#1
0002b0  f83d0010          LDRH     r0,[sp,r0,LSL #1]
0002b4  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;668                    distances[i-1] = td;
0002b8  1e60              SUBS     r0,r4,#1
0002ba  f82d8010          STRH     r8,[sp,r0,LSL #1]
;;;669                    // swap blobs
;;;670                    tb = blobs[i];
0002be  f8559024          LDR      r9,[r5,r4,LSL #2]
;;;671                    blobs[i] = blobs[i-1];
0002c2  f8550020          LDR      r0,[r5,r0,LSL #2]
0002c6  f8450024          STR      r0,[r5,r4,LSL #2]
;;;672                    blobs[i-1] = tb;
0002ca  1e60              SUBS     r0,r4,#1
0002cc  f8459020          STR      r9,[r5,r0,LSL #2]
;;;673    
;;;674                    done = false;
0002d0  f04f0b00          MOV      r11,#0
                  |L1.724|
0002d4  1c60              ADDS     r0,r4,#1              ;661
0002d6  b284              UXTH     r4,r0                 ;661
                  |L1.728|
0002d8  42b4              CMP      r4,r6                 ;661
0002da  da01              BGE      |L1.736|
0002dc  2c0a              CMP      r4,#0xa               ;661
0002de  dbdd              BLT      |L1.668|
                  |L1.736|
;;;675                }
;;;676            }
;;;677            if (done)
0002e0  f1bb0f00          CMP      r11,#0
0002e4  d000              BEQ      |L1.744|
;;;678                break;
0002e6  e000              B        |L1.746|
                  |L1.744|
0002e8  e7d5              B        |L1.662|
                  |L1.746|
0002ea  bf00              NOP      
;;;679        }
;;;680    }
0002ec  b005              ADD      sp,sp,#0x14
0002ee  e8bd8ff0          POP      {r4-r11,pc}
;;;681    
                          ENDP

                  _ZN5Blobs7cleanupEPP5BlobAPs PROC ; Blobs::cleanup(BlobA**, short*)
;;;721    // impose weak size constraint
;;;722    void Blobs::cleanup(BlobA *blobs[], int16_t *numBlobs)
0002f2  e92d4ff0          PUSH     {r4-r11,lr}
;;;723    {
0002f6  b08c              SUB      sp,sp,#0x30
0002f8  4614              MOV      r4,r2
;;;724        int i, j;
;;;725        bool set;
;;;726        uint16_t maxEqual, numEqual, numNewBlobs;
;;;727        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;728        uint32_t area0, area1, lowerArea, upperArea, maxEqualArea;
;;;729    
;;;730        for (i=0, maxEqual=0, set=false; i<*numBlobs; i++)
0002fa  2000              MOVS     r0,#0
0002fc  4682              MOV      r10,r0
0002fe  f8cda028          STR      r10,[sp,#0x28]
000302  f8cda02c          STR      r10,[sp,#0x2c]
000306  e05c              B        |L1.962|
                  |L1.776|
;;;731        {
;;;732            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
000308  f851a020          LDR      r10,[r1,r0,LSL #2]
00030c  f8baa004          LDRH     r10,[r10,#4]
000310  f851b020          LDR      r11,[r1,r0,LSL #2]
000314  f8bbb002          LDRH     r11,[r11,#2]
000318  ebaa0a0b          SUB      r10,r10,r11
00031c  f851b020          LDR      r11,[r1,r0,LSL #2]
000320  f8bbb008          LDRH     r11,[r11,#8]
000324  f851e020          LDR      lr,[r1,r0,LSL #2]
000328  f8bee006          LDRH     lr,[lr,#6]
00032c  ebab0b0e          SUB      r11,r11,lr
000330  fb0af20b          MUL      r2,r10,r11
;;;733            lowerArea = (area0*100)/(100+TOL);
000334  f04f0a64          MOV      r10,#0x64
000338  fb02fa0a          MUL      r10,r2,r10
00033c  f44f7bfa          MOV      r11,#0x1f4
000340  fbbaf7fb          UDIV     r7,r10,r11
;;;734            upperArea = area0 + (area0*TOL)/100;
000344  f44f7ac8          MOV      r10,#0x190
000348  fb02fa0a          MUL      r10,r2,r10
00034c  f04f0b64          MOV      r11,#0x64
000350  fbbafafb          UDIV     r10,r10,r11
000354  eb0a0c02          ADD      r12,r10,r2
;;;735    
;;;736            for (j=0, numEqual=0; j<*numBlobs; j++)
000358  2300              MOVS     r3,#0
00035a  2600              MOVS     r6,#0
00035c  e022              B        |L1.932|
                  |L1.862|
;;;737            {
;;;738                if (i==j)
00035e  4298              CMP      r0,r3
000360  d100              BNE      |L1.868|
;;;739                    continue;
000362  e01e              B        |L1.930|
                  |L1.868|
;;;740                area1 = (blobs[j]->m_right-blobs[j]->m_left) * (blobs[j]->m_bottom-blobs[j]->m_top);
000364  f851a023          LDR      r10,[r1,r3,LSL #2]
000368  f8baa004          LDRH     r10,[r10,#4]
00036c  f851b023          LDR      r11,[r1,r3,LSL #2]
000370  f8bbb002          LDRH     r11,[r11,#2]
000374  ebaa0a0b          SUB      r10,r10,r11
000378  f851b023          LDR      r11,[r1,r3,LSL #2]
00037c  f8bbb008          LDRH     r11,[r11,#8]
000380  f851e023          LDR      lr,[r1,r3,LSL #2]
000384  f8bee006          LDRH     lr,[lr,#6]
000388  ebab0b0e          SUB      r11,r11,lr
00038c  fb0af80b          MUL      r8,r10,r11
;;;741                if (lowerArea<=area1 && area1<=upperArea)
000390  4547              CMP      r7,r8
000392  d805              BHI      |L1.928|
000394  45e0              CMP      r8,r12
000396  d803              BHI      |L1.928|
;;;742                    numEqual++;
000398  f1060a01          ADD      r10,r6,#1
00039c  fa1ff68a          UXTH     r6,r10
                  |L1.928|
0003a0  bf00              NOP                            ;739
                  |L1.930|
0003a2  1c5b              ADDS     r3,r3,#1              ;736
                  |L1.932|
0003a4  f9b4a000          LDRSH    r10,[r4,#0]           ;736
0003a8  459a              CMP      r10,r3                ;736
0003aa  dcd8              BGT      |L1.862|
;;;743            }
;;;744            if (numEqual>maxEqual)
0003ac  f8dda028          LDR      r10,[sp,#0x28]
0003b0  4556              CMP      r6,r10
0003b2  dd05              BLE      |L1.960|
;;;745            {
;;;746                maxEqual = numEqual;
0003b4  960a              STR      r6,[sp,#0x28]
;;;747                maxEqualArea = area0;
0003b6  4691              MOV      r9,r2
;;;748                set = true;
0003b8  f04f0a01          MOV      r10,#1
0003bc  f8cda02c          STR      r10,[sp,#0x2c]
                  |L1.960|
0003c0  1c40              ADDS     r0,r0,#1              ;730
                  |L1.962|
0003c2  f9b4a000          LDRSH    r10,[r4,#0]           ;730
0003c6  4582              CMP      r10,r0                ;730
0003c8  dc9e              BGT      |L1.776|
;;;749            }
;;;750        }
;;;751    
;;;752        if (!set)
0003ca  f8dda02c          LDR      r10,[sp,#0x2c]
0003ce  f1ba0f00          CMP      r10,#0
0003d2  d103              BNE      |L1.988|
;;;753            *numBlobs = 0;
0003d4  f04f0a00          MOV      r10,#0
0003d8  f8a4a000          STRH     r10,[r4,#0]
                  |L1.988|
;;;754    
;;;755        for (i=0, numNewBlobs=0; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i++)
0003dc  2000              MOVS     r0,#0
0003de  2500              MOVS     r5,#0
0003e0  e040              B        |L1.1124|
                  |L1.994|
;;;756        {
;;;757            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
0003e2  f851a020          LDR      r10,[r1,r0,LSL #2]
0003e6  f8baa004          LDRH     r10,[r10,#4]
0003ea  f851b020          LDR      r11,[r1,r0,LSL #2]
0003ee  f8bbb002          LDRH     r11,[r11,#2]
0003f2  ebaa0a0b          SUB      r10,r10,r11
0003f6  f851b020          LDR      r11,[r1,r0,LSL #2]
0003fa  f8bbb008          LDRH     r11,[r11,#8]
0003fe  f851e020          LDR      lr,[r1,r0,LSL #2]
000402  f8bee006          LDRH     lr,[lr,#6]
000406  e009              B        |L1.1052|
                  |L1.1032|
                          DCD      _ZN14CBlobAssemblerC1Ev ; CBlobAssembler::CBlobAssembler()
                  |L1.1036|
                          DCD      0x10082000
                  |L1.1040|
                          DCD      _ZN14CBlobAssemblerD1Ev ; CBlobAssembler::~CBlobAssembler()
                  |L1.1044|
                          DCD      0x43340000
                  |L1.1048|
                          DCD      0x40490e56
                  |L1.1052|
00041c  ebab0b0e          SUB      r11,r11,lr
000420  fb0af20b          MUL      r2,r10,r11
;;;758            lowerArea = (area0*100)/(100+TOL);
000424  f04f0a64          MOV      r10,#0x64
000428  fb02fa0a          MUL      r10,r2,r10
00042c  f44f7bfa          MOV      r11,#0x1f4
000430  fbbaf7fb          UDIV     r7,r10,r11
;;;759            upperArea = area0 + (area0*TOL)/100;
000434  f44f7ac8          MOV      r10,#0x190
000438  fb02fa0a          MUL      r10,r2,r10
00043c  f04f0b64          MOV      r11,#0x64
000440  fbbafafb          UDIV     r10,r10,r11
000444  eb0a0c02          ADD      r12,r10,r2
;;;760            if (lowerArea<=maxEqualArea && maxEqualArea<=upperArea)
000448  454f              CMP      r7,r9
00044a  d80a              BHI      |L1.1122|
00044c  45e1              CMP      r9,r12
00044e  d808              BHI      |L1.1122|
;;;761                newBlobs[numNewBlobs++] = blobs[i];
000450  f851b020          LDR      r11,[r1,r0,LSL #2]
000454  46aa              MOV      r10,r5
000456  f1050e01          ADD      lr,r5,#1
00045a  fa1ff58e          UXTH     r5,lr
00045e  f84db02a          STR      r11,[sp,r10,LSL #2]
                  |L1.1122|
000462  1c40              ADDS     r0,r0,#1              ;755
                  |L1.1124|
000464  f9b4a000          LDRSH    r10,[r4,#0]           ;755
000468  4582              CMP      r10,r0                ;755
00046a  dd01              BLE      |L1.1136|
00046c  2d0a              CMP      r5,#0xa               ;755
00046e  dbb8              BLT      |L1.994|
                  |L1.1136|
;;;762    #ifndef PIXY
;;;763            else if (*numBlobs>=5 && (blobs[i]->m_model&0x07)==2)
;;;764                qDebug("eliminated!");
;;;765    #endif
;;;766        }
;;;767    
;;;768        // copy new blobs over
;;;769        for (i=0; i<numNewBlobs; i++)
000470  2000              MOVS     r0,#0
000472  e004              B        |L1.1150|
                  |L1.1140|
;;;770            blobs[i] = newBlobs[i];
000474  f85da020          LDR      r10,[sp,r0,LSL #2]
000478  f841a020          STR      r10,[r1,r0,LSL #2]
00047c  1c40              ADDS     r0,r0,#1              ;769
                  |L1.1150|
00047e  42a8              CMP      r0,r5                 ;769
000480  dbf8              BLT      |L1.1140|
;;;771        *numBlobs = numNewBlobs;
000482  fa0ffa85          SXTH     r10,r5
000486  f8a4a000          STRH     r10,[r4,#0]
;;;772    }
00048a  b00c              ADD      sp,sp,#0x30
00048c  e8bd8ff0          POP      {r4-r11,pc}
;;;773    
                          ENDP

                  _ZN5Blobs11mergeClumpsEtt PROC ; Blobs::mergeClumps(unsigned short, unsigned short)
;;;813    
;;;814    void Blobs::mergeClumps(uint16_t scount0, uint16_t scount1)
000490  b570              PUSH     {r4-r6,lr}
;;;815    {
000492  4603              MOV      r3,r0
000494  460c              MOV      r4,r1
;;;816        int i;
;;;817        BlobA *blobs = (BlobA *)m_blobs;
000496  f8d310cc          LDR      r1,[r3,#0xcc]
;;;818        for (i=0; i<m_numBlobs; i++)
00049a  2000              MOVS     r0,#0
00049c  e013              B        |L1.1222|
                  |L1.1182|
;;;819        {
;;;820            if ((blobs[i].m_model&~0x07)==scount1)
00049e  eb000580          ADD      r5,r0,r0,LSL #2
0004a2  f8315015          LDRH     r5,[r1,r5,LSL #1]
0004a6  f0250507          BIC      r5,r5,#7
0004aa  4295              CMP      r5,r2
0004ac  d10a              BNE      |L1.1220|
;;;821                blobs[i].m_model = (blobs[i].m_model&0x07) | scount0;
0004ae  eb000580          ADD      r5,r0,r0,LSL #2
0004b2  f8115015          LDRB     r5,[r1,r5,LSL #1]
0004b6  f0050507          AND      r5,r5,#7
0004ba  4325              ORRS     r5,r5,r4
0004bc  eb000680          ADD      r6,r0,r0,LSL #2
0004c0  f8215016          STRH     r5,[r1,r6,LSL #1]
                  |L1.1220|
0004c4  1c40              ADDS     r0,r0,#1              ;818
                  |L1.1222|
0004c6  f8b350d0          LDRH     r5,[r3,#0xd0]         ;818
0004ca  4285              CMP      r5,r0                 ;818
0004cc  dce7              BGT      |L1.1182|
;;;822        }
;;;823    }
0004ce  bd70              POP      {r4-r6,pc}
;;;824    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_ PROC ; Blobs::distance(BlobA*, BlobA*)
;;;575    
;;;576    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1)
0004d0  e92d47f0          PUSH     {r4-r10,lr}
;;;577    {
0004d4  4682              MOV      r10,r0
0004d6  460d              MOV      r5,r1
0004d8  4616              MOV      r6,r2
;;;578        int16_t left0, right0, top0, bottom0;
;;;579        int16_t left1, right1, top1, bottom1;
;;;580    
;;;581        left0 = blob0->m_left;
0004da  8868              LDRH     r0,[r5,#2]
0004dc  b201              SXTH     r1,r0
;;;582        right0 = blob0->m_right;
0004de  88a8              LDRH     r0,[r5,#4]
0004e0  b207              SXTH     r7,r0
;;;583        top0 = blob0->m_top;
0004e2  88e8              LDRH     r0,[r5,#6]
0004e4  b202              SXTH     r2,r0
;;;584        bottom0 = blob0->m_bottom;
0004e6  8928              LDRH     r0,[r5,#8]
0004e8  fa0ffc80          SXTH     r12,r0
;;;585        left1 = blob1->m_left;
0004ec  8870              LDRH     r0,[r6,#2]
0004ee  b203              SXTH     r3,r0
;;;586        right1 = blob1->m_right;
0004f0  88b0              LDRH     r0,[r6,#4]
0004f2  fa0ff880          SXTH     r8,r0
;;;587        top1 = blob1->m_top;
0004f6  88f0              LDRH     r0,[r6,#6]
0004f8  b204              SXTH     r4,r0
;;;588        bottom1 = blob1->m_bottom;
0004fa  8930              LDRH     r0,[r6,#8]
0004fc  fa0ff980          SXTH     r9,r0
;;;589    
;;;590        if (left0>=left1 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
000500  4299              CMP      r1,r3
000502  db0e              BLT      |L1.1314|
000504  42a2              CMP      r2,r4
000506  dc01              BGT      |L1.1292|
000508  4564              CMP      r4,r12
00050a  dd05              BLE      |L1.1304|
                  |L1.1292|
00050c  454a              CMP      r2,r9
00050e  dc08              BGT      |L1.1314|
000510  45e1              CMP      r9,r12
000512  dd01              BLE      |L1.1304|
000514  4294              CMP      r4,r2
000516  dc04              BGT      |L1.1314|
                  |L1.1304|
;;;591            return left0-right1;
000518  eba10008          SUB      r0,r1,r8
00051c  b200              SXTH     r0,r0
                  |L1.1310|
;;;592    
;;;593        if (left1>=left0 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
;;;594            return left1-right0;
;;;595    
;;;596        if (top0>=top1 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;597            return top0-bottom1;
;;;598    
;;;599        if (top1>=top0 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;600            return top1-bottom0;
;;;601    
;;;602        return 0x7fff; // return a large number
;;;603    }
00051e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1314|
000522  428b              CMP      r3,r1                 ;593
000524  db0c              BLT      |L1.1344|
000526  42a2              CMP      r2,r4                 ;593
000528  dc01              BGT      |L1.1326|
00052a  4564              CMP      r4,r12                ;593
00052c  dd05              BLE      |L1.1338|
                  |L1.1326|
00052e  454a              CMP      r2,r9                 ;593
000530  dc06              BGT      |L1.1344|
000532  45e1              CMP      r9,r12                ;593
000534  dd01              BLE      |L1.1338|
000536  4294              CMP      r4,r2                 ;593
000538  dc02              BGT      |L1.1344|
                  |L1.1338|
00053a  1bd8              SUBS     r0,r3,r7              ;594
00053c  b200              SXTH     r0,r0                 ;594
00053e  e7ee              B        |L1.1310|
                  |L1.1344|
000540  42a2              CMP      r2,r4                 ;596
000542  db0d              BLT      |L1.1376|
000544  4299              CMP      r1,r3                 ;596
000546  dc01              BGT      |L1.1356|
000548  42bb              CMP      r3,r7                 ;596
00054a  dd05              BLE      |L1.1368|
                  |L1.1356|
00054c  4541              CMP      r1,r8                 ;596
00054e  dc07              BGT      |L1.1376|
000550  45b8              CMP      r8,r7                 ;596
000552  dd01              BLE      |L1.1368|
000554  428b              CMP      r3,r1                 ;596
000556  dc03              BGT      |L1.1376|
                  |L1.1368|
000558  eba20009          SUB      r0,r2,r9              ;597
00055c  b200              SXTH     r0,r0                 ;597
00055e  e7de              B        |L1.1310|
                  |L1.1376|
000560  4294              CMP      r4,r2                 ;599
000562  db0d              BLT      |L1.1408|
000564  4299              CMP      r1,r3                 ;599
000566  dc01              BGT      |L1.1388|
000568  42bb              CMP      r3,r7                 ;599
00056a  dd05              BLE      |L1.1400|
                  |L1.1388|
00056c  4541              CMP      r1,r8                 ;599
00056e  dc07              BGT      |L1.1408|
000570  45b8              CMP      r8,r7                 ;599
000572  dd01              BLE      |L1.1400|
000574  428b              CMP      r3,r1                 ;599
000576  dc03              BGT      |L1.1408|
                  |L1.1400|
000578  eba4000c          SUB      r0,r4,r12             ;600
00057c  b200              SXTH     r0,r0                 ;600
00057e  e7ce              B        |L1.1310|
                  |L1.1408|
000580  f64770ff          MOV      r0,#0x7fff            ;602
000584  e7cb              B        |L1.1310|
;;;604    
                          ENDP

                  _ZN5Blobs7closebyEP5BlobAS1_ PROC ; Blobs::closeby(BlobA*, BlobA*)
;;;605    bool Blobs::closeby(BlobA *blob0, BlobA *blob1)
000586  b570              PUSH     {r4-r6,lr}
;;;606    {
000588  4604              MOV      r4,r0
00058a  460d              MOV      r5,r1
00058c  4616              MOV      r6,r2
;;;607        // check to see if blobs are invalid or equal
;;;608        if (blob0->m_model==0 || blob1->m_model==0 || blob0->m_model==blob1->m_model)
00058e  8828              LDRH     r0,[r5,#0]
000590  b128              CBZ      r0,|L1.1438|
000592  8830              LDRH     r0,[r6,#0]
000594  b118              CBZ      r0,|L1.1438|
000596  8828              LDRH     r0,[r5,#0]
000598  8831              LDRH     r1,[r6,#0]
00059a  4288              CMP      r0,r1
00059c  d101              BNE      |L1.1442|
                  |L1.1438|
;;;609            return false;
00059e  2000              MOVS     r0,#0
                  |L1.1440|
;;;610        // check to see that the blobs are from color code models.  If they aren't both
;;;611        // color code blobs, we return false
;;;612        if (!CC_SIGNATURE(blob0->m_model&0x07) || !CC_SIGNATURE(blob1->m_model&0x07))
;;;613            return false;
;;;614    
;;;615        return distance(blob0, blob1)<=m_maxCodedDist;
;;;616    }
0005a0  bd70              POP      {r4-r6,pc}
                  |L1.1442|
0005a2  f89400ec          LDRB     r0,[r4,#0xec]         ;612
0005a6  2802              CMP      r0,#2                 ;612
0005a8  d007              BEQ      |L1.1466|
0005aa  782a              LDRB     r2,[r5,#0]            ;612
0005ac  f0020107          AND      r1,r2,#7              ;612
0005b0  6820              LDR      r0,[r4,#0]            ;612
0005b2  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
0005b6  2801              CMP      r0,#1                 ;612
0005b8  d10b              BNE      |L1.1490|
                  |L1.1466|
0005ba  f89400ec          LDRB     r0,[r4,#0xec]         ;612
0005be  2802              CMP      r0,#2                 ;612
0005c0  d009              BEQ      |L1.1494|
0005c2  7832              LDRB     r2,[r6,#0]            ;612
0005c4  f0020107          AND      r1,r2,#7              ;612
0005c8  6820              LDR      r0,[r4,#0]            ;612
0005ca  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
0005ce  2801              CMP      r0,#1                 ;612
0005d0  d001              BEQ      |L1.1494|
                  |L1.1490|
0005d2  2000              MOVS     r0,#0                 ;613
0005d4  e7e4              B        |L1.1440|
                  |L1.1494|
0005d6  4632              MOV      r2,r6                 ;615
0005d8  4629              MOV      r1,r5                 ;615
0005da  4620              MOV      r0,r4                 ;615
0005dc  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
0005e0  f8b410ea          LDRH     r1,[r4,#0xea]         ;615
0005e4  4288              CMP      r0,r1                 ;615
0005e6  dc01              BGT      |L1.1516|
0005e8  2001              MOVS     r0,#1                 ;615
0005ea  e7d9              B        |L1.1440|
                  |L1.1516|
0005ec  2000              MOVS     r0,#0                 ;615
0005ee  e7d7              B        |L1.1440|
;;;617    
                          ENDP

                  _ZN5Blobs9processCCEv PROC ; Blobs::processCC()
;;;824    
;;;825    void Blobs::processCC()
0005f0  e92d4ff0          PUSH     {r4-r11,lr}
;;;826    {
0005f4  b095              SUB      sp,sp,#0x54
0005f6  4606              MOV      r6,r0
;;;827        int16_t i, j, k;
;;;828        uint16_t scount, scount1, count = 0;
0005f8  2000              MOVS     r0,#0
0005fa  9012              STR      r0,[sp,#0x48]
;;;829        int16_t left, right, top, bottom;
;;;830        uint16_t codedModel0, codedModel;
;;;831        BlobB *codedBlob, *endBlobB;
;;;832        BlobA *blob0, *blob1, *endBlob;
;;;833        BlobA *blobs[MAX_COLOR_CODE_MODELS*2];
;;;834    
;;;835    #if 0
;;;836        BlobA b0(1, 1, 20, 40, 50);
;;;837        BlobA b1(1, 1, 20, 52, 60);
;;;838        BlobA b2(1, 1, 20, 62, 70);
;;;839        BlobA b3(2, 22, 30, 40, 50);
;;;840        BlobA b4(2, 22, 30, 52, 60);
;;;841        BlobA b5(3, 32, 40, 40, 50);
;;;842        BlobA b6(4, 42, 50, 40, 50);
;;;843        BlobA b7(4, 42, 50, 52, 60);
;;;844        BlobA b8(6, 22, 30, 52, 60);
;;;845        BlobA b9(6, 22, 30, 52, 60);
;;;846        BlobA b10(7, 22, 30, 52, 60);
;;;847    
;;;848        BlobA *testBlobs[] =
;;;849        {
;;;850            &b0, &b1, &b2, &b3, &b4, &b5, &b6, &b7 //, &b8, &b9, &b10
;;;851        };
;;;852        int16_t ntb = 8;
;;;853        cleanup(testBlobs, &ntb);
;;;854    #endif
;;;855    
;;;856        endBlob = (BlobA *)m_blobs + m_numBlobs;
0005fc  f8560fcc          LDR      r0,[r6,#0xcc]!
000600  88b1              LDRH     r1,[r6,#4]
000602  eb010181          ADD      r1,r1,r1,LSL #2
000606  eb000a41          ADD      r10,r0,r1,LSL #1
;;;857    
;;;858        // 1st pass: mark all closeby blobs
;;;859        for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
00060a  f85649cc          LDR      r4,[r6],#-0xcc
00060e  e03f              B        |L1.1680|
                  |L1.1552|
;;;860        {
;;;861            for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
000610  f104070a          ADD      r7,r4,#0xa
000614  e039              B        |L1.1674|
                  |L1.1558|
;;;862            {
;;;863                if (closeby(blob0, blob1))
000616  463a              MOV      r2,r7
000618  4621              MOV      r1,r4
00061a  4630              MOV      r0,r6
00061c  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
000620  b320              CBZ      r0,|L1.1644|
;;;864                {
;;;865                    if (blob0->m_model<=NUM_MODELS && blob1->m_model<=NUM_MODELS)
000622  8820              LDRH     r0,[r4,#0]
000624  2807              CMP      r0,#7
000626  dc14              BGT      |L1.1618|
000628  8838              LDRH     r0,[r7,#0]
00062a  2807              CMP      r0,#7
00062c  dc11              BGT      |L1.1618|
;;;866                    {
;;;867                        count++;
00062e  9812              LDR      r0,[sp,#0x48]
000630  1c40              ADDS     r0,r0,#1
000632  b280              UXTH     r0,r0
000634  9012              STR      r0,[sp,#0x48]
;;;868                        scount = count<<3;
000636  f64f71ff          MOV      r1,#0xffff
00063a  9812              LDR      r0,[sp,#0x48]
00063c  ea0109c0          AND      r9,r1,r0,LSL #3
;;;869                        blob0->m_model |= scount;
000640  8820              LDRH     r0,[r4,#0]
000642  ea400009          ORR      r0,r0,r9
000646  8020              STRH     r0,[r4,#0]
;;;870                        blob1->m_model |= scount;
000648  8838              LDRH     r0,[r7,#0]
00064a  ea400009          ORR      r0,r0,r9
00064e  8038              STRH     r0,[r7,#0]
000650  e01a              B        |L1.1672|
                  |L1.1618|
;;;871                    }
;;;872                    else if (blob0->m_model>NUM_MODELS && blob1->m_model<=NUM_MODELS)
000652  8820              LDRH     r0,[r4,#0]
000654  2807              CMP      r0,#7
000656  dd0a              BLE      |L1.1646|
000658  8838              LDRH     r0,[r7,#0]
00065a  2807              CMP      r0,#7
00065c  dc07              BGT      |L1.1646|
;;;873                    {
;;;874                        scount = blob0->m_model & ~0x07;
00065e  8820              LDRH     r0,[r4,#0]
000660  f0200907          BIC      r9,r0,#7
;;;875                        blob1->m_model |= scount;
000664  8838              LDRH     r0,[r7,#0]
000666  ea400009          ORR      r0,r0,r9
00066a  8038              STRH     r0,[r7,#0]
                  |L1.1644|
00066c  e00c              B        |L1.1672|
                  |L1.1646|
;;;876                    }
;;;877                    else if (blob1->m_model>NUM_MODELS && blob0->m_model<=NUM_MODELS)
00066e  8838              LDRH     r0,[r7,#0]
000670  2807              CMP      r0,#7
000672  dd09              BLE      |L1.1672|
000674  8820              LDRH     r0,[r4,#0]
000676  2807              CMP      r0,#7
000678  dc06              BGT      |L1.1672|
;;;878                    {
;;;879                        scount = blob1->m_model & ~0x07;
00067a  8838              LDRH     r0,[r7,#0]
00067c  f0200907          BIC      r9,r0,#7
;;;880                        blob0->m_model |= scount;
000680  8820              LDRH     r0,[r4,#0]
000682  ea400009          ORR      r0,r0,r9
000686  8020              STRH     r0,[r4,#0]
                  |L1.1672|
000688  370a              ADDS     r7,r7,#0xa            ;861
                  |L1.1674|
00068a  4557              CMP      r7,r10                ;861
00068c  d3c3              BCC      |L1.1558|
00068e  340a              ADDS     r4,r4,#0xa            ;859
                  |L1.1680|
000690  4554              CMP      r4,r10                ;859
000692  d3bd              BCC      |L1.1552|
;;;881                    }
;;;882                }
;;;883            }
;;;884        }
;;;885    
;;;886    #if 1
;;;887        // 2nd pass: merge blob clumps
;;;888        for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
000694  f8d640cc          LDR      r4,[r6,#0xcc]
000698  e025              B        |L1.1766|
                  |L1.1690|
;;;889        {
;;;890            if (blob0->m_model<=NUM_MODELS) // skip normal blobs
00069a  8820              LDRH     r0,[r4,#0]
00069c  2807              CMP      r0,#7
00069e  dc00              BGT      |L1.1698|
;;;891                continue;
0006a0  e020              B        |L1.1764|
                  |L1.1698|
;;;892            scount = blob0->m_model&~0x07;
0006a2  8820              LDRH     r0,[r4,#0]
0006a4  f0200907          BIC      r9,r0,#7
;;;893            for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
0006a8  f104070a          ADD      r7,r4,#0xa
0006ac  e017              B        |L1.1758|
                  |L1.1710|
;;;894            {
;;;895                if (blob1->m_model<=NUM_MODELS)
0006ae  8838              LDRH     r0,[r7,#0]
0006b0  2807              CMP      r0,#7
0006b2  dc00              BGT      |L1.1718|
;;;896                    continue;
0006b4  e012              B        |L1.1756|
                  |L1.1718|
;;;897    
;;;898                scount1 = blob1->m_model&~0x07;
0006b6  8838              LDRH     r0,[r7,#0]
0006b8  f0200007          BIC      r0,r0,#7
0006bc  9013              STR      r0,[sp,#0x4c]
;;;899                if (scount!=scount1 && closeby(blob0, blob1))
0006be  9813              LDR      r0,[sp,#0x4c]
0006c0  4581              CMP      r9,r0
0006c2  d00a              BEQ      |L1.1754|
0006c4  463a              MOV      r2,r7
0006c6  4621              MOV      r1,r4
0006c8  4630              MOV      r0,r6
0006ca  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
0006ce  b120              CBZ      r0,|L1.1754|
;;;900                    mergeClumps(scount, scount1);
0006d0  4649              MOV      r1,r9
0006d2  4630              MOV      r0,r6
0006d4  9a13              LDR      r2,[sp,#0x4c]
0006d6  f7fffffe          BL       _ZN5Blobs11mergeClumpsEtt ; Blobs::mergeClumps(unsigned short, unsigned short)
                  |L1.1754|
0006da  bf00              NOP                            ;896
                  |L1.1756|
0006dc  370a              ADDS     r7,r7,#0xa            ;893
                  |L1.1758|
0006de  4557              CMP      r7,r10                ;893
0006e0  d3e5              BCC      |L1.1710|
0006e2  bf00              NOP                            ;891
                  |L1.1764|
0006e4  340a              ADDS     r4,r4,#0xa            ;888
                  |L1.1766|
0006e6  4554              CMP      r4,r10                ;888
0006e8  d3d7              BCC      |L1.1690|
;;;901            }
;;;902        }
;;;903    #endif
;;;904    
;;;905        // 3rd and final pass, find each blob clean it up and add it to the table
;;;906        endBlobB = (BlobB *)((BlobA *)m_blobs + MAX_BLOBS)-1;
0006ea  f8d600cc          LDR      r0,[r6,#0xcc]
0006ee  f5007077          ADD      r0,r0,#0x3dc
0006f2  900b              STR      r0,[sp,#0x2c]
;;;907        for (i=1, codedBlob = m_ccBlobs, m_numCCBlobs=0; i<=count && codedBlob<endBlobB; i++)
0006f4  f04f0b01          MOV      r11,#1
0006f8  f8d680d4          LDR      r8,[r6,#0xd4]
0006fc  2000              MOVS     r0,#0
0006fe  f8a600d8          STRH     r0,[r6,#0xd8]
000702  e11f              B        |L1.2372|
                  |L1.1796|
;;;908        {
;;;909            scount = i<<3;
000704  f64f70ff          MOV      r0,#0xffff
000708  ea0009cb          AND      r9,r0,r11,LSL #3
;;;910            // find all blobs with index i
;;;911            for (j=0, blob0=(BlobA *)m_blobs; blob0<endBlob && j<MAX_COLOR_CODE_MODELS*2; blob0++)
00070c  2000              MOVS     r0,#0
00070e  9014              STR      r0,[sp,#0x50]
000710  f8d640cc          LDR      r4,[r6,#0xcc]
000714  e00e              B        |L1.1844|
                  |L1.1814|
;;;912            {
;;;913                if ((blob0->m_model&~0x07)==scount)
000716  8820              LDRH     r0,[r4,#0]
000718  f0200007          BIC      r0,r0,#7
00071c  4548              CMP      r0,r9
00071e  d108              BNE      |L1.1842|
;;;914                    blobs[j++] = blob0;
000720  f9bd1050          LDRSH    r1,[sp,#0x50]
000724  b288              UXTH     r0,r1
000726  1c40              ADDS     r0,r0,#1
000728  b200              SXTH     r0,r0
00072a  9014              STR      r0,[sp,#0x50]
00072c  a801              ADD      r0,sp,#4
00072e  f8404021          STR      r4,[r0,r1,LSL #2]
                  |L1.1842|
000732  340a              ADDS     r4,r4,#0xa            ;911
                  |L1.1844|
000734  4554              CMP      r4,r10                ;911
000736  d203              BCS      |L1.1856|
000738  f9bd0050          LDRSH    r0,[sp,#0x50]         ;911
00073c  280a              CMP      r0,#0xa               ;911
00073e  dbea              BLT      |L1.1814|
                  |L1.1856|
;;;915            }
;;;916    
;;;917    #if 1
;;;918            // cleanup blobs, deal with cases where there are more blobs than models
;;;919            cleanup(blobs, &j);
000740  aa14              ADD      r2,sp,#0x50
000742  a901              ADD      r1,sp,#4
000744  4630              MOV      r0,r6
000746  f7fffffe          BL       _ZN5Blobs7cleanupEPP5BlobAPs ; Blobs::cleanup(BlobA**, short*)
;;;920    #endif
;;;921    
;;;922            if (j<2)
00074a  f9bd0050          LDRSH    r0,[sp,#0x50]
00074e  2802              CMP      r0,#2
000750  da00              BGE      |L1.1876|
;;;923                continue;
000752  e0f3              B        |L1.2364|
                  |L1.1876|
;;;924    
;;;925            // find left, right, top, bottom of color coded block
;;;926            for (k=0, left=right=top=bottom=0; k<j; k++)
000754  2500              MOVS     r5,#0
000756  2000              MOVS     r0,#0
000758  900e              STR      r0,[sp,#0x38]
00075a  900f              STR      r0,[sp,#0x3c]
00075c  9010              STR      r0,[sp,#0x40]
00075e  9011              STR      r0,[sp,#0x44]
000760  e02d              B        |L1.1982|
                  |L1.1890|
;;;927            {
;;;928                //qDebug("* cc %x %d i %d: %d %d %d %d %d", blobs[k], m_numCCBlobs, k, blobs[k]->m_model, blobs[k]->m_left, blobs[k]->m_right, blobs[k]->m_top, blobs[k]->m_bottom);
;;;929                if (blobs[left]->m_left > blobs[k]->m_left)
000762  a901              ADD      r1,sp,#4
000764  9811              LDR      r0,[sp,#0x44]
000766  f8510020          LDR      r0,[r1,r0,LSL #2]
00076a  8840              LDRH     r0,[r0,#2]
00076c  f8511025          LDR      r1,[r1,r5,LSL #2]
000770  8849              LDRH     r1,[r1,#2]
000772  4288              CMP      r0,r1
000774  dd00              BLE      |L1.1912|
;;;930                    left = k;
000776  9511              STR      r5,[sp,#0x44]
                  |L1.1912|
;;;931                if (blobs[top]->m_top > blobs[k]->m_top)
000778  a901              ADD      r1,sp,#4
00077a  980f              LDR      r0,[sp,#0x3c]
00077c  f8510020          LDR      r0,[r1,r0,LSL #2]
000780  88c0              LDRH     r0,[r0,#6]
000782  f8511025          LDR      r1,[r1,r5,LSL #2]
000786  88c9              LDRH     r1,[r1,#6]
000788  4288              CMP      r0,r1
00078a  dd00              BLE      |L1.1934|
;;;932                    top = k;
00078c  950f              STR      r5,[sp,#0x3c]
                  |L1.1934|
;;;933                if (blobs[right]->m_right < blobs[k]->m_right)
00078e  a901              ADD      r1,sp,#4
000790  9810              LDR      r0,[sp,#0x40]
000792  f8510020          LDR      r0,[r1,r0,LSL #2]
000796  8880              LDRH     r0,[r0,#4]
000798  f8511025          LDR      r1,[r1,r5,LSL #2]
00079c  8889              LDRH     r1,[r1,#4]
00079e  4288              CMP      r0,r1
0007a0  da00              BGE      |L1.1956|
;;;934                    right = k;
0007a2  9510              STR      r5,[sp,#0x40]
                  |L1.1956|
;;;935                if (blobs[bottom]->m_bottom < blobs[k]->m_bottom)
0007a4  a901              ADD      r1,sp,#4
0007a6  980e              LDR      r0,[sp,#0x38]
0007a8  f8510020          LDR      r0,[r1,r0,LSL #2]
0007ac  8900              LDRH     r0,[r0,#8]
0007ae  f8511025          LDR      r1,[r1,r5,LSL #2]
0007b2  8909              LDRH     r1,[r1,#8]
0007b4  4288              CMP      r0,r1
0007b6  da00              BGE      |L1.1978|
;;;936                    bottom = k;
0007b8  950e              STR      r5,[sp,#0x38]
                  |L1.1978|
0007ba  1c68              ADDS     r0,r5,#1              ;926
0007bc  b205              SXTH     r5,r0                 ;926
                  |L1.1982|
0007be  f9bd0050          LDRSH    r0,[sp,#0x50]         ;926
0007c2  4285              CMP      r5,r0                 ;926
0007c4  dbcd              BLT      |L1.1890|
;;;937            }
;;;938            codedBlob->m_left = blobs[left]->m_left;
0007c6  a901              ADD      r1,sp,#4
0007c8  9811              LDR      r0,[sp,#0x44]
0007ca  f8510020          LDR      r0,[r1,r0,LSL #2]
0007ce  8840              LDRH     r0,[r0,#2]
0007d0  f8a80002          STRH     r0,[r8,#2]
;;;939            codedBlob->m_right = blobs[right]->m_right;
0007d4  9810              LDR      r0,[sp,#0x40]
0007d6  f8510020          LDR      r0,[r1,r0,LSL #2]
0007da  8880              LDRH     r0,[r0,#4]
0007dc  f8a80004          STRH     r0,[r8,#4]
;;;940            codedBlob->m_top = blobs[top]->m_top;
0007e0  980f              LDR      r0,[sp,#0x3c]
0007e2  f8510020          LDR      r0,[r1,r0,LSL #2]
0007e6  88c0              LDRH     r0,[r0,#6]
0007e8  f8a80006          STRH     r0,[r8,#6]
;;;941            codedBlob->m_bottom = blobs[bottom]->m_bottom;
0007ec  980e              LDR      r0,[sp,#0x38]
0007ee  f8510020          LDR      r0,[r1,r0,LSL #2]
0007f2  8900              LDRH     r0,[r0,#8]
0007f4  f8a80008          STRH     r0,[r8,#8]
;;;942    
;;;943    #if 1
;;;944            // is it more horizontal than vertical?
;;;945            if (blobs[right]->m_right-blobs[left]->m_left > blobs[bottom]->m_bottom-blobs[top]->m_top)
0007f8  9810              LDR      r0,[sp,#0x40]
0007fa  f8510020          LDR      r0,[r1,r0,LSL #2]
0007fe  8881              LDRH     r1,[r0,#4]
000800  aa01              ADD      r2,sp,#4
000802  9811              LDR      r0,[sp,#0x44]
000804  f8520020          LDR      r0,[r2,r0,LSL #2]
000808  8840              LDRH     r0,[r0,#2]
00080a  1a09              SUBS     r1,r1,r0
00080c  980e              LDR      r0,[sp,#0x38]
00080e  f8520020          LDR      r0,[r2,r0,LSL #2]
000812  8902              LDRH     r2,[r0,#8]
000814  ab01              ADD      r3,sp,#4
000816  980f              LDR      r0,[sp,#0x3c]
000818  f8530020          LDR      r0,[r3,r0,LSL #2]
00081c  88c0              LDRH     r0,[r0,#6]
00081e  1a10              SUBS     r0,r2,r0
000820  4281              CMP      r1,r0
000822  dd0c              BLE      |L1.2110|
;;;946                sort(blobs, j, blobs[left], true);
000824  2001              MOVS     r0,#1
000826  a901              ADD      r1,sp,#4
000828  9000              STR      r0,[sp,#0]
00082a  9811              LDR      r0,[sp,#0x44]
00082c  f8513020          LDR      r3,[r1,r0,LSL #2]
000830  f8bd0050          LDRH     r0,[sp,#0x50]
000834  b282              UXTH     r2,r0
000836  4630              MOV      r0,r6
000838  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
00083c  e00b              B        |L1.2134|
                  |L1.2110|
;;;947            else
;;;948                sort(blobs, j, blobs[top], false);
00083e  2000              MOVS     r0,#0
000840  a901              ADD      r1,sp,#4
000842  9000              STR      r0,[sp,#0]
000844  980f              LDR      r0,[sp,#0x3c]
000846  f8513020          LDR      r3,[r1,r0,LSL #2]
00084a  f8bd0050          LDRH     r0,[sp,#0x50]
00084e  b282              UXTH     r2,r0
000850  4630              MOV      r0,r6
000852  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
                  |L1.2134|
;;;949    
;;;950    #if 1
;;;951            cleanup2(blobs, &j);
000856  aa14              ADD      r2,sp,#0x50
000858  a901              ADD      r1,sp,#4
00085a  4630              MOV      r0,r6
00085c  f7fffffe          BL       _ZN5Blobs8cleanup2EPP5BlobAPs ; Blobs::cleanup2(BlobA**, short*)
;;;952            if (j<2)
000860  f9bd0050          LDRSH    r0,[sp,#0x50]
000864  2802              CMP      r0,#2
000866  da00              BGE      |L1.2154|
;;;953                continue;
000868  e068              B        |L1.2364|
                  |L1.2154|
;;;954            else if (j>5)
00086a  f9bd0050          LDRSH    r0,[sp,#0x50]
00086e  2805              CMP      r0,#5
000870  dd01              BLE      |L1.2166|
;;;955                j = 5;
000872  2005              MOVS     r0,#5
000874  9014              STR      r0,[sp,#0x50]
                  |L1.2166|
;;;956    #endif
;;;957            // create new blob, compare the coded models, pick the smaller one
;;;958            for (k=0, codedModel0=0; k<j; k++)
000876  2500              MOVS     r5,#0
000878  2000              MOVS     r0,#0
00087a  900d              STR      r0,[sp,#0x34]
00087c  e010              B        |L1.2208|
                  |L1.2174|
;;;959            {
;;;960                codedModel0 <<= 3;
00087e  f64f71ff          MOV      r1,#0xffff
000882  980d              LDR      r0,[sp,#0x34]
000884  ea0100c0          AND      r0,r1,r0,LSL #3
000888  900d              STR      r0,[sp,#0x34]
;;;961                codedModel0 |= blobs[k]->m_model&0x07;
00088a  a801              ADD      r0,sp,#4
00088c  f8500025          LDR      r0,[r0,r5,LSL #2]
000890  7800              LDRB     r0,[r0,#0]
000892  f0000007          AND      r0,r0,#7
000896  990d              LDR      r1,[sp,#0x34]
000898  4308              ORRS     r0,r0,r1
00089a  900d              STR      r0,[sp,#0x34]
00089c  1c68              ADDS     r0,r5,#1              ;958
00089e  b205              SXTH     r5,r0                 ;958
                  |L1.2208|
0008a0  f9bd0050          LDRSH    r0,[sp,#0x50]         ;958
0008a4  4285              CMP      r5,r0                 ;958
0008a6  dbea              BLT      |L1.2174|
;;;962            }
;;;963            for (k=j-1, codedModel=0; k>=0; k--)
0008a8  f8bd0050          LDRH     r0,[sp,#0x50]
0008ac  1e40              SUBS     r0,r0,#1
0008ae  b205              SXTH     r5,r0
0008b0  2000              MOVS     r0,#0
0008b2  900c              STR      r0,[sp,#0x30]
0008b4  e015              B        |L1.2274|
                  |L1.2230|
;;;964            {
;;;965                codedModel <<= 3;
0008b6  f64f71ff          MOV      r1,#0xffff
0008ba  980c              LDR      r0,[sp,#0x30]
0008bc  ea0100c0          AND      r0,r1,r0,LSL #3
0008c0  900c              STR      r0,[sp,#0x30]
;;;966                codedModel |= blobs[k]->m_model&0x07;
0008c2  a801              ADD      r0,sp,#4
0008c4  f8500025          LDR      r0,[r0,r5,LSL #2]
0008c8  7800              LDRB     r0,[r0,#0]
0008ca  f0000007          AND      r0,r0,#7
0008ce  990c              LDR      r1,[sp,#0x30]
0008d0  4308              ORRS     r0,r0,r1
0008d2  900c              STR      r0,[sp,#0x30]
;;;967                blobs[k]->m_model = 0; // invalidate
0008d4  2000              MOVS     r0,#0
0008d6  a901              ADD      r1,sp,#4
0008d8  f8511025          LDR      r1,[r1,r5,LSL #2]
0008dc  8008              STRH     r0,[r1,#0]
0008de  1e68              SUBS     r0,r5,#1              ;963
0008e0  b205              SXTH     r5,r0                 ;963
                  |L1.2274|
0008e2  2d00              CMP      r5,#0                 ;963
0008e4  dae7              BGE      |L1.2230|
;;;968            }
;;;969    
;;;970            if (codedModel0<codedModel)
0008e6  e9dd100c          LDRD     r1,r0,[sp,#0x30]
0008ea  4288              CMP      r0,r1
0008ec  da0f              BGE      |L1.2318|
;;;971            {
;;;972                codedBlob->m_model = codedModel0;
0008ee  980d              LDR      r0,[sp,#0x34]
0008f0  f8a80000          STRH     r0,[r8,#0]
;;;973                codedBlob->m_angle = angle(blobs[0], blobs[j-1]);
0008f4  f9bd0050          LDRSH    r0,[sp,#0x50]
0008f8  1e40              SUBS     r0,r0,#1
0008fa  ab01              ADD      r3,sp,#4
0008fc  f8532020          LDR      r2,[r3,r0,LSL #2]
000900  4630              MOV      r0,r6
000902  9901              LDR      r1,[sp,#4]
000904  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
000908  f8a8000a          STRH     r0,[r8,#0xa]
00090c  e00e              B        |L1.2348|
                  |L1.2318|
;;;974            }
;;;975            else
;;;976            {
;;;977                codedBlob->m_model = codedModel;
00090e  980c              LDR      r0,[sp,#0x30]
000910  f8a80000          STRH     r0,[r8,#0]
;;;978                codedBlob->m_angle = angle(blobs[j-1], blobs[0]);
000914  f9bd0050          LDRSH    r0,[sp,#0x50]
000918  1e40              SUBS     r0,r0,#1
00091a  ab01              ADD      r3,sp,#4
00091c  f8531020          LDR      r1,[r3,r0,LSL #2]
000920  4630              MOV      r0,r6
000922  9a01              LDR      r2,[sp,#4]
000924  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
000928  f8a8000a          STRH     r0,[r8,#0xa]
                  |L1.2348|
;;;979            }
;;;980    #endif
;;;981            //qDebug("cc %d %d %d %d %d", m_numCCBlobs, codedBlob->m_left, codedBlob->m_right, codedBlob->m_top, codedBlob->m_bottom);
;;;982            codedBlob++;
00092c  f108080c          ADD      r8,r8,#0xc
;;;983            m_numCCBlobs++;
000930  f8b600d8          LDRH     r0,[r6,#0xd8]
000934  1c40              ADDS     r0,r0,#1
000936  f8a600d8          STRH     r0,[r6,#0xd8]
00093a  bf00              NOP                            ;923
                  |L1.2364|
00093c  f10b0001          ADD      r0,r11,#1             ;907
000940  fa0ffb80          SXTH     r11,r0                ;907
                  |L1.2372|
000944  9812              LDR      r0,[sp,#0x48]         ;907
000946  4583              CMP      r11,r0                ;907
000948  dc03              BGT      |L1.2386|
00094a  980b              LDR      r0,[sp,#0x2c]         ;907
00094c  4580              CMP      r8,r0                 ;907
00094e  f4ffaed9          BCC      |L1.1796|
                  |L1.2386|
;;;984        }
;;;985    
;;;986        // 3rd pass, invalidate blobs
;;;987        for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
000952  f8d640cc          LDR      r4,[r6,#0xcc]
000956  e019              B        |L1.2444|
                  |L1.2392|
;;;988        {
;;;989            if (m_ccMode==MIXED)
000958  f89600ec          LDRB     r0,[r6,#0xec]
00095c  2803              CMP      r0,#3
00095e  d105              BNE      |L1.2412|
;;;990            {
;;;991                if (blob0->m_model>NUM_MODELS)
000960  8820              LDRH     r0,[r4,#0]
000962  2807              CMP      r0,#7
000964  dd11              BLE      |L1.2442|
;;;992                    blob0->m_model = 0;
000966  2000              MOVS     r0,#0
000968  8020              STRH     r0,[r4,#0]
00096a  e00e              B        |L1.2442|
                  |L1.2412|
;;;993            }
;;;994            else if (blob0->m_model>NUM_MODELS || CC_SIGNATURE(blob0->m_model))
00096c  8820              LDRH     r0,[r4,#0]
00096e  2807              CMP      r0,#7
000970  dc09              BGT      |L1.2438|
000972  f89600ec          LDRB     r0,[r6,#0xec]
000976  2802              CMP      r0,#2
000978  d005              BEQ      |L1.2438|
00097a  7821              LDRB     r1,[r4,#0]
00097c  6830              LDR      r0,[r6,#0]
00097e  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
000982  2801              CMP      r0,#1
000984  d101              BNE      |L1.2442|
                  |L1.2438|
;;;995                blob0->m_model = 0; // invalidate-- not part of a color code
000986  2000              MOVS     r0,#0
000988  8020              STRH     r0,[r4,#0]
                  |L1.2442|
00098a  340a              ADDS     r4,r4,#0xa            ;987
                  |L1.2444|
00098c  4554              CMP      r4,r10                ;987
00098e  d3e3              BCC      |L1.2392|
;;;996        }
;;;997    }
000990  b015              ADD      sp,sp,#0x54
000992  e8bd8ff0          POP      {r4-r11,pc}
;;;998    
                          ENDP

                  _ZN5Blobs7combineEPtt PROC ; Blobs::combine(unsigned short*, unsigned short)
;;;445    
;;;446    uint16_t Blobs::combine(uint16_t *blobs, uint16_t numBlobs)
000996  e92d4ffc          PUSH     {r2-r11,lr}
;;;447    {
00099a  4696              MOV      lr,r2
;;;448        uint16_t i, j, ii, jj, left0, right0, top0, bottom0;
;;;449        uint16_t left, right, top, bottom;
;;;450        uint16_t invalid;
;;;451    
;;;452        // delete blobs that are fully enclosed by larger blobs
;;;453        for (i=0, ii=0, invalid=0; i<numBlobs; i++, ii+=5)
00099c  2400              MOVS     r4,#0
00099e  2200              MOVS     r2,#0
0009a0  2000              MOVS     r0,#0
0009a2  9000              STR      r0,[sp,#0]
0009a4  e053              B        |L1.2638|
                  |L1.2470|
;;;454        {
;;;455            if (blobs[ii+0]==0)
0009a6  f8310012          LDRH     r0,[r1,r2,LSL #1]
0009aa  b900              CBNZ     r0,|L1.2478|
;;;456                continue;
0009ac  e04b              B        |L1.2630|
                  |L1.2478|
;;;457            left0 = blobs[ii+1];
0009ae  1c50              ADDS     r0,r2,#1
0009b0  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;458            right0 = blobs[ii+2];
0009b4  1c90              ADDS     r0,r2,#2
0009b6  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;459            top0 = blobs[ii+3];
0009ba  1cd0              ADDS     r0,r2,#3
0009bc  f8317010          LDRH     r7,[r1,r0,LSL #1]
;;;460            bottom0 = blobs[ii+4];
0009c0  1d10              ADDS     r0,r2,#4
0009c2  f831c010          LDRH     r12,[r1,r0,LSL #1]
;;;461    
;;;462            for (j=i+1, jj=ii+5; j<numBlobs; j++, jj+=5)
0009c6  1c60              ADDS     r0,r4,#1
0009c8  b280              UXTH     r0,r0
0009ca  9001              STR      r0,[sp,#4]
0009cc  1d50              ADDS     r0,r2,#5
0009ce  b283              UXTH     r3,r0
0009d0  e035              B        |L1.2622|
                  |L1.2514|
;;;463            {
;;;464                if (blobs[jj+0]==0)
0009d2  f8310013          LDRH     r0,[r1,r3,LSL #1]
0009d6  b900              CBNZ     r0,|L1.2522|
;;;465                    continue;
0009d8  e02b              B        |L1.2610|
                  |L1.2522|
;;;466                left = blobs[jj+1];
0009da  1c58              ADDS     r0,r3,#1
0009dc  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;467                right = blobs[jj+2];
0009e0  1c98              ADDS     r0,r3,#2
0009e2  f8319010          LDRH     r9,[r1,r0,LSL #1]
;;;468                top = blobs[jj+3];
0009e6  1cd8              ADDS     r0,r3,#3
0009e8  f831a010          LDRH     r10,[r1,r0,LSL #1]
;;;469                bottom = blobs[jj+4];
0009ec  1d18              ADDS     r0,r3,#4
0009ee  f831b010          LDRH     r11,[r1,r0,LSL #1]
;;;470    
;;;471                if (left0<=left && right0>=right && top0<=top && bottom0>=bottom)
0009f2  4545              CMP      r5,r8
0009f4  dc0d              BGT      |L1.2578|
0009f6  454e              CMP      r6,r9
0009f8  db0b              BLT      |L1.2578|
0009fa  4557              CMP      r7,r10
0009fc  dc09              BGT      |L1.2578|
0009fe  45dc              CMP      r12,r11
000a00  db07              BLT      |L1.2578|
;;;472                {
;;;473                    blobs[jj+0] = 0; // invalidate
000a02  2000              MOVS     r0,#0
000a04  f8210013          STRH     r0,[r1,r3,LSL #1]
;;;474                    invalid++;
000a08  9800              LDR      r0,[sp,#0]
000a0a  1c40              ADDS     r0,r0,#1
000a0c  b280              UXTH     r0,r0
000a0e  9000              STR      r0,[sp,#0]
000a10  e00e              B        |L1.2608|
                  |L1.2578|
;;;475                }
;;;476                else if (left<=left0 && right>=right0 && top<=top0 && bottom>=bottom0)
000a12  45a8              CMP      r8,r5
000a14  dc0c              BGT      |L1.2608|
000a16  45b1              CMP      r9,r6
000a18  db0a              BLT      |L1.2608|
000a1a  45ba              CMP      r10,r7
000a1c  dc08              BGT      |L1.2608|
000a1e  45e3              CMP      r11,r12
000a20  db06              BLT      |L1.2608|
;;;477                {
;;;478                    blobs[ii+0] = 0; // invalidate
000a22  2000              MOVS     r0,#0
000a24  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;479                    invalid++;
000a28  9800              LDR      r0,[sp,#0]
000a2a  1c40              ADDS     r0,r0,#1
000a2c  b280              UXTH     r0,r0
000a2e  9000              STR      r0,[sp,#0]
                  |L1.2608|
000a30  bf00              NOP                            ;465
                  |L1.2610|
000a32  9801              LDR      r0,[sp,#4]            ;462
000a34  1c40              ADDS     r0,r0,#1              ;462
000a36  b280              UXTH     r0,r0                 ;462
000a38  9001              STR      r0,[sp,#4]            ;462
000a3a  1d58              ADDS     r0,r3,#5              ;462
000a3c  b283              UXTH     r3,r0                 ;462
                  |L1.2622|
000a3e  9801              LDR      r0,[sp,#4]            ;462
000a40  4570              CMP      r0,lr                 ;462
000a42  dbc6              BLT      |L1.2514|
000a44  bf00              NOP                            ;456
                  |L1.2630|
000a46  1c60              ADDS     r0,r4,#1              ;453
000a48  b284              UXTH     r4,r0                 ;453
000a4a  1d50              ADDS     r0,r2,#5              ;453
000a4c  b282              UXTH     r2,r0                 ;453
                  |L1.2638|
000a4e  4574              CMP      r4,lr                 ;453
000a50  dba9              BLT      |L1.2470|
;;;480                }
;;;481            }
;;;482        }
;;;483    
;;;484        return invalid;
000a52  9800              LDR      r0,[sp,#0]
;;;485    }
000a54  e8bd8ffc          POP      {r2-r11,pc}
;;;486    
                          ENDP

                  _ZN5Blobs8combine2EPtt PROC ; Blobs::combine2(unsigned short*, unsigned short)
;;;487    uint16_t Blobs::combine2(uint16_t *blobs, uint16_t numBlobs)
000a58  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;488    {
000a5c  b083              SUB      sp,sp,#0xc
000a5e  4682              MOV      r10,r0
;;;489        uint16_t i, j, ii, jj, left0, right0, top0, bottom0;
;;;490        uint16_t left, right, top, bottom;
;;;491        uint16_t invalid;
;;;492    
;;;493        for (i=0, ii=0, invalid=0; i<numBlobs; i++, ii+=5)
000a60  2000              MOVS     r0,#0
000a62  9002              STR      r0,[sp,#8]
000a64  2300              MOVS     r3,#0
000a66  9000              STR      r0,[sp,#0]
000a68  e0a5              B        |L1.2998|
                  |L1.2666|
;;;494        {
;;;495            if (blobs[ii+0]==0)
000a6a  f8310013          LDRH     r0,[r1,r3,LSL #1]
000a6e  b900              CBNZ     r0,|L1.2674|
;;;496                continue;
000a70  e09b              B        |L1.2986|
                  |L1.2674|
;;;497            left0 = blobs[ii+1];
000a72  1c58              ADDS     r0,r3,#1
000a74  f831c010          LDRH     r12,[r1,r0,LSL #1]
;;;498            right0 = blobs[ii+2];
000a78  1c98              ADDS     r0,r3,#2
000a7a  f8318010          LDRH     r8,[r1,r0,LSL #1]
;;;499            top0 = blobs[ii+3];
000a7e  1cd8              ADDS     r0,r3,#3
000a80  f8319010          LDRH     r9,[r1,r0,LSL #1]
;;;500            bottom0 = blobs[ii+4];
000a84  1d18              ADDS     r0,r3,#4
000a86  f831b010          LDRH     r11,[r1,r0,LSL #1]
;;;501    
;;;502            for (j=i+1, jj=ii+5; j<numBlobs; j++, jj+=5)
000a8a  9802              LDR      r0,[sp,#8]
000a8c  1c40              ADDS     r0,r0,#1
000a8e  b280              UXTH     r0,r0
000a90  9001              STR      r0,[sp,#4]
000a92  1d58              ADDS     r0,r3,#5
000a94  b282              UXTH     r2,r0
000a96  e081              B        |L1.2972|
                  |L1.2712|
;;;503            {
;;;504                if (blobs[jj+0]==0)
000a98  f8310012          LDRH     r0,[r1,r2,LSL #1]
000a9c  b900              CBNZ     r0,|L1.2720|
;;;505                    continue;
000a9e  e077              B        |L1.2960|
                  |L1.2720|
;;;506                left = blobs[jj+1];
000aa0  1c50              ADDS     r0,r2,#1
000aa2  f8314010          LDRH     r4,[r1,r0,LSL #1]
;;;507                right = blobs[jj+2];
000aa6  1c90              ADDS     r0,r2,#2
000aa8  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;508                top = blobs[jj+3];
000aac  1cd0              ADDS     r0,r2,#3
000aae  f8316010          LDRH     r6,[r1,r0,LSL #1]
;;;509                bottom = blobs[jj+4];
000ab2  1d10              ADDS     r0,r2,#4
000ab4  f8317010          LDRH     r7,[r1,r0,LSL #1]
;;;510    
;;;511    #if 1 // if corners touch....
;;;512                if (left<=left0 && left0-right<=m_mergeDist &&
000ab8  4564              CMP      r4,r12
000aba  dc18              BGT      |L1.2798|
000abc  ebac0005          SUB      r0,r12,r5
000ac0  f8bae0e8          LDRH     lr,[r10,#0xe8]
000ac4  4570              CMP      r0,lr
000ac6  dc12              BGT      |L1.2798|
;;;513                        ((top0<=top && top<=bottom0) || (top0<=bottom && bottom<=bottom0)))
000ac8  45b1              CMP      r9,r6
000aca  dc01              BGT      |L1.2768|
000acc  455e              CMP      r6,r11
000ace  dd03              BLE      |L1.2776|
                  |L1.2768|
000ad0  45b9              CMP      r9,r7
000ad2  dc0c              BGT      |L1.2798|
000ad4  455f              CMP      r7,r11
000ad6  dc0a              BGT      |L1.2798|
                  |L1.2776|
;;;514                {
;;;515                    blobs[ii+1] = left;
000ad8  1c58              ADDS     r0,r3,#1
000ada  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;516                    blobs[jj+0] = 0; // invalidate
000ade  2000              MOVS     r0,#0
000ae0  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;517                    invalid++;
000ae4  9800              LDR      r0,[sp,#0]
000ae6  1c40              ADDS     r0,r0,#1
000ae8  b280              UXTH     r0,r0
000aea  9000              STR      r0,[sp,#0]
000aec  e04f              B        |L1.2958|
                  |L1.2798|
;;;518                }
;;;519                else if (right>=right0 && left-right0<=m_mergeDist &&
000aee  4545              CMP      r5,r8
000af0  db18              BLT      |L1.2852|
000af2  eba40008          SUB      r0,r4,r8
000af6  f8bae0e8          LDRH     lr,[r10,#0xe8]
000afa  4570              CMP      r0,lr
000afc  dc12              BGT      |L1.2852|
;;;520                         ((top0<=top && top<=bottom0) || (top0<=bottom && bottom<=bottom0)))
000afe  45b1              CMP      r9,r6
000b00  dc01              BGT      |L1.2822|
000b02  455e              CMP      r6,r11
000b04  dd03              BLE      |L1.2830|
                  |L1.2822|
000b06  45b9              CMP      r9,r7
000b08  dc0c              BGT      |L1.2852|
000b0a  455f              CMP      r7,r11
000b0c  dc0a              BGT      |L1.2852|
                  |L1.2830|
;;;521                {
;;;522                    blobs[ii+2] = right;
000b0e  1c98              ADDS     r0,r3,#2
000b10  f8215010          STRH     r5,[r1,r0,LSL #1]
;;;523                    blobs[jj+0] = 0; // invalidate
000b14  2000              MOVS     r0,#0
000b16  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;524                    invalid++;
000b1a  9800              LDR      r0,[sp,#0]
000b1c  1c40              ADDS     r0,r0,#1
000b1e  b280              UXTH     r0,r0
000b20  9000              STR      r0,[sp,#0]
000b22  e034              B        |L1.2958|
                  |L1.2852|
;;;525                }
;;;526                else if (top<=top0 && top0-bottom<=m_mergeDist &&
000b24  454e              CMP      r6,r9
000b26  dc18              BGT      |L1.2906|
000b28  eba90007          SUB      r0,r9,r7
000b2c  f8bae0e8          LDRH     lr,[r10,#0xe8]
000b30  4570              CMP      r0,lr
000b32  dc12              BGT      |L1.2906|
;;;527                         ((left0<=left && left<=right0) || (left0<=right && right<=right0)))
000b34  45a4              CMP      r12,r4
000b36  dc01              BGT      |L1.2876|
000b38  4544              CMP      r4,r8
000b3a  dd03              BLE      |L1.2884|
                  |L1.2876|
000b3c  45ac              CMP      r12,r5
000b3e  dc0c              BGT      |L1.2906|
000b40  4545              CMP      r5,r8
000b42  dc0a              BGT      |L1.2906|
                  |L1.2884|
;;;528                {
;;;529                    blobs[ii+3] = top;
000b44  1cd8              ADDS     r0,r3,#3
000b46  f8216010          STRH     r6,[r1,r0,LSL #1]
;;;530                    blobs[jj+0] = 0; // invalidate
000b4a  2000              MOVS     r0,#0
000b4c  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;531                    invalid++;
000b50  9800              LDR      r0,[sp,#0]
000b52  1c40              ADDS     r0,r0,#1
000b54  b280              UXTH     r0,r0
000b56  9000              STR      r0,[sp,#0]
000b58  e019              B        |L1.2958|
                  |L1.2906|
;;;532                }
;;;533                else if (bottom>=bottom0 && top-bottom0<=m_mergeDist &&
000b5a  455f              CMP      r7,r11
000b5c  db17              BLT      |L1.2958|
000b5e  eba6000b          SUB      r0,r6,r11
000b62  f8bae0e8          LDRH     lr,[r10,#0xe8]
000b66  4570              CMP      r0,lr
000b68  dc11              BGT      |L1.2958|
;;;534                         ((left0<=left && left<=right0) || (left0<=right && right<=right0)))
000b6a  45a4              CMP      r12,r4
000b6c  dc01              BGT      |L1.2930|
000b6e  4544              CMP      r4,r8
000b70  dd03              BLE      |L1.2938|
                  |L1.2930|
000b72  45ac              CMP      r12,r5
000b74  dc0b              BGT      |L1.2958|
000b76  4545              CMP      r5,r8
000b78  dc09              BGT      |L1.2958|
                  |L1.2938|
;;;535                {
;;;536                    blobs[ii+4] = bottom;
000b7a  1d18              ADDS     r0,r3,#4
000b7c  f8217010          STRH     r7,[r1,r0,LSL #1]
;;;537                    blobs[jj+0] = 0; // invalidate
000b80  2000              MOVS     r0,#0
000b82  f8210012          STRH     r0,[r1,r2,LSL #1]
;;;538                    invalid++;
000b86  9800              LDR      r0,[sp,#0]
000b88  1c40              ADDS     r0,r0,#1
000b8a  b280              UXTH     r0,r0
000b8c  9000              STR      r0,[sp,#0]
                  |L1.2958|
000b8e  bf00              NOP                            ;505
                  |L1.2960|
000b90  9801              LDR      r0,[sp,#4]            ;502
000b92  1c40              ADDS     r0,r0,#1              ;502
000b94  b280              UXTH     r0,r0                 ;502
000b96  9001              STR      r0,[sp,#4]            ;502
000b98  1d50              ADDS     r0,r2,#5              ;502
000b9a  b282              UXTH     r2,r0                 ;502
                  |L1.2972|
000b9c  f8dde014          LDR      lr,[sp,#0x14]         ;502
000ba0  9801              LDR      r0,[sp,#4]            ;502
000ba2  4570              CMP      r0,lr                 ;502
000ba4  f6ffaf78          BLT      |L1.2712|
000ba8  bf00              NOP                            ;496
                  |L1.2986|
000baa  9802              LDR      r0,[sp,#8]            ;493
000bac  1c40              ADDS     r0,r0,#1              ;493
000bae  b280              UXTH     r0,r0                 ;493
000bb0  9002              STR      r0,[sp,#8]            ;493
000bb2  1d58              ADDS     r0,r3,#5              ;493
000bb4  b283              UXTH     r3,r0                 ;493
                  |L1.2998|
000bb6  f8dde014          LDR      lr,[sp,#0x14]         ;493
000bba  9802              LDR      r0,[sp,#8]            ;493
000bbc  4570              CMP      r0,lr                 ;493
000bbe  f6ffaf54          BLT      |L1.2666|
;;;539                }
;;;540    #else // at least half of a side (the smaller adjacent side) has to overlap
;;;541                if (left<=left0 && left0-right<=m_mergeDist &&
;;;542                        ((top<=top0 && top0<=top+height) || (top+height<=bottom0 && bottom0<=bottom)))
;;;543                {
;;;544                    blobs[ii+1] = left;
;;;545                    blobs[jj+0] = 0; // invalidate
;;;546                    invalid++;
;;;547                }
;;;548                else if (right>=right0 && left-right0<=m_mergeDist &&
;;;549                         ((top<=top0 && top0<=top+height) || (top+height<=bottom0 && bottom0<=bottom)))
;;;550                {
;;;551                    blobs[ii+2] = right;
;;;552                    blobs[jj+0] = 0; // invalidate
;;;553                    invalid++;
;;;554                }
;;;555                else if (top<=top0 && top0-bottom<=m_mergeDist &&
;;;556                         ((left<=left0 && left0<=left+width) || (left+width<=right0 && right0<=right)))
;;;557                {
;;;558                    blobs[ii+3] = top;
;;;559                    blobs[jj+0] = 0; // invalidate
;;;560                    invalid++;
;;;561                }
;;;562                else if (bottom>=bottom0 && top-bottom0<=m_mergeDist &&
;;;563                         ((left<=left0 && left0<=left+width) || (left+width<=right0 && right0<=right)))
;;;564                {
;;;565                    blobs[ii+4] = bottom;
;;;566                    blobs[jj+0] = 0; // invalidate
;;;567                    invalid++;
;;;568                }
;;;569    #endif
;;;570            }
;;;571        }
;;;572    
;;;573        return invalid;
000bc2  9800              LDR      r0,[sp,#0]
;;;574    }
000bc4  b006              ADD      sp,sp,#0x18
000bc6  e8bd8ff0          POP      {r4-r11,pc}
;;;575    
                          ENDP

                  _ZN5Blobs6unpackEv PROC ; Blobs::unpack()
;;;174    
;;;175    void Blobs::unpack()
000bca  b5fe              PUSH     {r1-r7,lr}
;;;176    {
000bcc  4605              MOV      r5,r0
;;;177        SSegment s;
;;;178        int32_t row;
;;;179        bool memfull;
;;;180        uint32_t i;
;;;181        Qval qval;
;;;182    
;;;183        // q val:
;;;184        // | 4 bits    | 7 bits      | 9 bits | 9 bits    | 3 bits |
;;;185        // | shift val | shifted sum | length | begin col | model  |
;;;186    
;;;187        row = -1;
000bce  f04f36ff          MOV      r6,#0xffffffff
;;;188        memfull = false;
000bd2  2700              MOVS     r7,#0
;;;189        i = 0;
000bd4  2400              MOVS     r4,#0
;;;190    
;;;191        while(1)
000bd6  e04e              B        |L1.3190|
                  |L1.3032|
;;;192        {
;;;193            while (m_qq->dequeue(&qval)==0);
000bd8  bf00              NOP      
                  |L1.3034|
000bda  4669              MOV      r1,sp
000bdc  f8d500c8          LDR      r0,[r5,#0xc8]
000be0  f7fffffe          BL       _ZN6Qqueue7dequeueEPj ; Qqueue::dequeue(unsigned*)
000be4  2800              CMP      r0,#0
000be6  d0f8              BEQ      |L1.3034|
;;;194            if (qval==0xffffffff)
000be8  9800              LDR      r0,[sp,#0]
000bea  1c40              ADDS     r0,r0,#1
000bec  b900              CBNZ     r0,|L1.3056|
;;;195                break;
000bee  e043              B        |L1.3192|
                  |L1.3056|
;;;196            i++;
000bf0  1c64              ADDS     r4,r4,#1
;;;197            if (qval==0)
000bf2  9800              LDR      r0,[sp,#0]
000bf4  b908              CBNZ     r0,|L1.3066|
;;;198            {
;;;199                row++;
000bf6  1c76              ADDS     r6,r6,#1
;;;200                continue;
000bf8  e03d              B        |L1.3190|
                  |L1.3066|
;;;201            }
;;;202            s.model = qval&0x07;
000bfa  f89d1004          LDRB     r1,[sp,#4]
000bfe  9800              LDR      r0,[sp,#0]
000c00  f3600102          BFI      r1,r0,#0,#3
000c04  f88d1004          STRB     r1,[sp,#4]
;;;203            if (s.model>0 && !memfull)
000c08  f89d0004          LDRB     r0,[sp,#4]
000c0c  f0000007          AND      r0,r0,#7
000c10  2800              CMP      r0,#0
000c12  dd2f              BLE      |L1.3188|
000c14  bb77              CBNZ     r7,|L1.3188|
;;;204            {
;;;205                s.row = row;
000c16  f8bd0004          LDRH     r0,[sp,#4]
000c1a  f36600cb          BFI      r0,r6,#3,#9
000c1e  f8ad0004          STRH     r0,[sp,#4]
;;;206                qval >>= 3;
000c22  9800              LDR      r0,[sp,#0]
000c24  08c0              LSRS     r0,r0,#3
000c26  9000              STR      r0,[sp,#0]
;;;207                s.startCol = qval&0x1ff;
000c28  9800              LDR      r0,[sp,#0]
000c2a  f3c00008          UBFX     r0,r0,#0,#9
000c2e  f8ad0006          STRH     r0,[sp,#6]
;;;208                qval >>= 9;
000c32  9800              LDR      r0,[sp,#0]
000c34  0a40              LSRS     r0,r0,#9
000c36  9000              STR      r0,[sp,#0]
;;;209                s.endCol = (qval&0x1ff) + s.startCol;
000c38  9800              LDR      r0,[sp,#0]
000c3a  f3c00008          UBFX     r0,r0,#0,#9
000c3e  f8bd1006          LDRH     r1,[sp,#6]
000c42  f3c10109          UBFX     r1,r1,#0,#10
000c46  4408              ADD      r0,r0,r1
000c48  f8ad0008          STRH     r0,[sp,#8]
;;;210                if (m_assembler[s.model-1].Add(s)<0)
000c4c  f89d1004          LDRB     r1,[sp,#4]
000c50  f0010107          AND      r1,r1,#7
000c54  1e49              SUBS     r1,r1,#1
000c56  ebc102c1          RSB      r2,r1,r1,LSL #3
000c5a  1d29              ADDS     r1,r5,#4
000c5c  eb010082          ADD      r0,r1,r2,LSL #2
000c60  a901              ADD      r1,sp,#4
000c62  f7fffffe          BL       _ZN14CBlobAssembler3AddERK8SSegment ; CBlobAssembler::Add(const SSegment&)
000c66  2800              CMP      r0,#0
000c68  da04              BGE      |L1.3188|
;;;211                {
;;;212                    memfull = true;
000c6a  2701              MOVS     r7,#1
;;;213                    cprintf("heap full %d\n", i);
000c6c  4621              MOV      r1,r4
000c6e  a0fe              ADR      r0,|L1.4200|
000c70  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
                  |L1.3188|
000c74  bf00              NOP                            ;200
                  |L1.3190|
000c76  e7af              B        |L1.3032|
                  |L1.3192|
000c78  bf00              NOP                            ;195
;;;214                }
;;;215            }
;;;216        }
;;;217        //cprintf("rows %d %d\n", row, i);
;;;218        // finish frame
;;;219        for (i=0; i<NUM_MODELS; i++)
000c7a  2400              MOVS     r4,#0
000c7c  e00e              B        |L1.3228|
                  |L1.3198|
;;;220        {
;;;221            m_assembler[i].EndFrame();
000c7e  ebc402c4          RSB      r2,r4,r4,LSL #3
000c82  1d29              ADDS     r1,r5,#4
000c84  eb010082          ADD      r0,r1,r2,LSL #2
000c88  f7fffffe          BL       _ZN14CBlobAssembler8EndFrameEv ; CBlobAssembler::EndFrame()
;;;222            m_assembler[i].SortFinished();
000c8c  ebc402c4          RSB      r2,r4,r4,LSL #3
000c90  1d29              ADDS     r1,r5,#4
000c92  eb010082          ADD      r0,r1,r2,LSL #2
000c96  f7fffffe          BL       _ZN14CBlobAssembler12SortFinishedEv ; CBlobAssembler::SortFinished()
000c9a  1c64              ADDS     r4,r4,#1              ;219
                  |L1.3228|
000c9c  2c07              CMP      r4,#7                 ;219
000c9e  d3ee              BCC      |L1.3198|
;;;223        }
;;;224    }
000ca0  bdfe              POP      {r1-r7,pc}
;;;225    
                          ENDP

                  _ZN5Blobs7blobifyEv PROC ; Blobs::blobify()
;;;90     
;;;91     void Blobs::blobify()
000ca2  e92d4ff0          PUSH     {r4-r11,lr}
;;;92     {
000ca6  b087              SUB      sp,sp,#0x1c
000ca8  4604              MOV      r4,r0
;;;93         uint32_t i, j, k;
;;;94         bool colorCode;
;;;95         CBlob *blob;
;;;96         uint16_t *blobsStart;
;;;97         uint16_t numBlobsStart, invalid, invalid2;
;;;98         uint16_t left, top, right, bottom;
;;;99         //uint32_t timer, timer2=0;
;;;100    
;;;101        unpack();
000caa  4620              MOV      r0,r4
000cac  f7fffffe          BL       _ZN5Blobs6unpackEv ; Blobs::unpack()
;;;102    
;;;103        // copy blobs into memory
;;;104        invalid = 0;
000cb0  f04f0a00          MOV      r10,#0
;;;105        // mutex keeps interrupt routine from stepping on us
;;;106        m_mutex = true;
000cb4  2001              MOVS     r0,#1
000cb6  34d0              ADDS     r4,r4,#0xd0
000cb8  72a0              STRB     r0,[r4,#0xa]
;;;107        for (i=0, m_numBlobs=0, m_numCCBlobs=0; i<NUM_MODELS; i++)
000cba  2500              MOVS     r5,#0
000cbc  2000              MOVS     r0,#0
000cbe  8020              STRH     r0,[r4,#0]
000cc0  8120              STRH     r0,[r4,#8]
000cc2  3cd0              SUBS     r4,r4,#0xd0
000cc4  e089              B        |L1.3546|
                  |L1.3270|
;;;108        {
;;;109            colorCode = CC_SIGNATURE(i+1);
000cc6  f89400ec          LDRB     r0,[r4,#0xec]
000cca  2802              CMP      r0,#2
000ccc  d006              BEQ      |L1.3292|
000cce  1c6a              ADDS     r2,r5,#1
000cd0  b2d1              UXTB     r1,r2
000cd2  6820              LDR      r0,[r4,#0]
000cd4  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
000cd8  2801              CMP      r0,#1
000cda  d101              BNE      |L1.3296|
                  |L1.3292|
000cdc  2001              MOVS     r0,#1
000cde  e000              B        |L1.3298|
                  |L1.3296|
000ce0  2000              MOVS     r0,#0
                  |L1.3298|
000ce2  4681              MOV      r9,r0
;;;110    
;;;111            for (j=m_numBlobs*5, k=0, blobsStart=m_blobs+j, numBlobsStart=m_numBlobs, blob=m_assembler[i].finishedBlobs;
000ce4  34cc              ADDS     r4,r4,#0xcc
000ce6  88a0              LDRH     r0,[r4,#4]
000ce8  eb000680          ADD      r6,r0,r0,LSL #2
000cec  f04f0b00          MOV      r11,#0
000cf0  6820              LDR      r0,[r4,#0]
000cf2  eb000046          ADD      r0,r0,r6,LSL #1
000cf6  9006              STR      r0,[sp,#0x18]
000cf8  88a0              LDRH     r0,[r4,#4]
000cfa  3ccc              SUBS     r4,r4,#0xcc
000cfc  9005              STR      r0,[sp,#0x14]
000cfe  ebc501c5          RSB      r1,r5,r5,LSL #3
000d02  1d20              ADDS     r0,r4,#4
000d04  eb000081          ADD      r0,r0,r1,LSL #2
000d08  6907              LDR      r7,[r0,#0x10]
000d0a  e042              B        |L1.3474|
                  |L1.3340|
;;;112                 blob && m_numBlobs<m_maxBlobs && k<m_maxBlobsPerModel; blob=blob->next, k++)
;;;113            {
;;;114                if ((colorCode && blob->GetArea()<MIN_COLOR_CODE_AREA) ||
000d0c  f1b90f00          CMP      r9,#0
000d10  d003              BEQ      |L1.3354|
000d12  bf00              NOP      
000d14  6a38              LDR      r0,[r7,#0x20]
000d16  280a              CMP      r0,#0xa
000d18  db08              BLT      |L1.3372|
                  |L1.3354|
;;;115                    (!colorCode && blob->GetArea()<(int)m_minArea))
000d1a  f1b90f00          CMP      r9,#0
000d1e  d106              BNE      |L1.3374|
000d20  bf00              NOP      
000d22  6a38              LDR      r0,[r7,#0x20]
000d24  f8d410e4          LDR      r1,[r4,#0xe4]
000d28  4288              CMP      r0,r1
000d2a  da00              BGE      |L1.3374|
                  |L1.3372|
;;;116                    continue;
000d2c  e02e              B        |L1.3468|
                  |L1.3374|
;;;117                blob->getBBox((short &)left, (short &)top, (short &)right, (short &)bottom);
000d2e  a801              ADD      r0,sp,#4
000d30  8a39              LDRH     r1,[r7,#0x10]
000d32  9104              STR      r1,[sp,#0x10]
000d34  8a79              LDRH     r1,[r7,#0x12]
000d36  9103              STR      r1,[sp,#0xc]
000d38  8ab9              LDRH     r1,[r7,#0x14]
000d3a  9102              STR      r1,[sp,#8]
000d3c  88b9              LDRH     r1,[r7,#4]
000d3e  f3c101c8          UBFX     r1,r1,#3,#9
000d42  8001              STRH     r1,[r0,#0]
000d44  bf00              NOP      
;;;118                m_blobs[j + 0] = i+1;
000d46  1c68              ADDS     r0,r5,#1
000d48  f8541fcc          LDR      r1,[r4,#0xcc]!
000d4c  f8210016          STRH     r0,[r1,r6,LSL #1]
;;;119                m_blobs[j + 1] = left;
000d50  f8bd1010          LDRH     r1,[sp,#0x10]
000d54  1c70              ADDS     r0,r6,#1
000d56  6822              LDR      r2,[r4,#0]
000d58  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;120                m_blobs[j + 2] = right;
000d5c  f8bd1008          LDRH     r1,[sp,#8]
000d60  1cb0              ADDS     r0,r6,#2
000d62  6822              LDR      r2,[r4,#0]
000d64  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;121                m_blobs[j + 3] = top;
000d68  f8bd100c          LDRH     r1,[sp,#0xc]
000d6c  1cf0              ADDS     r0,r6,#3
000d6e  6822              LDR      r2,[r4,#0]
000d70  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;122                m_blobs[j + 4] = bottom;
000d74  f8bd1004          LDRH     r1,[sp,#4]
000d78  1d30              ADDS     r0,r6,#4
000d7a  6822              LDR      r2,[r4,#0]
000d7c  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;123                m_numBlobs++;
000d80  88a0              LDRH     r0,[r4,#4]
000d82  1c40              ADDS     r0,r0,#1
000d84  80a0              STRH     r0,[r4,#4]
000d86  3ccc              SUBS     r4,r4,#0xcc
;;;124                j += 5;
000d88  1d76              ADDS     r6,r6,#5
000d8a  bf00              NOP                            ;116
                  |L1.3468|
000d8c  683f              LDR      r7,[r7,#0]            ;112
000d8e  f10b0b01          ADD      r11,r11,#1            ;112
                  |L1.3474|
000d92  b14f              CBZ      r7,|L1.3496|
000d94  f8b400d0          LDRH     r0,[r4,#0xd0]         ;112
000d98  f8b410dc          LDRH     r1,[r4,#0xdc]         ;112
000d9c  4288              CMP      r0,r1                 ;112
000d9e  da03              BGE      |L1.3496|
000da0  f8b400de          LDRH     r0,[r4,#0xde]         ;112
000da4  4558              CMP      r0,r11                ;112
000da6  d8b1              BHI      |L1.3340|
                  |L1.3496|
;;;125    
;;;126            }
;;;127            //setTimer(&timer);
;;;128            if (!colorCode) // do not combine color code models
000da8  f1b90f00          CMP      r9,#0
000dac  d114              BNE      |L1.3544|
;;;129            {
;;;130                while(1) 
000dae  e011              B        |L1.3540|
                  |L1.3504|
;;;131                {
;;;132                    invalid2 = combine2(blobsStart, m_numBlobs-numBlobsStart);
000db0  f8b410d0          LDRH     r1,[r4,#0xd0]
000db4  9805              LDR      r0,[sp,#0x14]
000db6  1a08              SUBS     r0,r1,r0
000db8  b282              UXTH     r2,r0
000dba  4620              MOV      r0,r4
000dbc  9906              LDR      r1,[sp,#0x18]
000dbe  f7fffffe          BL       _ZN5Blobs8combine2EPtt ; Blobs::combine2(unsigned short*, unsigned short)
000dc2  4680              MOV      r8,r0
;;;133                    if (invalid2==0)
000dc4  f1b80f00          CMP      r8,#0
000dc8  d100              BNE      |L1.3532|
;;;134                        break;
000dca  e004              B        |L1.3542|
                  |L1.3532|
;;;135                    invalid += invalid2;
000dcc  eb0a0008          ADD      r0,r10,r8
000dd0  fa1ffa80          UXTH     r10,r0
                  |L1.3540|
000dd4  e7ec              B        |L1.3504|
                  |L1.3542|
000dd6  bf00              NOP                            ;134
                  |L1.3544|
000dd8  1c6d              ADDS     r5,r5,#1              ;107
                  |L1.3546|
000dda  2d07              CMP      r5,#7                 ;107
000ddc  f4ffaf73          BCC      |L1.3270|
;;;136                }
;;;137            }
;;;138            //timer2 += getTimer(timer);
;;;139        }
;;;140        //setTimer(&timer);
;;;141        invalid += combine(m_blobs, m_numBlobs);
000de0  f8b420d0          LDRH     r2,[r4,#0xd0]
000de4  4620              MOV      r0,r4
000de6  f8d410cc          LDR      r1,[r4,#0xcc]
000dea  f7fffffe          BL       _ZN5Blobs7combineEPtt ; Blobs::combine(unsigned short*, unsigned short)
000dee  4450              ADD      r0,r0,r10
000df0  fa1ffa80          UXTH     r10,r0
;;;142        if (m_ccMode!=DISABLED)
000df4  f89400ec          LDRB     r0,[r4,#0xec]
000df8  b158              CBZ      r0,|L1.3602|
;;;143        {
;;;144            m_ccBlobs = (BlobB *)(m_blobs + m_numBlobs*5);
000dfa  f8540fcc          LDR      r0,[r4,#0xcc]!
000dfe  88a1              LDRH     r1,[r4,#4]
000e00  eb010181          ADD      r1,r1,r1,LSL #2
000e04  eb000041          ADD      r0,r0,r1,LSL #1
000e08  60a0              STR      r0,[r4,#8]
000e0a  3ccc              SUBS     r4,r4,#0xcc
;;;145            // calculate number of codedblobs left
;;;146            processCC();
000e0c  4620              MOV      r0,r4
000e0e  f7fffffe          BL       _ZN5Blobs9processCCEv ; Blobs::processCC()
                  |L1.3602|
;;;147        }
;;;148        if (invalid || m_ccMode!=DISABLED)
000e12  f1ba0f00          CMP      r10,#0
000e16  d102              BNE      |L1.3614|
000e18  f89400ec          LDRB     r0,[r4,#0xec]
000e1c  b168              CBZ      r0,|L1.3642|
                  |L1.3614|
;;;149        {
;;;150            invalid2 = compress(m_blobs, m_numBlobs);
000e1e  f8b420d0          LDRH     r2,[r4,#0xd0]
000e22  4620              MOV      r0,r4
000e24  f8d410cc          LDR      r1,[r4,#0xcc]
000e28  f7fffffe          BL       _ZN5Blobs8compressEPtt ; Blobs::compress(unsigned short*, unsigned short)
000e2c  4680              MOV      r8,r0
;;;151            m_numBlobs -= invalid2;
000e2e  f8b400d0          LDRH     r0,[r4,#0xd0]
000e32  eba00008          SUB      r0,r0,r8
000e36  f8a400d0          STRH     r0,[r4,#0xd0]
                  |L1.3642|
;;;152        }
;;;153        //timer2 += getTimer(timer);
;;;154        //cprintf("time=%d\n", timer2); // never seen this greater than 200us.  or 1% of frame period
;;;155    
;;;156        // reset read indexes-- new frame
;;;157        m_blobReadIndex = 0;
000e3a  2000              MOVS     r0,#0
000e3c  34da              ADDS     r4,r4,#0xda
000e3e  80e0              STRH     r0,[r4,#6]
;;;158        m_ccBlobReadIndex = 0;
000e40  8120              STRH     r0,[r4,#8]
;;;159        m_mutex = false;
000e42  f80409da          STRB     r0,[r4],#-0xda
;;;160    
;;;161        // free memory
;;;162        for (i=0; i<NUM_MODELS; i++)
000e46  2500              MOVS     r5,#0
000e48  e007              B        |L1.3674|
                  |L1.3658|
;;;163            m_assembler[i].Reset();
000e4a  ebc502c5          RSB      r2,r5,r5,LSL #3
000e4e  1d21              ADDS     r1,r4,#4
000e50  eb010082          ADD      r0,r1,r2,LSL #2
000e54  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
000e58  1c6d              ADDS     r5,r5,#1              ;162
                  |L1.3674|
000e5a  2d07              CMP      r5,#7                 ;162
000e5c  d3f5              BCC      |L1.3658|
;;;164    
;;;165    #if 0
;;;166        static int frame = 0;
;;;167        if (m_numBlobs>0)
;;;168            cprintf("%d: blobs %d %d %d %d %d\n", frame, m_numBlobs, m_blobs[1], m_blobs[2], m_blobs[3], m_blobs[4]);
;;;169        else
;;;170            cprintf("%d: blobs 0\n", frame);
;;;171        frame++;
;;;172    #endif
;;;173    }
000e5e  b007              ADD      sp,sp,#0x1c
000e60  e8bd8ff0          POP      {r4-r11,pc}
;;;174    
                          ENDP

                  _ZN5Blobs10getCCBlockEPhj PROC ; Blobs::getCCBlock(unsigned char*, unsigned)
;;;225    
;;;226    uint16_t Blobs::getCCBlock(uint8_t *buf, uint32_t buflen)
000e64  e92d47f0          PUSH     {r4-r10,lr}
;;;227    {
000e68  4603              MOV      r3,r0
000e6a  468c              MOV      r12,r1
000e6c  4690              MOV      r8,r2
;;;228        uint16_t *buf16 = (uint16_t *)buf;
000e6e  4661              MOV      r1,r12
;;;229        uint16_t temp, width, height;
;;;230        uint16_t checksum;
;;;231        uint16_t len = 8;  // default
000e70  2708              MOVS     r7,#8
;;;232    
;;;233        if (buflen<9*sizeof(uint16_t))
000e72  f1b80f12          CMP      r8,#0x12
000e76  d202              BCS      |L1.3710|
;;;234            return 0;
000e78  2000              MOVS     r0,#0
                  |L1.3706|
;;;235    
;;;236        if (m_mutex || m_ccBlobReadIndex>=m_numCCBlobs) // we're copying, so no CC blocks for now....
;;;237        {	// return a couple null words to give us time to copy
;;;238            // (otherwise we may spend too much time in the ISR)
;;;239            buf16[0] = 0;
;;;240            buf16[1] = 0;
;;;241            return 2;
;;;242        }
;;;243    
;;;244        if (m_blobReadIndex==0 && m_ccBlobReadIndex==0)	// beginning of frame, mark it with empty block
;;;245        {
;;;246            buf16[0] = BL_BEGIN_MARKER;
;;;247            len++;
;;;248            buf16++;
;;;249        }
;;;250    
;;;251        // beginning of block
;;;252        buf16[0] = BL_BEGIN_MARKER_CC;
;;;253    
;;;254        // model
;;;255        temp = m_ccBlobs[m_ccBlobReadIndex].m_model;
;;;256        checksum = temp;
;;;257        buf16[2] = temp;
;;;258    
;;;259        // width
;;;260        width = m_ccBlobs[m_ccBlobReadIndex].m_right - m_ccBlobs[m_ccBlobReadIndex].m_left;
;;;261        checksum += width;
;;;262        buf16[5] = width;
;;;263    
;;;264        // height
;;;265        height = m_ccBlobs[m_ccBlobReadIndex].m_bottom - m_ccBlobs[m_ccBlobReadIndex].m_top;
;;;266        checksum += height;
;;;267        buf16[6] = height;
;;;268    
;;;269        // x center
;;;270        temp = m_ccBlobs[m_ccBlobReadIndex].m_left + width/2;
;;;271        checksum += temp;
;;;272        buf16[3] = temp;
;;;273    
;;;274        // y center
;;;275        temp = m_ccBlobs[m_ccBlobReadIndex].m_top + height/2;
;;;276        checksum += temp;
;;;277        buf16[4] = temp;
;;;278    
;;;279        temp = m_ccBlobs[m_ccBlobReadIndex].m_angle;
;;;280        checksum += temp;
;;;281        buf16[7] = temp;
;;;282    
;;;283        buf16[1] = checksum;
;;;284    
;;;285        // next blob
;;;286        m_ccBlobReadIndex++;
;;;287    
;;;288        return len*sizeof(uint16_t);
;;;289    }
000e7a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3710|
000e7e  f89300da          LDRB     r0,[r3,#0xda]         ;236
000e82  b928              CBNZ     r0,|L1.3728|
000e84  f8b300e2          LDRH     r0,[r3,#0xe2]         ;236
000e88  f8b390d8          LDRH     r9,[r3,#0xd8]         ;236
000e8c  4548              CMP      r0,r9                 ;236
000e8e  db04              BLT      |L1.3738|
                  |L1.3728|
000e90  2000              MOVS     r0,#0                 ;239
000e92  8008              STRH     r0,[r1,#0]            ;239
000e94  8048              STRH     r0,[r1,#2]            ;240
000e96  2002              MOVS     r0,#2                 ;241
000e98  e7ef              B        |L1.3706|
                  |L1.3738|
000e9a  f8b300e0          LDRH     r0,[r3,#0xe0]         ;244
000e9e  b940              CBNZ     r0,|L1.3762|
000ea0  f8b300e2          LDRH     r0,[r3,#0xe2]         ;244
000ea4  b928              CBNZ     r0,|L1.3762|
000ea6  f64a2055          MOV      r0,#0xaa55            ;246
000eaa  8008              STRH     r0,[r1,#0]            ;246
000eac  1c78              ADDS     r0,r7,#1              ;247
000eae  b287              UXTH     r7,r0                 ;247
000eb0  1c89              ADDS     r1,r1,#2              ;248
                  |L1.3762|
000eb2  f64a2056          MOV      r0,#0xaa56            ;252
000eb6  8008              STRH     r0,[r1,#0]            ;252
000eb8  f8530fd4          LDR      r0,[r3,#0xd4]!        ;255
000ebc  f8b3900e          LDRH     r9,[r3,#0xe]          ;255
000ec0  eb090949          ADD      r9,r9,r9,LSL #1       ;255
000ec4  f8302029          LDRH     r2,[r0,r9,LSL #2]     ;255
000ec8  4614              MOV      r4,r2                 ;256
000eca  808a              STRH     r2,[r1,#4]            ;257
000ecc  f8b3900e          LDRH     r9,[r3,#0xe]          ;260
000ed0  eb090949          ADD      r9,r9,r9,LSL #1       ;260
000ed4  6818              LDR      r0,[r3,#0]            ;260
000ed6  eb000089          ADD      r0,r0,r9,LSL #2       ;260
000eda  8880              LDRH     r0,[r0,#4]            ;260
000edc  f8b3a00e          LDRH     r10,[r3,#0xe]         ;260
000ee0  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;260
000ee4  f8d39000          LDR      r9,[r3,#0]            ;260
000ee8  eb09098a          ADD      r9,r9,r10,LSL #2      ;260
000eec  f8b99002          LDRH     r9,[r9,#2]            ;260
000ef0  eba00009          SUB      r0,r0,r9              ;260
000ef4  b285              UXTH     r5,r0                 ;260
000ef6  1960              ADDS     r0,r4,r5              ;261
000ef8  b284              UXTH     r4,r0                 ;261
000efa  814d              STRH     r5,[r1,#0xa]          ;262
000efc  f8b3900e          LDRH     r9,[r3,#0xe]          ;265
000f00  eb090949          ADD      r9,r9,r9,LSL #1       ;265
000f04  6818              LDR      r0,[r3,#0]            ;265
000f06  eb000089          ADD      r0,r0,r9,LSL #2       ;265
000f0a  8900              LDRH     r0,[r0,#8]            ;265
000f0c  f8b3a00e          LDRH     r10,[r3,#0xe]         ;265
000f10  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;265
000f14  f8d39000          LDR      r9,[r3,#0]            ;265
000f18  eb09098a          ADD      r9,r9,r10,LSL #2      ;265
000f1c  f8b99006          LDRH     r9,[r9,#6]            ;265
000f20  eba00009          SUB      r0,r0,r9              ;265
000f24  b286              UXTH     r6,r0                 ;265
000f26  19a0              ADDS     r0,r4,r6              ;266
000f28  b284              UXTH     r4,r0                 ;266
000f2a  818e              STRH     r6,[r1,#0xc]          ;267
000f2c  f8b3a00e          LDRH     r10,[r3,#0xe]         ;270
000f30  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;270
000f34  f8d39000          LDR      r9,[r3,#0]            ;270
000f38  eb09098a          ADD      r9,r9,r10,LSL #2      ;270
000f3c  f8b99002          LDRH     r9,[r9,#2]            ;270
000f40  4628              MOV      r0,r5                 ;270
000f42  eb057ad0          ADD      r10,r5,r0,LSR #31     ;270
000f46  eb09096a          ADD      r9,r9,r10,ASR #1      ;270
000f4a  fa1ff289          UXTH     r2,r9                 ;270
000f4e  18a0              ADDS     r0,r4,r2              ;271
000f50  b284              UXTH     r4,r0                 ;271
000f52  80ca              STRH     r2,[r1,#6]            ;272
000f54  f8b3a00e          LDRH     r10,[r3,#0xe]         ;275
000f58  eb0a0a4a          ADD      r10,r10,r10,LSL #1    ;275
000f5c  f8d39000          LDR      r9,[r3,#0]            ;275
000f60  eb09098a          ADD      r9,r9,r10,LSL #2      ;275
000f64  f8b99006          LDRH     r9,[r9,#6]            ;275
000f68  4630              MOV      r0,r6                 ;275
000f6a  eb067ad0          ADD      r10,r6,r0,LSR #31     ;275
000f6e  eb09096a          ADD      r9,r9,r10,ASR #1      ;275
000f72  fa1ff289          UXTH     r2,r9                 ;275
000f76  18a0              ADDS     r0,r4,r2              ;276
000f78  b284              UXTH     r4,r0                 ;276
000f7a  810a              STRH     r2,[r1,#8]            ;277
000f7c  f8b3900e          LDRH     r9,[r3,#0xe]          ;279
000f80  eb090949          ADD      r9,r9,r9,LSL #1       ;279
000f84  6818              LDR      r0,[r3,#0]            ;279
000f86  eb000089          ADD      r0,r0,r9,LSL #2       ;279
000f8a  8940              LDRH     r0,[r0,#0xa]          ;279
000f8c  b282              UXTH     r2,r0                 ;279
000f8e  18a0              ADDS     r0,r4,r2              ;280
000f90  b284              UXTH     r4,r0                 ;280
000f92  81ca              STRH     r2,[r1,#0xe]          ;281
000f94  804c              STRH     r4,[r1,#2]            ;283
000f96  89d8              LDRH     r0,[r3,#0xe]          ;286
000f98  1c40              ADDS     r0,r0,#1              ;286
000f9a  81d8              STRH     r0,[r3,#0xe]          ;286
000f9c  3bd4              SUBS     r3,r3,#0xd4           ;286
000f9e  f64f70ff          MOV      r0,#0xffff            ;288
000fa2  ea000047          AND      r0,r0,r7,LSL #1       ;288
000fa6  e768              B        |L1.3706|
;;;290    
                          ENDP

                  _ZN5Blobs8getBlockEPhj PROC ; Blobs::getBlock(unsigned char*, unsigned)
;;;291    
;;;292    uint16_t Blobs::getBlock(uint8_t *buf, uint32_t buflen)
000fa8  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;293    {							
000fac  4604              MOV      r4,r0
;;;294        uint16_t *buf16 = (uint16_t *)buf;
000fae  9d01              LDR      r5,[sp,#4]
;;;295        uint16_t temp, width, height;
;;;296        uint16_t checksum;
;;;297        uint16_t len = 7;  // default
000fb0  f04f0b07          MOV      r11,#7
;;;298        int i = m_blobReadIndex*5;
000fb4  f8b400e0          LDRH     r0,[r4,#0xe0]
000fb8  eb000780          ADD      r7,r0,r0,LSL #2
;;;299    
;;;300        if (buflen<8*sizeof(uint16_t))
000fbc  9802              LDR      r0,[sp,#8]
000fbe  2810              CMP      r0,#0x10
000fc0  d202              BCS      |L1.4040|
;;;301            return 0;
000fc2  2000              MOVS     r0,#0
                  |L1.4036|
;;;302    
;;;303        if (m_blobReadIndex>=m_numBlobs && m_ccMode!=DISABLED)
;;;304            return getCCBlock(buf, buflen);
;;;305    
;;;306        if (m_mutex || m_blobReadIndex>=m_numBlobs) // we're copying, so no blocks for now....
;;;307        {	// return a couple null words to give us time to copy
;;;308            // (otherwise we may spend too much time in the ISR)
;;;309            buf16[0] = 0;
;;;310            buf16[1] = 0;
;;;311            return 2;
;;;312        }
;;;313    
;;;314        if (m_blobReadIndex==0)	// beginning of frame, mark it with empty block
;;;315        {
;;;316            buf16[0] = BL_BEGIN_MARKER;
;;;317            len++;
;;;318            buf16++;
;;;319        }
;;;320    
;;;321        // beginning of block
;;;322        buf16[0] = BL_BEGIN_MARKER;
;;;323    
;;;324        // model
;;;325        temp = m_blobs[i];
;;;326        checksum = temp;
;;;327        buf16[2] = temp;
;;;328    
;;;329        // width
;;;330        width = m_blobs[i+2] - m_blobs[i+1];
;;;331        checksum += width;
;;;332        buf16[5] = width;
;;;333    
;;;334        // height
;;;335        height = m_blobs[i+4] - m_blobs[i+3];
;;;336        checksum += height;
;;;337        buf16[6] = height;
;;;338    
;;;339        // x center
;;;340        temp = m_blobs[i+1] + width/2;
;;;341        checksum += temp;
;;;342        buf16[3] = temp;
;;;343    
;;;344        // y center
;;;345        temp = m_blobs[i+3] + height/2;
;;;346        checksum += temp;
;;;347        buf16[4] = temp;
;;;348    
;;;349        buf16[1] = checksum;
;;;350    
;;;351        // next blob
;;;352        m_blobReadIndex++;
;;;353    
;;;354        return len*sizeof(uint16_t);
;;;355    }
000fc4  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.4040|
000fc8  f8b400e0          LDRH     r0,[r4,#0xe0]         ;303
000fcc  f8b410d0          LDRH     r1,[r4,#0xd0]         ;303
000fd0  4288              CMP      r0,r1                 ;303
000fd2  db08              BLT      |L1.4070|
000fd4  f89400ec          LDRB     r0,[r4,#0xec]         ;303
000fd8  b128              CBZ      r0,|L1.4070|
000fda  4620              MOV      r0,r4                 ;304
000fdc  e9dd1201          LDRD     r1,r2,[sp,#4]         ;304
000fe0  f7fffffe          BL       _ZN5Blobs10getCCBlockEPhj ; Blobs::getCCBlock(unsigned char*, unsigned)
000fe4  e7ee              B        |L1.4036|
                  |L1.4070|
000fe6  f89400da          LDRB     r0,[r4,#0xda]         ;306
000fea  b928              CBNZ     r0,|L1.4088|
000fec  f8b400e0          LDRH     r0,[r4,#0xe0]         ;306
000ff0  f8b410d0          LDRH     r1,[r4,#0xd0]         ;306
000ff4  4288              CMP      r0,r1                 ;306
000ff6  db04              BLT      |L1.4098|
                  |L1.4088|
000ff8  2000              MOVS     r0,#0                 ;309
000ffa  8028              STRH     r0,[r5,#0]            ;309
000ffc  8068              STRH     r0,[r5,#2]            ;310
000ffe  2002              MOVS     r0,#2                 ;311
001000  e7e0              B        |L1.4036|
                  |L1.4098|
001002  f8b400e0          LDRH     r0,[r4,#0xe0]         ;314
001006  b938              CBNZ     r0,|L1.4120|
001008  f64a2055          MOV      r0,#0xaa55            ;316
00100c  8028              STRH     r0,[r5,#0]            ;316
00100e  f10b0001          ADD      r0,r11,#1             ;317
001012  fa1ffb80          UXTH     r11,r0                ;317
001016  1cad              ADDS     r5,r5,#2              ;318
                  |L1.4120|
001018  f64a2055          MOV      r0,#0xaa55            ;322
00101c  8028              STRH     r0,[r5,#0]            ;322
00101e  f8540fcc          LDR      r0,[r4,#0xcc]!        ;325
001022  f8306017          LDRH     r6,[r0,r7,LSL #1]     ;325
001026  46b0              MOV      r8,r6                 ;326
001028  80ae              STRH     r6,[r5,#4]            ;327
00102a  1cb8              ADDS     r0,r7,#2              ;330
00102c  6821              LDR      r1,[r4,#0]            ;330
00102e  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;330
001032  1c78              ADDS     r0,r7,#1              ;330
001034  6822              LDR      r2,[r4,#0]            ;330
001036  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;330
00103a  1a08              SUBS     r0,r1,r0              ;330
00103c  fa1ff980          UXTH     r9,r0                 ;330
001040  eb080009          ADD      r0,r8,r9              ;331
001044  fa1ff880          UXTH     r8,r0                 ;331
001048  f8a5900a          STRH     r9,[r5,#0xa]          ;332
00104c  1d38              ADDS     r0,r7,#4              ;335
00104e  6821              LDR      r1,[r4,#0]            ;335
001050  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;335
001054  1cf8              ADDS     r0,r7,#3              ;335
001056  6822              LDR      r2,[r4,#0]            ;335
001058  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;335
00105c  1a08              SUBS     r0,r1,r0              ;335
00105e  fa1ffa80          UXTH     r10,r0                ;335
001062  eb08000a          ADD      r0,r8,r10             ;336
001066  e007              B        |L1.4216|
                  |L1.4200|
001068  68656170          DCB      "heap full %d\n",0
00106c  2066756c
001070  6c202564
001074  0a00    
001076  00                DCB      0
001077  00                DCB      0
                  |L1.4216|
001078  fa1ff880          UXTH     r8,r0                 ;336
00107c  f8a5a00c          STRH     r10,[r5,#0xc]         ;337
001080  1c79              ADDS     r1,r7,#1              ;340
001082  6822              LDR      r2,[r4,#0]            ;340
001084  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;340
001088  4648              MOV      r0,r9                 ;340
00108a  eb0972d0          ADD      r2,r9,r0,LSR #31      ;340
00108e  eb010162          ADD      r1,r1,r2,ASR #1       ;340
001092  b28e              UXTH     r6,r1                 ;340
001094  eb080006          ADD      r0,r8,r6              ;341
001098  fa1ff880          UXTH     r8,r0                 ;341
00109c  80ee              STRH     r6,[r5,#6]            ;342
00109e  1cf9              ADDS     r1,r7,#3              ;345
0010a0  6822              LDR      r2,[r4,#0]            ;345
0010a2  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;345
0010a6  4650              MOV      r0,r10                ;345
0010a8  eb0a72d0          ADD      r2,r10,r0,LSR #31     ;345
0010ac  eb010162          ADD      r1,r1,r2,ASR #1       ;345
0010b0  b28e              UXTH     r6,r1                 ;345
0010b2  eb080006          ADD      r0,r8,r6              ;346
0010b6  fa1ff880          UXTH     r8,r0                 ;346
0010ba  812e              STRH     r6,[r5,#8]            ;347
0010bc  f8a58002          STRH     r8,[r5,#2]            ;349
0010c0  8aa0              LDRH     r0,[r4,#0x14]         ;352
0010c2  1c40              ADDS     r0,r0,#1              ;352
0010c4  82a0              STRH     r0,[r4,#0x14]         ;352
0010c6  3ccc              SUBS     r4,r4,#0xcc           ;352
0010c8  f64f70ff          MOV      r0,#0xffff            ;354
0010cc  ea00004b          AND      r0,r0,r11,LSL #1      ;354
0010d0  e778              B        |L1.4036|
;;;356    
                          ENDP

                  _ZN5Blobs10getMaxBlobEt PROC ; Blobs::getMaxBlob(unsigned short)
;;;357    
;;;358    BlobA *Blobs::getMaxBlob(uint16_t signature)
0010d2  e92d43f0          PUSH     {r4-r9,lr}
;;;359    {
0010d6  4602              MOV      r2,r0
0010d8  460d              MOV      r5,r1
;;;360        int i, j;
;;;361        uint32_t area=0, ccArea=0;
0010da  2700              MOVS     r7,#0
0010dc  46bc              MOV      r12,r7
;;;362        BlobA *blob=NULL, *ccBlob=NULL;
0010de  2100              MOVS     r1,#0
0010e0  2300              MOVS     r3,#0
;;;363    
;;;364        if (signature==0) // 0 means return the biggest regardless of signature number
0010e2  bb7d              CBNZ     r5,|L1.4420|
;;;365        {
;;;366            if (m_numBlobs>0)
0010e4  f8b200d0          LDRH     r0,[r2,#0xd0]
0010e8  2800              CMP      r0,#0
0010ea  dd0e              BLE      |L1.4362|
;;;367            {
;;;368                blob = (BlobA *)m_blobs;
0010ec  f8d210cc          LDR      r1,[r2,#0xcc]
;;;369                area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
0010f0  8888              LDRH     r0,[r1,#4]
0010f2  f8b18002          LDRH     r8,[r1,#2]
0010f6  eba00008          SUB      r0,r0,r8
0010fa  f8b18008          LDRH     r8,[r1,#8]
0010fe  f8b19006          LDRH     r9,[r1,#6]
001102  eba80809          SUB      r8,r8,r9
001106  fb00f708          MUL      r7,r0,r8
                  |L1.4362|
;;;370            }
;;;371            if (m_numCCBlobs>0)
00110a  f8b200d8          LDRH     r0,[r2,#0xd8]
00110e  2800              CMP      r0,#0
001110  dd0e              BLE      |L1.4400|
;;;372            {
;;;373                ccBlob = (BlobA *)m_ccBlobs;
001112  f8d230d4          LDR      r3,[r2,#0xd4]
;;;374                ccArea = (ccBlob->m_right - ccBlob->m_left)*(ccBlob->m_bottom - ccBlob->m_top);
001116  8898              LDRH     r0,[r3,#4]
001118  f8b38002          LDRH     r8,[r3,#2]
00111c  eba00008          SUB      r0,r0,r8
001120  f8b38008          LDRH     r8,[r3,#8]
001124  f8b39006          LDRH     r9,[r3,#6]
001128  eba80809          SUB      r8,r8,r9
00112c  fb00fc08          MUL      r12,r0,r8
                  |L1.4400|
;;;375            }
;;;376            if (m_ccMode==CC_ONLY)
001130  f89200ec          LDRB     r0,[r2,#0xec]
001134  2802              CMP      r0,#2
001136  d106              BNE      |L1.4422|
;;;377            {
;;;378                if (ccBlob)
001138  b113              CBZ      r3,|L1.4416|
;;;379                    return ccBlob;
00113a  4618              MOV      r0,r3
                  |L1.4412|
;;;380                else
;;;381                    return NULL;
;;;382            }
;;;383            else if (m_ccMode==DISABLED)
;;;384            {
;;;385                if (blob)
;;;386                    return blob;
;;;387                else
;;;388                    return NULL;
;;;389            }
;;;390            else if (area>ccArea)
;;;391                return blob;
;;;392            else if (ccArea>area)
;;;393                return ccBlob;
;;;394        }
;;;395        else
;;;396        {
;;;397            for (i=0, j=0; i<m_numBlobs; i++, j+=5)
;;;398            {
;;;399                if (m_blobs[j+0]==signature)
;;;400                    return (BlobA *)(m_blobs+j);
;;;401            }
;;;402        }
;;;403    
;;;404        return NULL; // no blobs...
;;;405    } 
00113c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.4416|
001140  2000              MOVS     r0,#0                 ;381
001142  e7fb              B        |L1.4412|
                  |L1.4420|
001144  e00f              B        |L1.4454|
                  |L1.4422|
001146  f89200ec          LDRB     r0,[r2,#0xec]         ;383
00114a  b920              CBNZ     r0,|L1.4438|
00114c  b109              CBZ      r1,|L1.4434|
00114e  4608              MOV      r0,r1                 ;386
001150  e7f4              B        |L1.4412|
                  |L1.4434|
001152  2000              MOVS     r0,#0                 ;388
001154  e7f2              B        |L1.4412|
                  |L1.4438|
001156  4567              CMP      r7,r12                ;390
001158  d901              BLS      |L1.4446|
00115a  4608              MOV      r0,r1                 ;391
00115c  e7ee              B        |L1.4412|
                  |L1.4446|
00115e  45bc              CMP      r12,r7                ;392
001160  d915              BLS      |L1.4494|
001162  4618              MOV      r0,r3                 ;393
001164  e7ea              B        |L1.4412|
                  |L1.4454|
001166  2600              MOVS     r6,#0                 ;397
001168  2400              MOVS     r4,#0                 ;397
00116a  e00c              B        |L1.4486|
                  |L1.4460|
00116c  f8d200cc          LDR      r0,[r2,#0xcc]         ;399
001170  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;399
001174  42a8              CMP      r0,r5                 ;399
001176  d104              BNE      |L1.4482|
001178  f8d200cc          LDR      r0,[r2,#0xcc]         ;400
00117c  eb000044          ADD      r0,r0,r4,LSL #1       ;400
001180  e7dc              B        |L1.4412|
                  |L1.4482|
001182  1c76              ADDS     r6,r6,#1              ;397
001184  1d64              ADDS     r4,r4,#5              ;397
                  |L1.4486|
001186  f8b200d0          LDRH     r0,[r2,#0xd0]         ;397
00118a  42b0              CMP      r0,r6                 ;397
00118c  dcee              BGT      |L1.4460|
                  |L1.4494|
00118e  2000              MOVS     r0,#0                 ;404
001190  e7d4              B        |L1.4412|
;;;406    
                          ENDP

                  _ZN5Blobs8getBlobsEPP5BlobAPjPP5BlobBS3_ PROC ; Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
;;;407    void Blobs::getBlobs(BlobA **blobs, uint32_t *len, BlobB **ccBlobs, uint32_t *ccLen)
001192  b530              PUSH     {r4,r5,lr}
;;;408    {
001194  9c03              LDR      r4,[sp,#0xc]
;;;409        *blobs = (BlobA *)m_blobs;
001196  f8505fcc          LDR      r5,[r0,#0xcc]!
00119a  600d              STR      r5,[r1,#0]
;;;410        *len = m_numBlobs;
00119c  8885              LDRH     r5,[r0,#4]
00119e  6015              STR      r5,[r2,#0]
;;;411    
;;;412        *ccBlobs = m_ccBlobs;
0011a0  6885              LDR      r5,[r0,#8]
0011a2  601d              STR      r5,[r3,#0]
;;;413        *ccLen = m_numCCBlobs;
0011a4  8985              LDRH     r5,[r0,#0xc]
0011a6  38cc              SUBS     r0,r0,#0xcc
0011a8  6025              STR      r5,[r4,#0]
;;;414    }
0011aa  bd30              POP      {r4,r5,pc}
;;;415    
                          ENDP

                  _ZN5Blobs9setParamsEttj13ColorCodeMode PROC ; Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
;;;60     
;;;61     int Blobs::setParams(uint16_t maxBlobs, uint16_t maxBlobsPerModel, uint32_t minArea, ColorCodeMode ccMode)
0011ac  b530              PUSH     {r4,r5,lr}
;;;62     {
0011ae  4604              MOV      r4,r0
0011b0  9d03              LDR      r5,[sp,#0xc]
;;;63         if (maxBlobs<=MAX_BLOBS)
0011b2  2964              CMP      r1,#0x64
0011b4  dc02              BGT      |L1.4540|
;;;64             m_maxBlobs = maxBlobs;
0011b6  f8a410dc          STRH     r1,[r4,#0xdc]
0011ba  e002              B        |L1.4546|
                  |L1.4540|
;;;65         else
;;;66             m_maxBlobs = MAX_BLOBS;
0011bc  2064              MOVS     r0,#0x64
0011be  f8a400dc          STRH     r0,[r4,#0xdc]
                  |L1.4546|
;;;67     
;;;68         m_maxBlobsPerModel = maxBlobsPerModel;
0011c2  f8a420de          STRH     r2,[r4,#0xde]
;;;69         m_minArea = minArea;
0011c6  f8c430e4          STR      r3,[r4,#0xe4]
;;;70         m_ccMode = ccMode;
0011ca  f88450ec          STRB     r5,[r4,#0xec]
;;;71     
;;;72         return 0;
0011ce  2000              MOVS     r0,#0
;;;73     }
0011d0  bd30              POP      {r4,r5,pc}
;;;74     
                          ENDP

                  _ZN5Blobs11generateLUTEhRK6Frame8RK5RectAP10ColorModel PROC ; Blobs::generateLUT(unsigned char, const Frame8&, const RectA&, ColorModel*)
;;;998    
;;;999    int Blobs::generateLUT(uint8_t model, const Frame8 &frame, const RectA &region, ColorModel *pcmodel)
0011d2  e92d43f0          PUSH     {r4-r9,lr}
;;;1000   {
0011d6  b089              SUB      sp,sp,#0x24
0011d8  4605              MOV      r5,r0
0011da  460e              MOV      r6,r1
0011dc  4690              MOV      r8,r2
0011de  4699              MOV      r9,r3
0011e0  9f10              LDR      r7,[sp,#0x40]
;;;1001       int goodness;
;;;1002       ColorModel cmodel;
0011e2  4668              MOV      r0,sp
0011e4  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;1003       if (model>NUM_MODELS)
0011e8  2e07              CMP      r6,#7
0011ea  dd04              BLE      |L1.4598|
;;;1004           return -1;
0011ec  f04f30ff          MOV      r0,#0xffffffff
                  |L1.4592|
;;;1005   
;;;1006       goodness = m_clut->generate(&cmodel, frame, region);
;;;1007       if (goodness==0)
;;;1008           return -1; // this model sucks!
;;;1009   
;;;1010       if (pcmodel)
;;;1011           *pcmodel = cmodel;
;;;1012   
;;;1013       return goodness;
;;;1014   }
0011f0  b009              ADD      sp,sp,#0x24
0011f2  e8bd83f0          POP      {r4-r9,pc}
                  |L1.4598|
0011f6  464b              MOV      r3,r9                 ;1006
0011f8  4642              MOV      r2,r8                 ;1006
0011fa  4669              MOV      r1,sp                 ;1006
0011fc  6828              LDR      r0,[r5,#0]            ;1006
0011fe  f7fffffe          BL       _ZN8ColorLUT8generateEP10ColorModelRK6Frame8RK5RectA ; ColorLUT::generate(ColorModel*, const Frame8&, const RectA&)
001202  4604              MOV      r4,r0                 ;1006
001204  b914              CBNZ     r4,|L1.4620|
001206  f04f30ff          MOV      r0,#0xffffffff        ;1008
00120a  e7f1              B        |L1.4592|
                  |L1.4620|
00120c  b127              CBZ      r7,|L1.4632|
00120e  2224              MOVS     r2,#0x24              ;1011
001210  4669              MOV      r1,sp                 ;1011
001212  4638              MOV      r0,r7                 ;1011
001214  f7fffffe          BL       __aeabi_memcpy4
                  |L1.4632|
001218  4620              MOV      r0,r4                 ;1013
00121a  e7e9              B        |L1.4592|
;;;1015   
                          ENDP

                  _ZN5Blobs11generateLUTEhRK6Frame8RK7Point16P10ColorModelP5RectA PROC ; Blobs::generateLUT(unsigned char, const Frame8&, const Point16&, ColorModel*, RectA*)
;;;1016   int Blobs::generateLUT(uint8_t model, const Frame8 &frame, const Point16 &seed, ColorModel *pcmodel, RectA *region)
00121c  e92d47f0          PUSH     {r4-r10,lr}
;;;1017   {
001220  b08c              SUB      sp,sp,#0x30
001222  4604              MOV      r4,r0
001224  468a              MOV      r10,r1
001226  4690              MOV      r8,r2
001228  4699              MOV      r9,r3
00122a  e9dd5614          LDRD     r5,r6,[sp,#0x50]
;;;1018       int goodness;
;;;1019       RectA cregion;
00122e  a80a              ADD      r0,sp,#0x28
001230  2100              MOVS     r1,#0
001232  80c1              STRH     r1,[r0,#6]
001234  8081              STRH     r1,[r0,#4]
001236  8041              STRH     r1,[r0,#2]
001238  8001              STRH     r1,[r0,#0]
00123a  bf00              NOP      
;;;1020       ColorModel cmodel;
00123c  a801              ADD      r0,sp,#4
00123e  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;1021   
;;;1022       m_clut->growRegion(&cregion, frame, seed);
001242  464b              MOV      r3,r9
001244  4642              MOV      r2,r8
001246  a90a              ADD      r1,sp,#0x28
001248  6820              LDR      r0,[r4,#0]
00124a  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8RK7Point16 ; ColorLUT::growRegion(RectA*, const Frame8&, const Point16&)
;;;1023   
;;;1024       goodness = m_clut->generate(&cmodel, frame, cregion);
00124e  ab0a              ADD      r3,sp,#0x28
001250  4642              MOV      r2,r8
001252  a901              ADD      r1,sp,#4
001254  6820              LDR      r0,[r4,#0]
001256  f7fffffe          BL       _ZN8ColorLUT8generateEP10ColorModelRK6Frame8RK5RectA ; ColorLUT::generate(ColorModel*, const Frame8&, const RectA&)
00125a  4607              MOV      r7,r0
;;;1025       if (goodness==0)
00125c  b927              CBNZ     r7,|L1.4712|
;;;1026           return -1; // this model sucks!
00125e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.4706|
;;;1027   
;;;1028   
;;;1029       if (region)
;;;1030           *region = cregion;
;;;1031   
;;;1032       if (pcmodel)
;;;1033           *pcmodel = cmodel;
;;;1034   
;;;1035       return goodness;
;;;1036   }
001262  b00c              ADD      sp,sp,#0x30
001264  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4712|
001268  b11e              CBZ      r6,|L1.4722|
00126a  980a              LDR      r0,[sp,#0x28]         ;1030
00126c  6030              STR      r0,[r6,#0]            ;1030
00126e  980b              LDR      r0,[sp,#0x2c]         ;1030
001270  6070              STR      r0,[r6,#4]            ;1030
                  |L1.4722|
001272  b125              CBZ      r5,|L1.4734|
001274  2224              MOVS     r2,#0x24              ;1033
001276  a901              ADD      r1,sp,#4              ;1033
001278  4628              MOV      r0,r5                 ;1033
00127a  f7fffffe          BL       __aeabi_memcpy4
                  |L1.4734|
00127e  4638              MOV      r0,r7                 ;1035
001280  e7ef              B        |L1.4706|
;;;1037   
                          ENDP

                  _ZN5Blobs16analyzeDistancesEPP5BlobAsS2_sS2_S2_ PROC ; Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)
;;;681    
;;;682    bool Blobs::analyzeDistances(BlobA *blobs0[], int16_t numBlobs0, BlobA *blobs[], int16_t numBlobs, BlobA **blobA, BlobA **blobB)
001282  e92d4fff          PUSH     {r0-r11,lr}
;;;683    {
001286  b083              SUB      sp,sp,#0xc
001288  460d              MOV      r5,r1
00128a  4692              MOV      r10,r2
00128c  461e              MOV      r6,r3
00128e  f8ddb040          LDR      r11,[sp,#0x40]
;;;684        bool skip;
;;;685        bool result = false;
001292  2000              MOVS     r0,#0
001294  9001              STR      r0,[sp,#4]
;;;686        int16_t dist, minDist, i, j, k;
;;;687    
;;;688        for (i=0, minDist=0x7fff; i<numBlobs0; i++)
001296  4680              MOV      r8,r0
001298  f64770ff          MOV      r0,#0x7fff
00129c  9000              STR      r0,[sp,#0]
00129e  e044              B        |L1.4906|
                  |L1.4768|
;;;689        {
;;;690            for (j=0; j<numBlobs; j++)
0012a0  2400              MOVS     r4,#0
0012a2  e03c              B        |L1.4894|
                  |L1.4772|
;;;691            {
;;;692                for (k=0, skip=false; k<numBlobs0; k++)
0012a4  f04f0900          MOV      r9,#0
0012a8  2000              MOVS     r0,#0
0012aa  9002              STR      r0,[sp,#8]
0012ac  e018              B        |L1.4832|
                  |L1.4782|
;;;693                {
;;;694                    if (blobs0[k]==blobs[j] || (blobs0[k]->m_model&0x07)==(blobs[j]->m_model&0x07))
0012ae  f8550029          LDR      r0,[r5,r9,LSL #2]
0012b2  f8561024          LDR      r1,[r6,r4,LSL #2]
0012b6  4288              CMP      r0,r1
0012b8  d00b              BEQ      |L1.4818|
0012ba  f8550029          LDR      r0,[r5,r9,LSL #2]
0012be  7800              LDRB     r0,[r0,#0]
0012c0  f0000007          AND      r0,r0,#7
0012c4  f8561024          LDR      r1,[r6,r4,LSL #2]
0012c8  7809              LDRB     r1,[r1,#0]
0012ca  f0010107          AND      r1,r1,#7
0012ce  4288              CMP      r0,r1
0012d0  d102              BNE      |L1.4824|
                  |L1.4818|
;;;695                    {
;;;696                        skip = true;
0012d2  2001              MOVS     r0,#1
0012d4  9002              STR      r0,[sp,#8]
;;;697                        break;
0012d6  e005              B        |L1.4836|
                  |L1.4824|
0012d8  f1090001          ADD      r0,r9,#1              ;692
0012dc  fa0ff980          SXTH     r9,r0                 ;692
                  |L1.4832|
0012e0  45d1              CMP      r9,r10                ;692
0012e2  dbe4              BLT      |L1.4782|
                  |L1.4836|
0012e4  bf00              NOP      
;;;698                    }
;;;699                }
;;;700                if (skip)
0012e6  9802              LDR      r0,[sp,#8]
0012e8  b100              CBZ      r0,|L1.4844|
;;;701                    continue;
0012ea  e016              B        |L1.4890|
                  |L1.4844|
;;;702                dist = distance(blobs0[i], blobs[j]);
0012ec  f8562024          LDR      r2,[r6,r4,LSL #2]
0012f0  f8551028          LDR      r1,[r5,r8,LSL #2]
0012f4  9803              LDR      r0,[sp,#0xc]
0012f6  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
0012fa  4607              MOV      r7,r0
;;;703                if (dist<minDist)
0012fc  9900              LDR      r1,[sp,#0]
0012fe  428f              CMP      r7,r1
001300  da0a              BGE      |L1.4888|
;;;704                {
;;;705                    minDist = dist;
001302  9700              STR      r7,[sp,#0]
;;;706                    *blobA = blobs0[i];
001304  f8551028          LDR      r1,[r5,r8,LSL #2]
001308  9811              LDR      r0,[sp,#0x44]
00130a  6001              STR      r1,[r0,#0]
;;;707                    *blobB = blobs[j];
00130c  f8561024          LDR      r1,[r6,r4,LSL #2]
001310  9812              LDR      r0,[sp,#0x48]
001312  6001              STR      r1,[r0,#0]
;;;708                    result = true;
001314  2001              MOVS     r0,#1
001316  9001              STR      r0,[sp,#4]
                  |L1.4888|
001318  bf00              NOP                            ;701
                  |L1.4890|
00131a  1c60              ADDS     r0,r4,#1              ;690
00131c  b204              SXTH     r4,r0                 ;690
                  |L1.4894|
00131e  455c              CMP      r4,r11                ;690
001320  dbc0              BLT      |L1.4772|
001322  f1080001          ADD      r0,r8,#1              ;688
001326  fa0ff880          SXTH     r8,r0                 ;688
                  |L1.4906|
00132a  45d0              CMP      r8,r10                ;688
00132c  dbb8              BLT      |L1.4768|
;;;709                }
;;;710            }
;;;711        }
;;;712    #ifndef PIXY
;;;713        if (!result)
;;;714            qDebug("not set!");
;;;715    #endif
;;;716        return result;
00132e  9801              LDR      r0,[sp,#4]
;;;717    }
001330  b007              ADD      sp,sp,#0x1c
001332  e8bd8ff0          POP      {r4-r11,pc}
;;;718    
                          ENDP

                  _ZN5Blobs10printBlobsEv PROC ; Blobs::printBlobs()
;;;803    
;;;804    void Blobs::printBlobs()
001336  f8d010cc          LDR      r1,[r0,#0xcc]
;;;805    {
;;;806        int i;
;;;807        BlobA *blobs = (BlobA *)m_blobs;
;;;808    #ifndef PIXY
;;;809        for (i=0; i<m_numBlobs; i++)
;;;810            qDebug("blob %d: %d %d %d %d %d", i, blobs[i].m_model, blobs[i].m_left, blobs[i].m_right, blobs[i].m_top, blobs[i].m_bottom);
;;;811    #endif
;;;812    }
00133a  4770              BX       lr
;;;813    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||i._ZN10ColorModelC1Ev||, COMGROUP=_ZN10ColorModelC1Ev, CODE, READONLY, ALIGN=2

                  _ZN10ColorModelC2Ev                  ; Alternate entry point ; ColorModel::ColorModel__sub_object()
                  _ZN10ColorModelC1Ev PROC ; ColorModel::ColorModel()
;;;37     {
;;;38         ColorModel()
;;;39         {
;;;40             m_type = 0;
;;;41             // Lines have their own constructors
;;;42         }
;;;43     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2302              MOVS     r3,#2
000006  2208              MOVS     r2,#8
000008  4908              LDR      r1,|L13.44|
00000a  1d20              ADDS     r0,r4,#4
00000c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000010  1f04              SUBS     r4,r0,#4
000012  2302              MOVS     r3,#2
000014  2208              MOVS     r2,#8
000016  4905              LDR      r1,|L13.44|
000018  f1040014          ADD      r0,r4,#0x14
00001c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000020  f1a00414          SUB      r4,r0,#0x14
000024  2000              MOVS     r0,#0
000026  6020              STR      r0,[r4,#0]
000028  4620              MOV      r0,r4
00002a  bd10              POP      {r4,pc}
                          ENDP

                  |L13.44|
                          DCD      _ZN4LineC1Ev ; Line::Line()

                          AREA ||area_number.14||, COMGROUP=_ZN10ColorModelC1Ev, LINKORDER=||i._ZN10ColorModelC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10ColorModelC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4LineC1Ev||, COMGROUP=_ZN4LineC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4LineC2Ev                  ; Alternate entry point ; Line::Line__sub_object()
                  _ZN4LineC1Ev PROC ; Line::Line()
;;;193    {
;;;194        Line()
;;;195        {
;;;196            m_slope = m_yi = 0.0;
;;;197        }
;;;198        Line(float slope, float yi)
000000  2100              MOVS     r1,#0
000002  6041              STR      r1,[r0,#4]
000004  6001              STR      r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN4LineC1Ev, LINKORDER=||i._ZN4LineC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4LineC1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\common\\blobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_1ef6d159___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___9_blobs_cpp_1ef6d159___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_1ef6d159___Z7__REVSHi|
#line 144
|__asm___9_blobs_cpp_1ef6d159___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
