; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progblobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progblobs.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\progblobs.crf progblobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z10blobsSetupv PROC ; blobsSetup()
;;;33     
;;;34     int blobsSetup()
000000  b51c              PUSH     {r2-r4,lr}
;;;35     {
;;;36     	uint8_t c;
;;;37     
;;;38     	// setup camera mode
;;;39     	cam_setMode(CAM_MODE1);
000002  2001              MOVS     r0,#1
000004  9001              STR      r0,[sp,#4]
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
;;;40      	
;;;41     	// load lut if we've grabbed any frames lately
;;;42     	if (g_rawFrame.m_pixels)
00000c  484f              LDR      r0,|L1.332|
00000e  6800              LDR      r0,[r0,#0]  ; g_rawFrame
000010  b108              CBZ      r0,|L1.22|
;;;43     		cc_loadLut();
000012  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
                  |L1.22|
;;;44     
;;;45     	// setup qqueue and M0
;;;46     	g_qqueue->flush();
000016  484e              LDR      r0,|L1.336|
000018  6800              LDR      r0,[r0,#0]  ; g_qqueue
00001a  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;47     	exec_runM0(0);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
;;;48     
;;;49     	// flush serial receive queue
;;;50     	while(ser_getSerial()->receive(&c, 1));
000024  bf00              NOP      
                  |L1.38|
000026  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
00002a  4604              MOV      r4,r0
00002c  6800              LDR      r0,[r0,#0]
00002e  2201              MOVS     r2,#1
000030  4669              MOV      r1,sp
000032  6883              LDR      r3,[r0,#8]
000034  4620              MOV      r0,r4
000036  4798              BLX      r3
000038  2800              CMP      r0,#0
00003a  d1f4              BNE      |L1.38|
;;;51     
;;;52     	return 0;
;;;53     }
00003c  bd1c              POP      {r2-r4,pc}
;;;54     
                          ENDP

                  _Z10handleRecvv PROC ; handleRecv()
;;;55     void handleRecv()
00003e  b57f              PUSH     {r0-r6,lr}
;;;56     {
;;;57     	uint8_t i, a;
;;;58     	static uint8_t state=0, b=1;
;;;59     	uint16_t s0, s1;
;;;60     	Iserial *serial = ser_getSerial();
000040  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000044  4604              MOV      r4,r0
;;;61     
;;;62     	for (i=0; i<10; i++)
000046  2500              MOVS     r5,#0
000048  e047              B        |L1.218|
                  |L1.74|
;;;63     	{
;;;64     		switch(state)
00004a  4842              LDR      r0,|L1.340|
00004c  7800              LDRB     r0,[r0,#0]  ; state
00004e  b110              CBZ      r0,|L1.86|
000050  2801              CMP      r0,#1
000052  d13b              BNE      |L1.204|
000054  e017              B        |L1.134|
                  |L1.86|
;;;65     		{	
;;;66     		case 0: // look for sync
;;;67     			if(serial->receive(&a, 1)<1)
000056  6820              LDR      r0,[r4,#0]
000058  2201              MOVS     r2,#1
00005a  a903              ADD      r1,sp,#0xc
00005c  6883              LDR      r3,[r0,#8]
00005e  4620              MOV      r0,r4
000060  4798              BLX      r3
000062  2801              CMP      r0,#1
000064  da00              BGE      |L1.104|
                  |L1.102|
;;;68     				return;
;;;69     			if (a==0xff && b==0x00)
;;;70     				state = 1;
;;;71     			b = a;
;;;72     			break;
;;;73     
;;;74     		case 1:	// read rest of data
;;;75     			if (serial->receiveLen()>=4)
;;;76     			{
;;;77     				serial->receive((uint8_t *)&s0, 2);
;;;78     				serial->receive((uint8_t *)&s1, 2);
;;;79     
;;;80     				//cprintf("servo %d %d\n", s0, s1);
;;;81     				rcs_setPos(0, s0);
;;;82     				rcs_setPos(1, s1);
;;;83     
;;;84     				state = 0;
;;;85     			}
;;;86     			break;
;;;87     
;;;88     		default:
;;;89     			state = 0;
;;;90     			break;
;;;91     		}
;;;92     	}
;;;93     }
000066  bd7f              POP      {r0-r6,pc}
                  |L1.104|
000068  f89d000c          LDRB     r0,[sp,#0xc]          ;69
00006c  28ff              CMP      r0,#0xff              ;69
00006e  d105              BNE      |L1.124|
000070  4839              LDR      r0,|L1.344|
000072  7800              LDRB     r0,[r0,#0]            ;69  ; b
000074  b910              CBNZ     r0,|L1.124|
000076  2001              MOVS     r0,#1                 ;70
000078  4936              LDR      r1,|L1.340|
00007a  7008              STRB     r0,[r1,#0]            ;70
                  |L1.124|
00007c  f89d000c          LDRB     r0,[sp,#0xc]          ;71
000080  4935              LDR      r1,|L1.344|
000082  7008              STRB     r0,[r1,#0]            ;71
000084  e026              B        |L1.212|
                  |L1.134|
000086  6820              LDR      r0,[r4,#0]            ;75
000088  68c1              LDR      r1,[r0,#0xc]          ;75
00008a  4620              MOV      r0,r4                 ;75
00008c  4788              BLX      r1                    ;75
00008e  2804              CMP      r0,#4                 ;75
000090  db1b              BLT      |L1.202|
000092  6820              LDR      r0,[r4,#0]            ;77
000094  2202              MOVS     r2,#2                 ;77
000096  a902              ADD      r1,sp,#8              ;77
000098  6883              LDR      r3,[r0,#8]            ;77
00009a  4620              MOV      r0,r4                 ;77
00009c  4798              BLX      r3                    ;77
00009e  6820              LDR      r0,[r4,#0]            ;78
0000a0  2202              MOVS     r2,#2                 ;78
0000a2  a901              ADD      r1,sp,#4              ;78
0000a4  6883              LDR      r3,[r0,#8]            ;78
0000a6  4620              MOV      r0,r4                 ;78
0000a8  4798              BLX      r3                    ;78
0000aa  2000              MOVS     r0,#0                 ;81
0000ac  a902              ADD      r1,sp,#8              ;81
0000ae  9000              STR      r0,[sp,#0]            ;81
0000b0  4668              MOV      r0,sp                 ;81
0000b2  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
0000b6  2001              MOVS     r0,#1                 ;82
0000b8  a901              ADD      r1,sp,#4              ;82
0000ba  9000              STR      r0,[sp,#0]            ;82
0000bc  4668              MOV      r0,sp                 ;82
0000be  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
0000c2  2000              MOVS     r0,#0                 ;84
0000c4  4923              LDR      r1,|L1.340|
0000c6  7008              STRB     r0,[r1,#0]            ;84
0000c8  bf00              NOP                            ;85
                  |L1.202|
0000ca  e003              B        |L1.212|
                  |L1.204|
0000cc  2000              MOVS     r0,#0                 ;89
0000ce  4921              LDR      r1,|L1.340|
0000d0  7008              STRB     r0,[r1,#0]            ;89
0000d2  bf00              NOP                            ;90
                  |L1.212|
0000d4  bf00              NOP                            ;72
0000d6  1c68              ADDS     r0,r5,#1              ;62
0000d8  b2c5              UXTB     r5,r0                 ;62
                  |L1.218|
0000da  2d0a              CMP      r5,#0xa               ;62
0000dc  dbb5              BLT      |L1.74|
0000de  bf00              NOP      
0000e0  e7c1              B        |L1.102|
;;;94     
                          ENDP

                  _Z9blobsLoopv PROC ; blobsLoop()
;;;95     int blobsLoop()
0000e2  b510              PUSH     {r4,lr}
;;;96     {
0000e4  b086              SUB      sp,sp,#0x18
;;;97     	BlobA *blobs;
;;;98     	BlobB *ccBlobs;
;;;99     	uint32_t numBlobs, numCCBlobs;
;;;100    
;;;101    	// create blobs
;;;102    	g_blobs->blobify();
0000e6  481d              LDR      r0,|L1.348|
0000e8  6800              LDR      r0,[r0,#0]  ; g_blobs
0000ea  f7fffffe          BL       _ZN5Blobs7blobifyEv ; Blobs::blobify()
;;;103    
;;;104    	// handle received data immediately
;;;105    	handleRecv();
0000ee  f7fffffe          BL       _Z10handleRecvv ; handleRecv()
;;;106    
;;;107    	// send blobs
;;;108    	g_blobs->getBlobs(&blobs, &numBlobs, &ccBlobs, &numCCBlobs);
0000f2  a802              ADD      r0,sp,#8
0000f4  ab04              ADD      r3,sp,#0x10
0000f6  aa03              ADD      r2,sp,#0xc
0000f8  a905              ADD      r1,sp,#0x14
0000fa  9000              STR      r0,[sp,#0]
0000fc  4817              LDR      r0,|L1.348|
0000fe  6800              LDR      r0,[r0,#0]  ; g_blobs
000100  f7fffffe          BL       _ZN5Blobs8getBlobsEPP5BlobAPjPP5BlobBS3_ ; Blobs::getBlobs(BlobA**, unsigned*, BlobB**, unsigned*)
;;;109    	cc_sendBlobs(g_chirpUsb, blobs, numBlobs, ccBlobs, numCCBlobs);
000104  2001              MOVS     r0,#1
000106  9902              LDR      r1,[sp,#8]
000108  e9cd1000          STRD     r1,r0,[sp,#0]
00010c  4814              LDR      r0,|L1.352|
00010e  e9dd2303          LDRD     r2,r3,[sp,#0xc]
000112  9905              LDR      r1,[sp,#0x14]
000114  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000116  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpPK5BlobAjPK5BlobBjh ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
;;;110    
;;;111    	ser_getSerial()->update();
00011a  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
00011e  4604              MOV      r4,r0
000120  6800              LDR      r0,[r0,#0]
000122  6901              LDR      r1,[r0,#0x10]
000124  4620              MOV      r0,r4
000126  4788              BLX      r1
;;;112    
;;;113    	cc_setLED();
000128  f7fffffe          BL       _Z9cc_setLEDv ; cc_setLED()
;;;114    	
;;;115    	// deal with any latent received data until the next frame comes in
;;;116    	while(!g_qqueue->queued())
00012c  e001              B        |L1.306|
                  |L1.302|
;;;117    		handleRecv();
00012e  f7fffffe          BL       _Z10handleRecvv ; handleRecv()
                  |L1.306|
000132  4907              LDR      r1,|L1.336|
000134  6808              LDR      r0,[r1,#0]            ;116  ; g_qqueue
000136  6801              LDR      r1,[r0,#0]            ;116
000138  8889              LDRH     r1,[r1,#4]            ;116
00013a  6802              LDR      r2,[r0,#0]            ;116
00013c  88d2              LDRH     r2,[r2,#6]            ;116
00013e  1a89              SUBS     r1,r1,r2              ;116
000140  2900              CMP      r1,#0                 ;116
000142  d0f4              BEQ      |L1.302|
;;;118    
;;;119    	return 0;
000144  2000              MOVS     r0,#0
;;;120    }
000146  b006              ADD      sp,sp,#0x18
000148  bd10              POP      {r4,pc}
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      g_rawFrame
                  |L1.336|
                          DCD      g_qqueue
                  |L1.340|
                          DCD      state
                  |L1.344|
                          DCD      b
                  |L1.348|
                          DCD      g_blobs
                  |L1.352|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  626c6f62          DCB      "blobs",0
000004  7300    
000006  00                DCB      0
000007  00                DCB      0
000008  70657266          DCB      "perform color blob analysis",0
00000c  6f726d20
000010  636f6c6f
000014  7220626c
000018  6f622061
00001c  6e616c79
000020  73697300

                          AREA ||.data||, DATA, ALIGN=2

                  g_progBlobs
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      _Z10blobsSetupv ; blobsSetup()
                          DCD      _Z9blobsLoopv ; blobsLoop()
                  state
000010  00                DCB      0x00
                  b
000011  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "progblobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_a2215f68___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___13_progblobs_cpp_a2215f68___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_a2215f68___Z7__REVSHi|
#line 144
|__asm___13_progblobs_cpp_a2215f68___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
