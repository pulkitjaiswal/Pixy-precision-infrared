; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\conncomp.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\conncomp.d --cpu=Cortex-M4 --apcs=interwork -O0 -I. -I..\libpixy -I..\..\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DCORE_M4 -DIPC_MASTER -DPIXY --omf_browse=.\spifi\conncomp.crf conncomp.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _Z8cc_servoRKj PROC ; cc_servo(const unsigned&)
;;;34     
;;;35     int32_t cc_servo(const uint32_t &start)
000000  4601              MOV      r1,r0
;;;36     {
;;;37     	g_loop = start;
000002  4af7              LDR      r2,|L1.992|
000004  6808              LDR      r0,[r1,#0]
000006  6010              STR      r0,[r2,#0]  ; g_loop
;;;38     	return 0;
000008  2000              MOVS     r0,#0
;;;39     }
00000a  4770              BX       lr
;;;40     
                          ENDP

                  _Z10cc_loadLutv PROC ; cc_loadLut()
;;;108    
;;;109    int cc_loadLut(void)
00000c  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	int i, res;
;;;112    	uint32_t len;
;;;113    	char id[32];
;;;114    	ColorModel *pmodel;
;;;115    
;;;116    	// indicate that raw frame has been overwritten
;;;117    	g_rawFrame.m_pixels = NULL;
00000e  2000              MOVS     r0,#0
000010  49f4              LDR      r1,|L1.996|
000012  6008              STR      r0,[r1,#0]  ; g_rawFrame
;;;118    	// clear lut
;;;119    	g_blobs->m_clut->clear();
000014  49f4              LDR      r1,|L1.1000|
000016  6809              LDR      r1,[r1,#0]  ; g_blobs
000018  6808              LDR      r0,[r1,#0]
00001a  2100              MOVS     r1,#0
00001c  f7fffffe          BL       _ZN8ColorLUT5clearEh ; ColorLUT::clear(unsigned char)
;;;120    
;;;121    //MJLM Don't do this checking, but just load pmodel 1, which is the hard-coded luminance model
;;;122    //	for (i=1; i<=NUM_MODELS; i++)
;;;123    //	{
;;;124    //		sprintf(id, "signature%d", i);
;;;125    //		// get signature and add to color lut
;;;126    //		res = prm_get(id, &len, &pmodel, END);
;;;127    //		if (res<0)
;;;128    //			return res;
;;;129    //		g_blobs->m_clut->add(pmodel, i);
;;;130    //	}
;;;131    	g_blobs->m_clut->add(pmodel, i);
000020  b2e2              UXTB     r2,r4
000022  49f1              LDR      r1,|L1.1000|
000024  6809              LDR      r1,[r1,#0]  ; g_blobs
000026  6808              LDR      r0,[r1,#0]
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       _ZN8ColorLUT3addEPK10ColorModelh ; ColorLUT::add(const ColorModel*, unsigned char)
;;;132    	
;;;133    	// go ahead and flush since we've changed things
;;;134    	g_qqueue->flush();
00002e  48ef              LDR      r0,|L1.1004|
000030  6800              LDR      r0,[r0,#0]  ; g_qqueue
000032  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;135    
;;;136    	return 0;
000036  2000              MOVS     r0,#0
;;;137    }
000038  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  _Z13cc_loadParamsv PROC ; cc_loadParams()
;;;139    void cc_loadParams(void)
00003a  b510              PUSH     {r4,lr}
;;;140    {
00003c  b0a0              SUB      sp,sp,#0x80
;;;141    	int i;
;;;142    	ColorModel model;
00003e  a817              ADD      r0,sp,#0x5c
000040  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;143    	char id[32], desc[32];
;;;144    
;;;145    	// set up signatures, load later
;;;146    	for (i=1; i<=NUM_MODELS; i++)
000044  2401              MOVS     r4,#1
000046  e016              B        |L1.118|
                  |L1.72|
;;;147    	{
;;;148    		sprintf(id, "signature%d", i);
000048  4622              MOV      r2,r4
00004a  a1e9              ADR      r1,|L1.1008|
00004c  a80f              ADD      r0,sp,#0x3c
00004e  f7fffffe          BL       __2sprintf
;;;149    		sprintf(desc, "Color signature %d", i);
000052  4622              MOV      r2,r4
000054  a1e9              ADR      r1,|L1.1020|
000056  a807              ADD      r0,sp,#0x1c
000058  f7fffffe          BL       __2sprintf
;;;150    		// add if it doesn't exist yet
;;;151    		prm_add(id, PRM_FLAG_INTERNAL, desc, INTS8(sizeof(ColorModel), &model), END);
00005c  2000              MOVS     r0,#0
00005e  a917              ADD      r1,sp,#0x5c
000060  2224              MOVS     r2,#0x24
000062  2381              MOVS     r3,#0x81
000064  e9cd2100          STRD     r2,r1,[sp,#0]
000068  9002              STR      r0,[sp,#8]
00006a  aa07              ADD      r2,sp,#0x1c
00006c  2101              MOVS     r1,#1
00006e  a80f              ADD      r0,sp,#0x3c
000070  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
000074  1c64              ADDS     r4,r4,#1              ;146
                  |L1.118|
000076  2c07              CMP      r4,#7                 ;146
000078  dde6              BLE      |L1.72|
;;;152    	}
;;;153    
;;;154    	// others -----
;;;155    
;;;156    	// setup
;;;157    	prm_add("Max blocks", 0, 
00007a  2000              MOVS     r0,#0
00007c  f44f717a          MOV      r1,#0x3e8
000080  2302              MOVS     r3,#2
000082  a2e3              ADR      r2,|L1.1040|
000084  e9cd1000          STRD     r1,r0,[sp,#0]
000088  4601              MOV      r1,r0
00008a  a0f1              ADR      r0,|L1.1104|
00008c  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;158    		"Sets the maximum total blocks sent per frame. (default 1000)", UINT16(1000), END);
;;;159    	prm_add("Max blocks per signature", 0, 
000090  2000              MOVS     r0,#0
000092  f44f717a          MOV      r1,#0x3e8
000096  2302              MOVS     r3,#2
000098  4af0              LDR      r2,|L1.1116|
00009a  e9cd1000          STRD     r1,r0,[sp,#0]
00009e  4601              MOV      r1,r0
0000a0  a0ef              ADR      r0,|L1.1120|
0000a2  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;160    		"Sets the maximum blocks for each color signature sent for each frame. (default 1000)", UINT16(1000), END);
;;;161    	prm_add("Min block area", 0, 
0000a6  2000              MOVS     r0,#0
0000a8  2101              MOVS     r1,#1
0000aa  2304              MOVS     r3,#4
0000ac  4af3              LDR      r2,|L1.1148|
0000ae  e9cd1000          STRD     r1,r0,[sp,#0]
0000b2  4601              MOV      r1,r0
0000b4  a0f2              ADR      r0,|L1.1152|
0000b6  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;162    	"Sets the minimum required area in pixels for a block.  Blocks with less area won't be sent. (default 20)", UINT32(1), END); //TMS: default 20
;;;163    	prm_add("Min saturation", 0,
0000ba  2000              MOVS     r0,#0
0000bc  4601              MOV      r1,r0
0000be  9002              STR      r0,[sp,#8]
0000c0  48f3              LDR      r0,|L1.1168|
0000c2  2314              MOVS     r3,#0x14
0000c4  4af3              LDR      r2,|L1.1172|
0000c6  e9cd1000          STRD     r1,r0,[sp,#0]
0000ca  2100              MOVS     r1,#0
0000cc  a0f2              ADR      r0,|L1.1176|
0000ce  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;164    		"@c Signature_creation Sets the minimum allowed color saturation for when generating color signatures. Applies during teaching. (default 15.0)", FLT32(15.0), END);
;;;165    	prm_add("Hue spread", 0,
0000d2  2000              MOVS     r0,#0
0000d4  4601              MOV      r1,r0
0000d6  9002              STR      r0,[sp,#8]
0000d8  48f3              LDR      r0,|L1.1192|
0000da  2314              MOVS     r3,#0x14
0000dc  4af3              LDR      r2,|L1.1196|
0000de  e9cd1000          STRD     r1,r0,[sp,#0]
0000e2  2100              MOVS     r1,#0
0000e4  a0f2              ADR      r0,|L1.1200|
0000e6  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;166    		"@c Signature_creation Sets how inclusive the color signatures are with respect to hue. Applies during teaching. (default 1.5)", FLT32(1.5), END);
;;;167    	prm_add("Saturation spread", 0,
0000ea  2000              MOVS     r0,#0
0000ec  4601              MOV      r1,r0
0000ee  9002              STR      r0,[sp,#8]
0000f0  48ed              LDR      r0,|L1.1192|
0000f2  2314              MOVS     r3,#0x14
0000f4  4af1              LDR      r2,|L1.1212|
0000f6  e9cd1000          STRD     r1,r0,[sp,#0]
0000fa  2100              MOVS     r1,#0
0000fc  a0f0              ADR      r0,|L1.1216|
0000fe  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;168    		"@c Signature_creation Sets how inclusive the color signatures are with respect to saturation. Applies during teaching. (default 1.5)", FLT32(1.5), END);
;;;169    	prm_add("CC min saturation", 0,
000102  2000              MOVS     r0,#0
000104  49e2              LDR      r1,|L1.1168|
000106  9002              STR      r0,[sp,#8]
000108  2314              MOVS     r3,#0x14
00010a  4af2              LDR      r2,|L1.1236|
00010c  e9cd0100          STRD     r0,r1,[sp,#0]
000110  4601              MOV      r1,r0
000112  a0f1              ADR      r0,|L1.1240|
000114  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;170    		"@c Signature_creation Sets the minimum allowed color saturation for when generating color code (CC) signatures. Applies during teaching. (default 15.0)", FLT32(15.0), END);
;;;171    	prm_add("CC hue spread", 0,
000118  2000              MOVS     r0,#0
00011a  49f4              LDR      r1,|L1.1260|
00011c  9002              STR      r0,[sp,#8]
00011e  2314              MOVS     r3,#0x14
000120  4af3              LDR      r2,|L1.1264|
000122  e9cd0100          STRD     r0,r1,[sp,#0]
000126  4601              MOV      r1,r0
000128  a0f2              ADR      r0,|L1.1268|
00012a  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;172    		"@c Signature_creation Sets how inclusive the color code (CC) signatures are with respect to hue. Applies during teaching. (default 3.0)", FLT32(3.0), END);
;;;173    	prm_add("CC saturation spread", 0,
00012e  2000              MOVS     r0,#0
000130  49f4              LDR      r1,|L1.1284|
000132  9002              STR      r0,[sp,#8]
000134  2314              MOVS     r3,#0x14
000136  4af4              LDR      r2,|L1.1288|
000138  e9cd0100          STRD     r0,r1,[sp,#0]
00013c  4601              MOV      r1,r0
00013e  a0f3              ADR      r0,|L1.1292|
000140  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;174    		"@c Signature_creation Sets how inclusive the color code (CC) signatures are with respect to saturation for color codes. Applies during teaching. (default 50.0)", FLT32(50.0), END);
;;;175    	prm_add("Color code mode", 0,
000144  2000              MOVS     r0,#0
000146  2101              MOVS     r1,#1
000148  460b              MOV      r3,r1
00014a  4af6              LDR      r2,|L1.1316|
00014c  e9cd1000          STRD     r1,r0,[sp,#0]
000150  4601              MOV      r1,r0
000152  a0f5              ADR      r0,|L1.1320|
000154  f7fffffe          BL       _Z7prm_addPKcjS0_z ; prm_add(const char*, unsigned, const char*, ...)
;;;176    		"Sets the color code mode, 0=disabled, 1=enabled, 2=color codes only, 3=mixed (default 1)", INT8(1), END);
;;;177    
;;;178    	// load
;;;179    	uint8_t ccMode;
;;;180    	uint16_t maxBlobs, maxBlobsPerModel;
;;;181    	uint32_t minArea;
;;;182    
;;;183    	prm_get("Max blocks", &maxBlobs, END);
000158  2200              MOVS     r2,#0
00015a  a905              ADD      r1,sp,#0x14
00015c  a0bc              ADR      r0,|L1.1104|
00015e  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;184    	prm_get("Max blocks per signature", &maxBlobsPerModel, END);
000162  2200              MOVS     r2,#0
000164  a904              ADD      r1,sp,#0x10
000166  a0be              ADR      r0,|L1.1120|
000168  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;185    	prm_get("Min block area", &minArea, END);
00016c  2200              MOVS     r2,#0
00016e  a903              ADD      r1,sp,#0xc
000170  a0c3              ADR      r0,|L1.1152|
000172  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;186    	prm_get("Color code mode", &ccMode, END);
000176  2200              MOVS     r2,#0
000178  a906              ADD      r1,sp,#0x18
00017a  a0eb              ADR      r0,|L1.1320|
00017c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;187    	g_blobs->setParams(maxBlobs, maxBlobsPerModel, minArea, (ColorCodeMode)ccMode);
000180  f89d0018          LDRB     r0,[sp,#0x18]
000184  9000              STR      r0,[sp,#0]
000186  f8bd2010          LDRH     r2,[sp,#0x10]
00018a  f8bd1014          LDRH     r1,[sp,#0x14]
00018e  4896              LDR      r0,|L1.1000|
000190  9b03              LDR      r3,[sp,#0xc]
000192  6800              LDR      r0,[r0,#0]  ; g_blobs
000194  f7fffffe          BL       _ZN5Blobs9setParamsEttj13ColorCodeMode ; Blobs::setParams(unsigned short, unsigned short, unsigned, ColorCodeMode)
;;;188    
;;;189    	cc_loadLut();
000198  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
;;;190    
;;;191    }
00019c  b020              ADD      sp,sp,#0x80
00019e  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  _Z7cc_initP5Chirp PROC ; cc_init(Chirp*)
;;;193    int cc_init(Chirp *chirp)
0001a0  b570              PUSH     {r4-r6,lr}
;;;194    {
0001a2  4606              MOV      r6,r0
;;;195    	g_qqueue = new Qqueue;
0001a4  2004              MOVS     r0,#4
0001a6  f7fffffe          BL       _Znwj ; operator new(unsigned)
0001aa  4604              MOV      r4,r0
0001ac  f7fffffe          BL       _ZN6QqueueC1Ev ; Qqueue::Qqueue()
0001b0  4604              MOV      r4,r0
0001b2  488e              LDR      r0,|L1.1004|
0001b4  6004              STR      r4,[r0,#0]  ; g_qqueue
;;;196    	g_blobs = new Blobs(g_qqueue);
0001b6  20f0              MOVS     r0,#0xf0
0001b8  f7fffffe          BL       _Znwj ; operator new(unsigned)
0001bc  4605              MOV      r5,r0
0001be  488b              LDR      r0,|L1.1004|
0001c0  6801              LDR      r1,[r0,#0]  ; g_qqueue
0001c2  4628              MOV      r0,r5
0001c4  f7fffffe          BL       _ZN5BlobsC1EP6Qqueue ; Blobs::Blobs(Qqueue*)
0001c8  4605              MOV      r5,r0
0001ca  4887              LDR      r0,|L1.1000|
0001cc  6005              STR      r5,[r0,#0]  ; g_blobs
;;;197    
;;;198    	chirp->registerModule(g_module);	
0001ce  49da              LDR      r1,|L1.1336|
0001d0  4630              MOV      r0,r6
0001d2  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;199    
;;;200    	g_getRLSFrameM0 = g_chirpM0->getProc("getRLSFrame", NULL);
0001d6  2200              MOVS     r2,#0
0001d8  a1d8              ADR      r1,|L1.1340|
0001da  48db              LDR      r0,|L1.1352|
0001dc  6800              LDR      r0,[r0,#0]  ; g_chirpM0
0001de  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
0001e2  49da              LDR      r1,|L1.1356|
0001e4  8008              STRH     r0,[r1,#0]
;;;201    
;;;202    	if (g_getRLSFrameM0<0)
0001e6  4608              MOV      r0,r1
0001e8  f9b00000          LDRSH    r0,[r0,#0]  ; g_getRLSFrameM0
0001ec  2800              CMP      r0,#0
0001ee  da02              BGE      |L1.502|
;;;203    		return -1;
0001f0  f04f30ff          MOV      r0,#0xffffffff
                  |L1.500|
;;;204    
;;;205    	cc_loadParams(); // setup default vals and load parameters
;;;206    
;;;207    	return 0;
;;;208    }
0001f4  bd70              POP      {r4-r6,pc}
                  |L1.502|
0001f6  f7fffffe          BL       _Z13cc_loadParamsv ; cc_loadParams()
0001fa  2000              MOVS     r0,#0                 ;207
0001fc  e7fa              B        |L1.500|
;;;209    
                          ENDP

                  _Z12cc_setBoundsh PROC ; cc_setBounds(unsigned char)
;;;210    void cc_setBounds(const uint8_t mode)
0001fe  b53e              PUSH     {r1-r5,lr}
;;;211    {
000200  4604              MOV      r4,r0
;;;212    	float minSat, hueTol, satTol;
;;;213    
;;;214    	if (mode==1)
000202  2c01              CMP      r4,#1
000204  d10f              BNE      |L1.550|
;;;215    	{
;;;216    		prm_get("CC min saturation", &minSat, END);
000206  2200              MOVS     r2,#0
000208  a902              ADD      r1,sp,#8
00020a  a0b3              ADR      r0,|L1.1240|
00020c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;217    		prm_get("CC hue spread", &hueTol, END);
000210  2200              MOVS     r2,#0
000212  a901              ADD      r1,sp,#4
000214  a0b7              ADR      r0,|L1.1268|
000216  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;218    		prm_get("CC saturation spread", &satTol, END);
00021a  2200              MOVS     r2,#0
00021c  4669              MOV      r1,sp
00021e  a0bb              ADR      r0,|L1.1292|
000220  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
000224  e00e              B        |L1.580|
                  |L1.550|
;;;219    	}
;;;220    	else
;;;221    	{
;;;222    		prm_get("Min saturation", &minSat, END);
000226  2200              MOVS     r2,#0
000228  a902              ADD      r1,sp,#8
00022a  a09b              ADR      r0,|L1.1176|
00022c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;223    		prm_get("Hue spread", &hueTol, END);
000230  2200              MOVS     r2,#0
000232  a901              ADD      r1,sp,#4
000234  a09e              ADR      r0,|L1.1200|
000236  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;224    		prm_get("Saturation spread", &satTol, END);
00023a  2200              MOVS     r2,#0
00023c  4669              MOV      r1,sp
00023e  a0a0              ADR      r0,|L1.1216|
000240  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
                  |L1.580|
;;;225    	}
;;;226    
;;;227       	g_blobs->m_clut->setBounds(minSat, hueTol, satTol); 
000244  4968              LDR      r1,|L1.1000|
000246  6809              LDR      r1,[r1,#0]  ; g_blobs
000248  6808              LDR      r0,[r1,#0]
00024a  e9dd3200          LDRD     r3,r2,[sp,#0]
00024e  9902              LDR      r1,[sp,#8]
000250  f7fffffe          BL       _ZN8ColorLUT9setBoundsEfff ; ColorLUT::setBounds(float, float, float)
;;;228    }
000254  bd3e              POP      {r1-r5,pc}
;;;229    
                          ENDP

                  _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_ PROC ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
;;;230    // this routine assumes it can grab valid pixels in video memory described by the box
;;;231    int32_t cc_setSigRegion(const uint32_t &type, const uint8_t &model, const uint16_t &xoffset, const uint16_t &yoffset, const uint16_t &width, const uint16_t &height)
000256  e92d4ff0          PUSH     {r4-r11,lr}
;;;232    {
00025a  b095              SUB      sp,sp,#0x54
00025c  4605              MOV      r5,r0
00025e  460c              MOV      r4,r1
000260  4617              MOV      r7,r2
000262  4698              MOV      r8,r3
000264  e9dd9a1e          LDRD     r9,r10,[sp,#0x78]
;;;233    	int result;
;;;234    	char id[32];
;;;235    	ColorModel cmodel;
000268  a802              ADD      r0,sp,#8
00026a  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;236    
;;;237    	if (model<1 || model>NUM_MODELS)
00026e  7820              LDRB     r0,[r4,#0]
000270  2801              CMP      r0,#1
000272  db02              BLT      |L1.634|
000274  7820              LDRB     r0,[r4,#0]
000276  2807              CMP      r0,#7
000278  dd04              BLE      |L1.644|
                  |L1.634|
;;;238    		return -1;
00027a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.638|
;;;239    
;;;240    	cc_setBounds(type);
;;;241    
;;;242    	if (g_rawFrame.m_pixels==NULL)
;;;243    	{
;;;244    		cprintf("No raw frame in memory!\n");
;;;245    		return -2;
;;;246    	}
;;;247    
;;;248    	// create lut
;;;249    	result = g_blobs->generateLUT(model, g_rawFrame, RectA(xoffset, yoffset, width, height), &cmodel);
;;;250    	if (result<0)
;;;251    	{
;;;252    		cprintf("Color saturation isn't high enough!\n");
;;;253    		return result;
;;;254    	}
;;;255    
;;;256    	cmodel.m_type = type;
;;;257    
;;;258    	// save to flash
;;;259    	sprintf(id, "signature%d", model);
;;;260    	prm_set(id, INTS8(sizeof(ColorModel), &cmodel), END);
;;;261    	prm_setDirty(false); // prevent reload (because we don't want to load the lut (yet) and lose our frame
;;;262    
;;;263    	cprintf("Success!\n");
;;;264    
;;;265    	return result;
;;;266    }
00027e  b015              ADD      sp,sp,#0x54
000280  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.644|
000284  7828              LDRB     r0,[r5,#0]            ;240
000286  f7fffffe          BL       _Z12cc_setBoundsh ; cc_setBounds(unsigned char)
00028a  4856              LDR      r0,|L1.996|
00028c  6800              LDR      r0,[r0,#0]            ;242  ; g_rawFrame
00028e  b928              CBNZ     r0,|L1.668|
000290  a0af              ADR      r0,|L1.1360|
000292  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
000296  f06f0001          MVN      r0,#1                 ;245
00029a  e7f0              B        |L1.638|
                  |L1.668|
00029c  a813              ADD      r0,sp,#0x4c           ;249
00029e  8839              LDRH     r1,[r7,#0]            ;249
0002a0  f8b82000          LDRH     r2,[r8,#0]            ;249
0002a4  f8b93000          LDRH     r3,[r9,#0]            ;249
0002a8  f8bac000          LDRH     r12,[r10,#0]          ;249
0002ac  8001              STRH     r1,[r0,#0]            ;249
0002ae  8042              STRH     r2,[r0,#2]            ;249
0002b0  8083              STRH     r3,[r0,#4]            ;249
0002b2  f8a0c006          STRH     r12,[r0,#6]           ;249
0002b6  bf00              NOP                            ;249
0002b8  4683              MOV      r11,r0                ;249
0002ba  a802              ADD      r0,sp,#8              ;249
0002bc  9000              STR      r0,[sp,#0]            ;249
0002be  7821              LDRB     r1,[r4,#0]            ;249
0002c0  465b              MOV      r3,r11                ;249
0002c2  4a48              LDR      r2,|L1.996|
0002c4  4848              LDR      r0,|L1.1000|
0002c6  6800              LDR      r0,[r0,#0]            ;249  ; g_blobs
0002c8  f7fffffe          BL       _ZN5Blobs11generateLUTEhRK6Frame8RK5RectAP10ColorModel ; Blobs::generateLUT(unsigned char, const Frame8&, const RectA&, ColorModel*)
0002cc  4606              MOV      r6,r0                 ;249
0002ce  2e00              CMP      r6,#0                 ;250
0002d0  da04              BGE      |L1.732|
0002d2  a0a6              ADR      r0,|L1.1388|
0002d4  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
0002d8  4630              MOV      r0,r6                 ;253
0002da  e7d0              B        |L1.638|
                  |L1.732|
0002dc  6828              LDR      r0,[r5,#0]            ;256
0002de  9002              STR      r0,[sp,#8]            ;256
0002e0  7822              LDRB     r2,[r4,#0]            ;259
0002e2  a143              ADR      r1,|L1.1008|
0002e4  a80b              ADD      r0,sp,#0x2c           ;259
0002e6  f7fffffe          BL       __2sprintf
0002ea  2000              MOVS     r0,#0                 ;260
0002ec  ab02              ADD      r3,sp,#8              ;260
0002ee  2224              MOVS     r2,#0x24              ;260
0002f0  2181              MOVS     r1,#0x81              ;260
0002f2  9000              STR      r0,[sp,#0]            ;260
0002f4  a80b              ADD      r0,sp,#0x2c           ;260
0002f6  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0002fa  2000              MOVS     r0,#0                 ;261
0002fc  f7fffffe          BL       _Z12prm_setDirtyb ; prm_setDirty(bool)
000300  a0a4              ADR      r0,|L1.1428|
000302  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
000306  4630              MOV      r0,r6                 ;265
000308  e7b9              B        |L1.638|
;;;267    
                          ENDP

                  _Z12cc_sendBlobsP5ChirpPK5BlobAjh PROC ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)
;;;418    
;;;419    int cc_sendBlobs(Chirp *chirp, const BlobA *blobs, uint32_t len, uint8_t renderFlags)
00030a  b5f0              PUSH     {r4-r7,lr}
;;;420    {
00030c  b08b              SUB      sp,sp,#0x2c
00030e  4607              MOV      r7,r0
000310  460c              MOV      r4,r1
000312  4615              MOV      r5,r2
000314  461e              MOV      r6,r3
;;;421    	CRP_RETURN(chirp, HTYPE(FOURCC('C','C','B','1')), HINT8(renderFlags), HINT16(CAM_RES2_WIDTH), HINT16(CAM_RES2_HEIGHT), UINTS16(len*sizeof(BlobA)/sizeof(uint16_t), blobs), END);
000316  2100              MOVS     r1,#0
000318  eb050085          ADD      r0,r5,r5,LSL #2
00031c  f0204000          BIC      r0,r0,#0x80000000
000320  e9cd4108          STRD     r4,r1,[sp,#0x20]
000324  910a              STR      r1,[sp,#0x28]
000326  9007              STR      r0,[sp,#0x1c]
000328  2082              MOVS     r0,#0x82
00032a  21c8              MOVS     r1,#0xc8
00032c  2242              MOVS     r2,#0x42
00032e  f44f73a0          MOV      r3,#0x140
000332  e9cd3203          STRD     r3,r2,[sp,#0xc]
000336  e9cd1005          STRD     r1,r0,[sp,#0x14]
00033a  2141              MOVS     r1,#0x41
00033c  4b98              LDR      r3,|L1.1440|
00033e  e9cd6201          STRD     r6,r2,[sp,#4]
000342  9100              STR      r1,[sp,#0]
000344  2264              MOVS     r2,#0x64
000346  2100              MOVS     r1,#0
000348  4638              MOV      r0,r7
00034a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;422    	return 0;
00034e  2000              MOVS     r0,#0
;;;423    }
000350  b00b              ADD      sp,sp,#0x2c
000352  bdf0              POP      {r4-r7,pc}
;;;424    
                          ENDP

                  _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp PROC ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
;;;267    
;;;268    int32_t cc_setSigPoint(const uint32_t &type, const uint8_t &model, const uint16_t &x, const uint16_t &y, Chirp *chirp)
000354  e92d4ff0          PUSH     {r4-r11,lr}
;;;269    {
000358  b097              SUB      sp,sp,#0x5c
00035a  4605              MOV      r5,r0
00035c  460c              MOV      r4,r1
00035e  4617              MOV      r7,r2
000360  4698              MOV      r8,r3
000362  f8dd9080          LDR      r9,[sp,#0x80]
;;;270    	RectA region;
000366  a814              ADD      r0,sp,#0x50
000368  2100              MOVS     r1,#0
00036a  80c1              STRH     r1,[r0,#6]
00036c  8081              STRH     r1,[r0,#4]
00036e  8041              STRH     r1,[r0,#2]
000370  8001              STRH     r1,[r0,#0]
000372  bf00              NOP      
;;;271    	int result; 
;;;272    	char id[32];
;;;273    	ColorModel cmodel;
000374  a803              ADD      r0,sp,#0xc
000376  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;274    
;;;275    	if (model<1 || model>NUM_MODELS)
00037a  7820              LDRB     r0,[r4,#0]
00037c  2801              CMP      r0,#1
00037e  db02              BLT      |L1.902|
000380  7820              LDRB     r0,[r4,#0]
000382  2807              CMP      r0,#7
000384  dd04              BLE      |L1.912|
                  |L1.902|
;;;276    		return -1;
000386  f04f30ff          MOV      r0,#0xffffffff
                  |L1.906|
;;;277    
;;;278    	cc_setBounds(type);
;;;279    
;;;280    	if (g_rawFrame.m_pixels==NULL)
;;;281    	{
;;;282    		cprintf("No raw frame in memory!\n");
;;;283    		return -2;
;;;284    	}
;;;285    
;;;286    	result = g_blobs->generateLUT(model, g_rawFrame, Point16(x, y), &cmodel, &region);
;;;287      	if (result<0)
;;;288    	{
;;;289    		cprintf("Color saturation isn't high enough!\n");
;;;290    		return result;
;;;291    	}
;;;292    
;;;293    	if (chirp)
;;;294    	{
;;;295    		BlobA blob(model, region.m_xOffset, region.m_xOffset+region.m_width, region.m_yOffset, region.m_yOffset+region.m_height);
;;;296    		cc_sendBlobs(chirp, &blob, 1, RENDER_FLAG_FLUSH | RENDER_FLAG_BLEND_BG);
;;;297    	}
;;;298    
;;;299    	cmodel.m_type = type;
;;;300    
;;;301    	// save to flash
;;;302    	sprintf(id, "signature%d", model);
;;;303    	prm_set(id, INTS8(sizeof(ColorModel), &cmodel), END);
;;;304    	prm_setDirty(false); // prevent reload (because we don't want to load the lut (yet) and lose our frame
;;;305    
;;;306    	cprintf("Success!\n");
;;;307    
;;;308    	return result;
;;;309    }
00038a  b017              ADD      sp,sp,#0x5c
00038c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.912|
000390  7828              LDRB     r0,[r5,#0]            ;278
000392  f7fffffe          BL       _Z12cc_setBoundsh ; cc_setBounds(unsigned char)
000396  4813              LDR      r0,|L1.996|
000398  6800              LDR      r0,[r0,#0]            ;280  ; g_rawFrame
00039a  b928              CBNZ     r0,|L1.936|
00039c  a06c              ADR      r0,|L1.1360|
00039e  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
0003a2  f06f0001          MVN      r0,#1                 ;283
0003a6  e7f0              B        |L1.906|
                  |L1.936|
0003a8  a816              ADD      r0,sp,#0x58           ;286
0003aa  8839              LDRH     r1,[r7,#0]            ;286
0003ac  f8b82000          LDRH     r2,[r8,#0]            ;286
0003b0  8001              STRH     r1,[r0,#0]            ;286
0003b2  8042              STRH     r2,[r0,#2]            ;286
0003b4  bf00              NOP                            ;286
0003b6  4682              MOV      r10,r0                ;286
0003b8  a814              ADD      r0,sp,#0x50           ;286
0003ba  a903              ADD      r1,sp,#0xc            ;286
0003bc  e9cd1000          STRD     r1,r0,[sp,#0]         ;286
0003c0  7821              LDRB     r1,[r4,#0]            ;286
0003c2  4653              MOV      r3,r10                ;286
0003c4  4a07              LDR      r2,|L1.996|
0003c6  4808              LDR      r0,|L1.1000|
0003c8  6800              LDR      r0,[r0,#0]            ;286  ; g_blobs
0003ca  f7fffffe          BL       _ZN5Blobs11generateLUTEhRK6Frame8RK7Point16P10ColorModelP5RectA ; Blobs::generateLUT(unsigned char, const Frame8&, const Point16&, ColorModel*, RectA*)
0003ce  4606              MOV      r6,r0                 ;286
0003d0  2e00              CMP      r6,#0                 ;287
0003d2  da04              BGE      |L1.990|
0003d4  a065              ADR      r0,|L1.1388|
0003d6  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
0003da  4630              MOV      r0,r6                 ;290
0003dc  e7d5              B        |L1.906|
                  |L1.990|
0003de  e0e1              B        |L1.1444|
                  |L1.992|
                          DCD      g_loop
                  |L1.996|
                          DCD      g_rawFrame
                  |L1.1000|
                          DCD      g_blobs
                  |L1.1004|
                          DCD      g_qqueue
                  |L1.1008|
0003f0  7369676e          DCB      "signature%d",0
0003f4  61747572
0003f8  65256400
                  |L1.1020|
0003fc  436f6c6f          DCB      "Color signature %d",0
000400  72207369
000404  676e6174
000408  75726520
00040c  256400  
00040f  00                DCB      0
                  |L1.1040|
000410  53657473          DCB      "Sets the maximum total blocks sent per frame. (default "
000414  20746865
000418  206d6178
00041c  696d756d
000420  20746f74
000424  616c2062
000428  6c6f636b
00042c  73207365
000430  6e742070
000434  65722066
000438  72616d65
00043c  2e202864
000440  65666175
000444  6c7420  
000447  31303030          DCB      "1000)",0
00044b  2900    
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L1.1104|
000450  4d617820          DCB      "Max blocks",0
000454  626c6f63
000458  6b7300  
00045b  00                DCB      0
                  |L1.1116|
                          DCD      ||.conststring||+0x358
                  |L1.1120|
000460  4d617820          DCB      "Max blocks per signature",0
000464  626c6f63
000468  6b732070
00046c  65722073
000470  69676e61
000474  74757265
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L1.1148|
                          DCD      ||.conststring||+0x3b0
                  |L1.1152|
000480  4d696e20          DCB      "Min block area",0
000484  626c6f63
000488  6b206172
00048c  656100  
00048f  00                DCB      0
                  |L1.1168|
                          DCD      0x402e0000
                  |L1.1172|
                          DCD      ||.conststring||+0x41c
                  |L1.1176|
000498  4d696e20          DCB      "Min saturation",0
00049c  73617475
0004a0  72617469
0004a4  6f6e00  
0004a7  00                DCB      0
                  |L1.1192|
                          DCD      0x3ff80000
                  |L1.1196|
                          DCD      ||.conststring||+0x4ac
                  |L1.1200|
0004b0  48756520          DCB      "Hue spread",0
0004b4  73707265
0004b8  616400  
0004bb  00                DCB      0
                  |L1.1212|
                          DCD      ||.conststring||+0x52c
                  |L1.1216|
0004c0  53617475          DCB      "Saturation spread",0
0004c4  72617469
0004c8  6f6e2073
0004cc  70726561
0004d0  6400    
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L1.1236|
                          DCD      ||.conststring||+0x5b4
                  |L1.1240|
0004d8  4343206d          DCB      "CC min saturation",0
0004dc  696e2073
0004e0  61747572
0004e4  6174696f
0004e8  6e00    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
                          DCD      0x40080000
                  |L1.1264|
                          DCD      ||.conststring||+0x64c
                  |L1.1268|
0004f4  43432068          DCB      "CC hue spread",0
0004f8  75652073
0004fc  70726561
000500  6400    
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
                          DCD      0x40490000
                  |L1.1288|
                          DCD      ||.conststring||+0x6d4
                  |L1.1292|
00050c  43432073          DCB      "CC saturation spread",0
000510  61747572
000514  6174696f
000518  6e207370
00051c  72656164
000520  00      
000521  00                DCB      0
000522  00                DCB      0
000523  00                DCB      0
                  |L1.1316|
                          DCD      ||.conststring||+0x774
                  |L1.1320|
000528  436f6c6f          DCB      "Color code mode",0
00052c  7220636f
000530  6465206d
000534  6f646500
                  |L1.1336|
                          DCD      g_module
                  |L1.1340|
00053c  67657452          DCB      "getRLSFrame",0
000540  4c534672
000544  616d6500
                  |L1.1352|
                          DCD      g_chirpM0
                  |L1.1356|
                          DCD      g_getRLSFrameM0
                  |L1.1360|
000550  4e6f2072          DCB      "No raw frame in memory!\n",0
000554  61772066
000558  72616d65
00055c  20696e20
000560  6d656d6f
000564  7279210a
000568  00      
000569  00                DCB      0
00056a  00                DCB      0
00056b  00                DCB      0
                  |L1.1388|
00056c  436f6c6f          DCB      "Color saturation isn't high enough!\n",0
000570  72207361
000574  74757261
000578  74696f6e
00057c  2069736e
000580  27742068
000584  69676820
000588  656e6f75
00058c  6768210a
000590  00      
000591  00                DCB      0
000592  00                DCB      0
000593  00                DCB      0
                  |L1.1428|
000594  53756363          DCB      "Success!\n",0
000598  65737321
00059c  0a00    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
                          DCD      0x31424343
                  |L1.1444|
0005a4  f1b90f00          CMP      r9,#0                 ;293
0005a8  d020              BEQ      |L1.1516|
0005aa  4668              MOV      r0,sp                 ;295
0005ac  7821              LDRB     r1,[r4,#0]            ;295
0005ae  f8bd2050          LDRH     r2,[sp,#0x50]         ;295
0005b2  f8bde054          LDRH     lr,[sp,#0x54]         ;295
0005b6  eb020b0e          ADD      r11,r2,lr             ;295
0005ba  fa1ff38b          UXTH     r3,r11                ;295
0005be  f8bdc052          LDRH     r12,[sp,#0x52]        ;295
0005c2  f8bde056          LDRH     lr,[sp,#0x56]         ;295
0005c6  eb0c0b0e          ADD      r11,r12,lr            ;295
0005ca  fa1ffa8b          UXTH     r10,r11               ;295
0005ce  8001              STRH     r1,[r0,#0]            ;295
0005d0  8042              STRH     r2,[r0,#2]            ;295
0005d2  8083              STRH     r3,[r0,#4]            ;295
0005d4  f8a0c006          STRH     r12,[r0,#6]           ;295
0005d8  f8a0a008          STRH     r10,[r0,#8]           ;295
0005dc  bf00              NOP                            ;295
0005de  2303              MOVS     r3,#3                 ;296
0005e0  2201              MOVS     r2,#1                 ;296
0005e2  4669              MOV      r1,sp                 ;296
0005e4  4648              MOV      r0,r9                 ;296
0005e6  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpPK5BlobAjh ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, unsigned char)
0005ea  bf00              NOP                            ;297
                  |L1.1516|
0005ec  6828              LDR      r0,[r5,#0]            ;299
0005ee  9003              STR      r0,[sp,#0xc]          ;299
0005f0  7822              LDRB     r2,[r4,#0]            ;302
0005f2  f2af2104          ADR      r1,|L1.1008|
0005f6  a80c              ADD      r0,sp,#0x30           ;302
0005f8  f7fffffe          BL       __2sprintf
0005fc  2000              MOVS     r0,#0                 ;303
0005fe  ab03              ADD      r3,sp,#0xc            ;303
000600  2224              MOVS     r2,#0x24              ;303
000602  2181              MOVS     r1,#0x81              ;303
000604  9000              STR      r0,[sp,#0]            ;303
000606  a80c              ADD      r0,sp,#0x30           ;303
000608  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
00060c  2000              MOVS     r0,#0                 ;304
00060e  f7fffffe          BL       _Z12prm_setDirtyb ; prm_setDirty(bool)
000612  f2af0080          ADR      r0,|L1.1428|
000616  f7fffffe          BL       _Z7cprintfPKcz ; cprintf(const char*, ...)
00061a  4630              MOV      r0,r6                 ;308
00061c  e6b5              B        |L1.906|
;;;310    
                          ENDP

                  _Z11cc_clearSigRKh PROC ; cc_clearSig(const unsigned char&)
;;;311    int32_t cc_clearSig(const uint8_t &model)
00061e  b530              PUSH     {r4,r5,lr}
;;;312    {
000620  b093              SUB      sp,sp,#0x4c
000622  4604              MOV      r4,r0
;;;313    	char id[32];
;;;314    	ColorModel cmodel;
000624  a802              ADD      r0,sp,#8
000626  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;315    	int res;
;;;316    
;;;317     	if (model<1 || model>NUM_MODELS)
00062a  7820              LDRB     r0,[r4,#0]
00062c  2801              CMP      r0,#1
00062e  db02              BLT      |L1.1590|
000630  7820              LDRB     r0,[r4,#0]
000632  2807              CMP      r0,#7
000634  dd03              BLE      |L1.1598|
                  |L1.1590|
;;;318    		return -1;
000636  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1594|
;;;319    
;;;320    	memset(&cmodel, 0, sizeof(cmodel));
;;;321    
;;;322    	sprintf(id, "signature%d", model);
;;;323    	res = prm_set(id, INTS8(sizeof(ColorModel), &cmodel), END);
;;;324    
;;;325    	// update lut
;;;326     	cc_loadLut();
;;;327    
;;;328    	return res;
;;;329    }
00063a  b013              ADD      sp,sp,#0x4c
00063c  bd30              POP      {r4,r5,pc}
                  |L1.1598|
00063e  2124              MOVS     r1,#0x24              ;320
000640  a802              ADD      r0,sp,#8              ;320
000642  f7fffffe          BL       __aeabi_memclr4
000646  7822              LDRB     r2,[r4,#0]            ;322
000648  f2af215c          ADR      r1,|L1.1008|
00064c  a80b              ADD      r0,sp,#0x2c           ;322
00064e  f7fffffe          BL       __2sprintf
000652  2000              MOVS     r0,#0                 ;323
000654  ab02              ADD      r3,sp,#8              ;323
000656  2224              MOVS     r2,#0x24              ;323
000658  2181              MOVS     r1,#0x81              ;323
00065a  9000              STR      r0,[sp,#0]            ;323
00065c  a80b              ADD      r0,sp,#0x2c           ;323
00065e  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
000662  4605              MOV      r5,r0                 ;323
000664  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
000668  4628              MOV      r0,r5                 ;328
00066a  e7e6              B        |L1.1594|
;;;330    
                          ENDP

                  _Z14cc_clearAllSigv PROC ; cc_clearAllSig()
;;;331    int32_t cc_clearAllSig()
00066c  b530              PUSH     {r4,r5,lr}
;;;332    {
00066e  b093              SUB      sp,sp,#0x4c
;;;333    	char id[32];
;;;334    	uint8_t model;
;;;335    	ColorModel cmodel;
000670  a802              ADD      r0,sp,#8
000672  f7fffffe          BL       _ZN10ColorModelC1Ev ; ColorModel::ColorModel()
;;;336    	int res; 
;;;337    
;;;338    	memset(&cmodel, 0, sizeof(cmodel));
000676  2124              MOVS     r1,#0x24
000678  a802              ADD      r0,sp,#8
00067a  f7fffffe          BL       __aeabi_memclr4
;;;339    
;;;340       	for (model=1; model<=NUM_MODELS; model++)
00067e  2401              MOVS     r4,#1
000680  e015              B        |L1.1710|
                  |L1.1666|
;;;341    	{
;;;342    		sprintf(id, "signature%d", model);
000682  4622              MOV      r2,r4
000684  f2af2198          ADR      r1,|L1.1008|
000688  a80b              ADD      r0,sp,#0x2c
00068a  f7fffffe          BL       __2sprintf
;;;343    		res = prm_set(id, INTS8(sizeof(ColorModel), &cmodel), END);
00068e  2000              MOVS     r0,#0
000690  ab02              ADD      r3,sp,#8
000692  2224              MOVS     r2,#0x24
000694  2181              MOVS     r1,#0x81
000696  9000              STR      r0,[sp,#0]
000698  a80b              ADD      r0,sp,#0x2c
00069a  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
00069e  4605              MOV      r5,r0
;;;344    		if (res<0)
0006a0  2d00              CMP      r5,#0
0006a2  da02              BGE      |L1.1706|
;;;345    			return res;			
0006a4  4628              MOV      r0,r5
                  |L1.1702|
;;;346    	}
;;;347    
;;;348    	// update lut
;;;349     	cc_loadLut();
;;;350    
;;;351    	return 0;
;;;352    }
0006a6  b013              ADD      sp,sp,#0x4c
0006a8  bd30              POP      {r4,r5,pc}
                  |L1.1706|
0006aa  1c60              ADDS     r0,r4,#1              ;340
0006ac  b2c4              UXTB     r4,r0                 ;340
                  |L1.1710|
0006ae  2c07              CMP      r4,#7                 ;340
0006b0  dde7              BLE      |L1.1666|
0006b2  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0006b6  2000              MOVS     r0,#0                 ;351
0006b8  e7f5              B        |L1.1702|
;;;353    
                          ENDP

                  _Z14cc_getRLSFramePjPhb PROC ; cc_getRLSFrame(unsigned*, unsigned char*, bool)
;;;382    
;;;383    int32_t cc_getRLSFrame(uint32_t *memory, uint8_t *lut, bool sync)
0006ba  b5f0              PUSH     {r4-r7,lr}
;;;384    {
0006bc  b089              SUB      sp,sp,#0x24
0006be  4604              MOV      r4,r0
0006c0  460d              MOV      r5,r1
0006c2  4616              MOV      r6,r2
;;;385    	int32_t res;
;;;386    	int32_t responseInt = -1;
0006c4  f04f30ff          MOV      r0,#0xffffffff
0006c8  9007              STR      r0,[sp,#0x1c]
;;;387    
;;;388    	// check mode, set if necessary
;;;389    	if ((res=cam_setMode(CAM_MODE1))<0)
0006ca  2001              MOVS     r0,#1
0006cc  9008              STR      r0,[sp,#0x20]
0006ce  a808              ADD      r0,sp,#0x20
0006d0  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
0006d4  1e07              SUBS     r7,r0,#0
0006d6  da02              BGE      |L1.1758|
;;;390    		return res;
0006d8  4638              MOV      r0,r7
                  |L1.1754|
;;;391    
;;;392    	// forward call to M0, get frame
;;;393    	if (sync)
;;;394    	{
;;;395    		g_chirpM0->callSync(g_getRLSFrameM0, 
;;;396    			UINT32((uint32_t)memory), UINT32((uint32_t)lut), END_OUT_ARGS,
;;;397    			&responseInt, END_IN_ARGS);
;;;398    		return responseInt;
;;;399    	}
;;;400    	else
;;;401    	{
;;;402    		g_chirpM0->callAsync(g_getRLSFrameM0, 
;;;403    			UINT32((uint32_t)memory), UINT32((uint32_t)lut), END_OUT_ARGS);
;;;404    		return 0;
;;;405    	}
;;;406    
;;;407    }
0006da  b009              ADD      sp,sp,#0x24
0006dc  bdf0              POP      {r4-r7,pc}
                  |L1.1758|
0006de  b1a6              CBZ      r6,|L1.1802|
0006e0  2000              MOVS     r0,#0                 ;395
0006e2  aa07              ADD      r2,sp,#0x1c           ;395
0006e4  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;395
0006e8  9005              STR      r0,[sp,#0x14]         ;395
0006ea  9006              STR      r0,[sp,#0x18]         ;395
0006ec  2004              MOVS     r0,#4                 ;395
0006ee  4603              MOV      r3,r0                 ;395
0006f0  e9cd0501          STRD     r0,r5,[sp,#4]         ;395
0006f4  9400              STR      r4,[sp,#0]            ;395
0006f6  4899              LDR      r0,|L1.2396|
0006f8  f9b02000          LDRSH    r2,[r0,#0]            ;395  ; g_getRLSFrameM0
0006fc  2100              MOVS     r1,#0                 ;395
0006fe  4898              LDR      r0,|L1.2400|
000700  6800              LDR      r0,[r0,#0]            ;395  ; g_chirpM0
000702  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
000706  9807              LDR      r0,[sp,#0x1c]         ;398
000708  e7e7              B        |L1.1754|
                  |L1.1802|
00070a  2000              MOVS     r0,#0                 ;402
00070c  2204              MOVS     r2,#4                 ;402
00070e  e9cd5002          STRD     r5,r0,[sp,#8]         ;402
000712  4613              MOV      r3,r2                 ;402
000714  e9cd4200          STRD     r4,r2,[sp,#0]         ;402
000718  9004              STR      r0,[sp,#0x10]         ;402
00071a  4890              LDR      r0,|L1.2396|
00071c  f9b02000          LDRSH    r2,[r0,#0]            ;402  ; g_getRLSFrameM0
000720  2101              MOVS     r1,#1                 ;402
000722  488f              LDR      r0,|L1.2400|
000724  6800              LDR      r0,[r0,#0]            ;402  ; g_chirpM0
000726  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
00072a  2000              MOVS     r0,#0                 ;404
00072c  e7d5              B        |L1.1754|
;;;408    
                          ENDP

                  _Z24cc_getRLSFrameChirpFlagsP5Chirph PROC ; cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
;;;359    
;;;360    int32_t cc_getRLSFrameChirpFlags(Chirp *chirp, uint8_t renderFlags)
00072e  e92d41f0          PUSH     {r4-r8,lr}
;;;361    {
000732  b08a              SUB      sp,sp,#0x28
000734  4607              MOV      r7,r0
000736  460e              MOV      r6,r1
;;;362    	int32_t result;
;;;363    	uint32_t len, numRls;
;;;364    
;;;365    	if (g_rawFrame.m_pixels)
000738  488a              LDR      r0,|L1.2404|
00073a  6800              LDR      r0,[r0,#0]  ; g_rawFrame
00073c  b108              CBZ      r0,|L1.1858|
;;;366    		cc_loadLut();
00073e  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
                  |L1.1858|
;;;367    
;;;368    	g_qqueue->flush();
000742  4889              LDR      r0,|L1.2408|
000744  6800              LDR      r0,[r0,#0]  ; g_qqueue
000746  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;369    
;;;370    	// figure out prebuf length (we need the prebuf length and the number of runlength segments, but there's a chicken and egg problem...)
;;;371    	len = Chirp::serialize(chirp, RLS_MEMORY, RLS_MEMORY_SIZE,  HTYPE(0), UINT16(0), UINT16(0), UINTS32_NO_COPY(0), END);
00074a  2000              MOVS     r0,#0
00074c  22b4              MOVS     r2,#0xb4
00074e  e9cd0204          STRD     r0,r2,[sp,#0x10]
000752  9006              STR      r0,[sp,#0x18]
000754  9007              STR      r0,[sp,#0x1c]
000756  2002              MOVS     r0,#2
000758  2100              MOVS     r1,#0
00075a  e9cd1000          STRD     r1,r0,[sp,#0]
00075e  2364              MOVS     r3,#0x64
000760  0302              LSLS     r2,r0,#12
000762  e9cd1002          STRD     r1,r0,[sp,#8]
000766  4981              LDR      r1,|L1.2412|
000768  4638              MOV      r0,r7
00076a  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00076e  4604              MOV      r4,r0
;;;372    
;;;373    	result = cc_getRLSFrame((uint32_t *)(RLS_MEMORY+len), LUT_MEMORY);
000770  497e              LDR      r1,|L1.2412|
000772  1860              ADDS     r0,r4,r1
000774  2201              MOVS     r2,#1
000776  497e              LDR      r1,|L1.2416|
000778  f7fffffe          BL       _Z14cc_getRLSFramePjPhb ; cc_getRLSFrame(unsigned*, unsigned char*, bool)
00077c  4680              MOV      r8,r0
;;;374    	// copy from IPC memory to RLS_MEMORY
;;;375    	numRls = g_qqueue->readAll((Qval *)(RLS_MEMORY+len), (RLS_MEMORY_SIZE-len)/sizeof(Qval));
00077e  f5c45000          RSB      r0,r4,#0x2000
000782  0882              LSRS     r2,r0,#2
000784  4879              LDR      r0,|L1.2412|
000786  1821              ADDS     r1,r4,r0
000788  4877              LDR      r0,|L1.2408|
00078a  6800              LDR      r0,[r0,#0]  ; g_qqueue
00078c  f7fffffe          BL       _ZN6Qqueue7readAllEPjj ; Qqueue::readAll(unsigned*, unsigned)
000790  4605              MOV      r5,r0
;;;376    	Chirp::serialize(chirp, RLS_MEMORY, RLS_MEMORY_SIZE,  HTYPE(FOURCC('C','C','Q','1')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINTS32_NO_COPY(numRls), END);
000792  2000              MOVS     r0,#0
000794  21b4              MOVS     r1,#0xb4
000796  22c8              MOVS     r2,#0xc8
000798  e9cd1507          STRD     r1,r5,[sp,#0x1c]
00079c  9206              STR      r2,[sp,#0x18]
00079e  9009              STR      r0,[sp,#0x24]
0007a0  2002              MOVS     r0,#2
0007a2  f44f71a0          MOV      r1,#0x140
0007a6  e9cd6002          STRD     r6,r0,[sp,#8]
0007aa  e9cd1004          STRD     r1,r0,[sp,#0x10]
0007ae  2041              MOVS     r0,#0x41
0007b0  4970              LDR      r1,|L1.2420|
0007b2  2364              MOVS     r3,#0x64
0007b4  f44f5200          MOV      r2,#0x2000
0007b8  e9cd1000          STRD     r1,r0,[sp,#0]
0007bc  496b              LDR      r1,|L1.2412|
0007be  4638              MOV      r0,r7
0007c0  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
;;;377    	// send frame, use in-place buffer
;;;378    	chirp->useBuffer(RLS_MEMORY, len+numRls*4);
0007c4  eb040285          ADD      r2,r4,r5,LSL #2
0007c8  4968              LDR      r1,|L1.2412|
0007ca  4638              MOV      r0,r7
0007cc  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
;;;379    
;;;380    	return result;
0007d0  4640              MOV      r0,r8
;;;381    }
0007d2  b00a              ADD      sp,sp,#0x28
0007d4  e8bd81f0          POP      {r4-r8,pc}
;;;382    
                          ENDP

                  _Z19cc_getRLSFrameChirpP5Chirp PROC ; cc_getRLSFrameChirp(Chirp*)
;;;354    
;;;355    int32_t cc_getRLSFrameChirp(Chirp *chirp)
0007d8  b510              PUSH     {r4,lr}
;;;356    {
0007da  4604              MOV      r4,r0
;;;357    	return cc_getRLSFrameChirpFlags(chirp);
0007dc  2101              MOVS     r1,#1
0007de  4620              MOV      r0,r4
0007e0  f7fffffe          BL       _Z24cc_getRLSFrameChirpFlagsP5Chirph ; cc_getRLSFrameChirpFlags(Chirp*, unsigned char)
;;;358    }
0007e4  bd10              POP      {r4,pc}
;;;359    
                          ENDP

                  _Z12cc_setMemoryRKjS0_PKh PROC ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
;;;408    
;;;409    int32_t cc_setMemory(const uint32_t &location, const uint32_t &len, const uint8_t *data)
0007e6  b530              PUSH     {r4,r5,lr}
;;;410    {
0007e8  4604              MOV      r4,r0
0007ea  460b              MOV      r3,r1
;;;411    	uint32_t i;
;;;412    	uint8_t *dest = (uint8_t *)location;
0007ec  6825              LDR      r5,[r4,#0]
;;;413    	for (i=0; i<len; i++)
0007ee  2100              MOVS     r1,#0
0007f0  e002              B        |L1.2040|
                  |L1.2034|
;;;414    		dest[i] = data[i];
0007f2  5c50              LDRB     r0,[r2,r1]
0007f4  5468              STRB     r0,[r5,r1]
0007f6  1c49              ADDS     r1,r1,#1              ;413
                  |L1.2040|
0007f8  6818              LDR      r0,[r3,#0]            ;413
0007fa  4288              CMP      r0,r1                 ;413
0007fc  d8f9              BHI      |L1.2034|
;;;415    
;;;416    	return len;
0007fe  6818              LDR      r0,[r3,#0]
;;;417    }
000800  bd30              POP      {r4,r5,pc}
;;;418    
                          ENDP

                  _Z12cc_sendBlobsP5ChirpPK5BlobAjPK5BlobBjh PROC ; cc_sendBlobs(Chirp*, const BlobA*, unsigned, const BlobB*, unsigned, unsigned char)
;;;424    
;;;425    int cc_sendBlobs(Chirp *chirp, const BlobA *blobs, uint32_t len, const BlobB *ccBlobs, uint32_t ccLen, uint8_t renderFlags)
000802  e92d43f0          PUSH     {r4-r9,lr}
;;;426    {
000806  b08f              SUB      sp,sp,#0x3c
000808  4607              MOV      r7,r0
00080a  460c              MOV      r4,r1
00080c  4615              MOV      r5,r2
00080e  461e              MOV      r6,r3
000810  e9dd8916          LDRD     r8,r9,[sp,#0x58]
;;;427    	CRP_RETURN(chirp, HTYPE(FOURCC('C','C','B','2')), HINT8(renderFlags), HINT16(CAM_RES2_WIDTH), HINT16(CAM_RES2_HEIGHT), UINTS16(len*sizeof(BlobA)/sizeof(uint16_t), blobs), UINTS16(ccLen*sizeof(BlobB)/sizeof(uint16_t), ccBlobs), END);
000814  2100              MOVS     r1,#0
000816  eb080048          ADD      r0,r8,r8,LSL #1
00081a  0080              LSLS     r0,r0,#2
00081c  0840              LSRS     r0,r0,#1
00081e  e9cd610b          STRD     r6,r1,[sp,#0x2c]
000822  910d              STR      r1,[sp,#0x34]
000824  900a              STR      r0,[sp,#0x28]
000826  2182              MOVS     r1,#0x82
000828  eb050085          ADD      r0,r5,r5,LSL #2
00082c  f0204000          BIC      r0,r0,#0x80000000
000830  e9cd1006          STRD     r1,r0,[sp,#0x18]
000834  20c8              MOVS     r0,#0xc8
000836  e9cd4108          STRD     r4,r1,[sp,#0x20]
00083a  2142              MOVS     r1,#0x42
00083c  f44f72a0          MOV      r2,#0x140
000840  e9cd1202          STRD     r1,r2,[sp,#8]
000844  e9cd1004          STRD     r1,r0,[sp,#0x10]
000848  2041              MOVS     r0,#0x41
00084a  4b4b              LDR      r3,|L1.2424|
00084c  2264              MOVS     r2,#0x64
00084e  2100              MOVS     r1,#0
000850  e9cd0900          STRD     r0,r9,[sp,#0]
000854  4638              MOV      r0,r7
000856  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;428    	return 0;
00085a  2000              MOVS     r0,#0
;;;429    }
00085c  b00f              ADD      sp,sp,#0x3c
00085e  e8bd83f0          POP      {r4-r9,pc}
;;;430    
                          ENDP

                  _Z13ledBrightnessj PROC ; ledBrightness(unsigned)
;;;431    uint8_t ledBrightness(uint32_t area)
000862  e92d41f0          PUSH     {r4-r8,lr}
;;;432    {
000866  4605              MOV      r5,r0
;;;433    	uint32_t brightness;
;;;434    
;;;435    	brightness = 0x100*area/20000;
000868  0228              LSLS     r0,r5,#8
00086a  f6446120          MOV      r1,#0x4e20
00086e  fbb0f4f1          UDIV     r4,r0,r1
;;;436    	if (brightness==0) // can't take log of 0...
000872  b914              CBNZ     r4,|L1.2170|
;;;437    		return 1;
000874  2001              MOVS     r0,#1
                  |L1.2166|
;;;438    	
;;;439    	// put on log curve
;;;440    	brightness = log((float)brightness)*50;
;;;441    	// saturate
;;;442    	if (brightness>0xff)
;;;443    		brightness = 0xff;
;;;444    	else if (brightness==0) 
;;;445    		brightness = 1;
;;;446    
;;;447    	return brightness;
;;;448    }
000876  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2170|
00087a  4620              MOV      r0,r4                 ;440
00087c  f7fffffe          BL       __aeabi_ui2f
000880  4680              MOV      r8,r0                 ;440
000882  4640              MOV      r0,r8                 ;440
000884  f7fffffe          BL       logf
000888  4607              MOV      r7,r0                 ;440
00088a  493c              LDR      r1,|L1.2428|
00088c  f7fffffe          BL       __aeabi_fmul
000890  4606              MOV      r6,r0                 ;440
000892  f7fffffe          BL       __aeabi_f2uiz
000896  4604              MOV      r4,r0                 ;440
000898  2cff              CMP      r4,#0xff              ;442
00089a  d901              BLS      |L1.2208|
00089c  24ff              MOVS     r4,#0xff              ;443
00089e  e001              B        |L1.2212|
                  |L1.2208|
0008a0  b904              CBNZ     r4,|L1.2212|
0008a2  2401              MOVS     r4,#1                 ;445
                  |L1.2212|
0008a4  b2e0              UXTB     r0,r4                 ;447
0008a6  e7e6              B        |L1.2166|
;;;449    
                          ENDP

                  _Z9cc_setLEDv PROC ; cc_setLED()
;;;450    void cc_setLED()
0008a8  e92d4ffe          PUSH     {r1-r11,lr}
;;;451    {
;;;452    	BlobA *blob;
;;;453    	uint32_t area, color, r, g, b;
;;;454    	uint8_t brightness;
;;;455    
;;;456    	blob = (BlobA *)g_blobs->getMaxBlob();
0008ac  2100              MOVS     r1,#0
0008ae  4834              LDR      r0,|L1.2432|
0008b0  6800              LDR      r0,[r0,#0]  ; g_blobs
0008b2  f7fffffe          BL       _ZN5Blobs10getMaxBlobEt ; Blobs::getMaxBlob(unsigned short)
0008b6  4604              MOV      r4,r0
;;;457    	if (blob)
0008b8  2c00              CMP      r4,#0
0008ba  d046              BEQ      |L1.2378|
;;;458    	{
;;;459    		if (blob->m_model<=NUM_MODELS)
0008bc  8820              LDRH     r0,[r4,#0]
0008be  2807              CMP      r0,#7
0008c0  dc04              BGT      |L1.2252|
;;;460    			color = g_colors[blob->m_model];
0008c2  8820              LDRH     r0,[r4,#0]
0008c4  492f              LDR      r1,|L1.2436|
0008c6  f8515020          LDR      r5,[r1,r0,LSL #2]
0008ca  e001              B        |L1.2256|
                  |L1.2252|
;;;461    		else
;;;462    			color = g_colors[0];
0008cc  482d              LDR      r0,|L1.2436|
0008ce  6805              LDR      r5,[r0,#0]  ; g_colors
                  |L1.2256|
;;;463    
;;;464    		area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
0008d0  88a0              LDRH     r0,[r4,#4]
0008d2  8861              LDRH     r1,[r4,#2]
0008d4  1a40              SUBS     r0,r0,r1
0008d6  8921              LDRH     r1,[r4,#8]
0008d8  88e2              LDRH     r2,[r4,#6]
0008da  1a89              SUBS     r1,r1,r2
0008dc  fb00fa01          MUL      r10,r0,r1
;;;465    		brightness = ledBrightness(area);
0008e0  4650              MOV      r0,r10
0008e2  f7fffffe          BL       _Z13ledBrightnessj ; ledBrightness(unsigned)
0008e6  4606              MOV      r6,r0
;;;466    		b = color&0xff;
0008e8  f00509ff          AND      r9,r5,#0xff
;;;467    		b = b ? (b*brightness>>8)+1 : 0;
0008ec  f1b90f00          CMP      r9,#0
0008f0  d004              BEQ      |L1.2300|
0008f2  fb09f006          MUL      r0,r9,r6
0008f6  0a00              LSRS     r0,r0,#8
0008f8  1c40              ADDS     r0,r0,#1
0008fa  e000              B        |L1.2302|
                  |L1.2300|
0008fc  2000              MOVS     r0,#0
                  |L1.2302|
0008fe  4681              MOV      r9,r0
;;;468    		color >>= 8;
000900  0a2d              LSRS     r5,r5,#8
;;;469    		g = color&0xff;
000902  f00508ff          AND      r8,r5,#0xff
;;;470    		g = g ? (g*brightness>>8)+1 : 0;
000906  f1b80f00          CMP      r8,#0
00090a  d004              BEQ      |L1.2326|
00090c  fb08f006          MUL      r0,r8,r6
000910  0a00              LSRS     r0,r0,#8
000912  1c40              ADDS     r0,r0,#1
000914  e000              B        |L1.2328|
                  |L1.2326|
000916  2000              MOVS     r0,#0
                  |L1.2328|
000918  4680              MOV      r8,r0
;;;471    		color >>= 8;
00091a  0a2d              LSRS     r5,r5,#8
;;;472    		r = color&0xff;
00091c  b2ef              UXTB     r7,r5
;;;473    		r = r ? (r*brightness>>8)+1 : 0;
00091e  b127              CBZ      r7,|L1.2346|
000920  fb07f006          MUL      r0,r7,r6
000924  0a00              LSRS     r0,r0,#8
000926  1c40              ADDS     r0,r0,#1
000928  e000              B        |L1.2348|
                  |L1.2346|
00092a  2000              MOVS     r0,#0
                  |L1.2348|
00092c  4607              MOV      r7,r0
;;;474    		led_setRGB(r, g, b);
00092e  b2f8              UXTB     r0,r7
000930  9002              STR      r0,[sp,#8]
000932  f00800ff          AND      r0,r8,#0xff
000936  9001              STR      r0,[sp,#4]
000938  f00900ff          AND      r0,r9,#0xff
00093c  9000              STR      r0,[sp,#0]
00093e  466a              MOV      r2,sp
000940  a901              ADD      r1,sp,#4
000942  a802              ADD      r0,sp,#8
000944  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;475    	}
000948  e005              B        |L1.2390|
                  |L1.2378|
;;;476    	else
;;;477    		led_set(0);
00094a  2000              MOVS     r0,#0
00094c  9002              STR      r0,[sp,#8]
00094e  a802              ADD      r0,sp,#8
000950  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;478    }
000954  bf00              NOP      
                  |L1.2390|
000956  e8bd8ffe          POP      {r1-r11,pc}
;;;479    
                          ENDP

00095a  0000              DCW      0x0000
                  |L1.2396|
                          DCD      g_getRLSFrameM0
                  |L1.2400|
                          DCD      g_chirpM0
                  |L1.2404|
                          DCD      g_rawFrame
                  |L1.2408|
                          DCD      g_qqueue
                  |L1.2412|
                          DCD      0x10080000
                  |L1.2416|
                          DCD      0x10082000
                  |L1.2420|
                          DCD      0x31514343
                  |L1.2424|
                          DCD      0x32424343
                  |L1.2428|
                          DCD      0x42480000
                  |L1.2432|
                          DCD      g_blobs
                  |L1.2436|
                          DCD      g_colors

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z19cc_getRLSFrameChirpP5Chirp ; cc_getRLSFrameChirp(Chirp*)
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x8c
                          DCD      _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_ ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
000020  04016452          DCB      0x04,0x01,0x64,0x52
000024  45473100          DCB      0x45,0x47,0x31,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x9c
                          DCD      ||.conststring||+0x18c
                          DCD      _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
000038  04016450          DCB      0x04,0x01,0x64,0x50
00003c  4e543100          DCB      0x4e,0x54,0x31,0x00
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x19c
                          DCD      ||.conststring||+0x28c
                          DCD      _Z11cc_clearSigRKh ; cc_clearSig(const unsigned char&)
000050  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x298
                          DCD      ||.conststring||+0x300
                          DCD      _Z14cc_clearAllSigv ; cc_clearAllSig()
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x310
                          DCD      ||.conststring||+0x344
                          DCD      _Z12cc_setMemoryRKjS0_PKh ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
000080  04810000          DCB      0x04,0x81,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x354
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  g_colors
                          DCD      0x00ffffff
                          DCD      0x00ff0000
                          DCD      0x00ff8000
                          DCD      0x00ffff00
                          DCD      0x0000ff00
                          DCD      0x0000ffff
                          DCD      0x000000ff
                          DCD      0x00ff00ff

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  63635f67          DCB      "cc_getRLSFrame",0
000004  6574524c
000008  53467261
00000c  6d6500  
00000f  00                DCB      0
000010  47657420          DCB      "Get a frame of color run-length segments (RLS)@r 0 if s"
000014  61206672
000018  616d6520
00001c  6f662063
000020  6f6c6f72
000024  2072756e
000028  2d6c656e
00002c  67746820
000030  7365676d
000034  656e7473
000038  2028524c
00003c  53294072
000040  20302069
000044  662073  
000047  75636365          DCB      "uccess, negative if error@r CCQ1 formated data, includi"
00004b  73732c20
00004f  6e656761
000053  74697665
000057  20696620
00005b  6572726f
00005f  72407220
000063  43435131
000067  20666f72
00006b  6d617465
00006f  64206461
000073  74612c20
000077  696e636c
00007b  756469  
00007e  6e672038          DCB      "ng 8-palette",0
000082  2d70616c
000086  65747465
00008a  00      
00008b  00                DCB      0
00008c  63635f73          DCB      "cc_setSigRegion",0
000090  65745369
000094  67526567
000098  696f6e00
00009c  53657420          DCB      "Set signature by selecting region in image@p type 0=nor"
0000a0  7369676e
0000a4  61747572
0000a8  65206279
0000ac  2073656c
0000b0  65637469
0000b4  6e672072
0000b8  6567696f
0000bc  6e20696e
0000c0  20696d61
0000c4  67654070
0000c8  20747970
0000cc  6520303d
0000d0  6e6f72  
0000d3  6d616c20          DCB      "mal signature, 1=color code signature@p signature numer"
0000d7  7369676e
0000db  61747572
0000df  652c2031
0000e3  3d636f6c
0000e7  6f722063
0000eb  6f646520
0000ef  7369676e
0000f3  61747572
0000f7  65407020
0000fb  7369676e
0000ff  61747572
000103  65206e75
000107  6d6572  
00010a  6963616c          DCB      "ical index of signature, can be 1-7@p region user-selec"
00010e  20696e64
000112  6578206f
000116  66207369
00011a  676e6174
00011e  7572652c
000122  2063616e
000126  20626520
00012a  312d3740
00012e  70207265
000132  67696f6e
000136  20757365
00013a  722d7365
00013e  6c6563  
000141  74656420          DCB      "ted region@r 0 to 100 if success where 100=good, 0=poor"
000145  72656769
000149  6f6e4072
00014d  20302074
000151  6f203130
000155  30206966
000159  20737563
00015d  63657373
000161  20776865
000165  72652031
000169  30303d67
00016d  6f6f642c
000171  20303d70
000175  6f6f72  
000178  2c206e65          DCB      ", negative if error",0
00017c  67617469
000180  76652069
000184  66206572
000188  726f7200
00018c  63635f73          DCB      "cc_setSigPoint",0
000190  65745369
000194  67506f69
000198  6e7400  
00019b  00                DCB      0
00019c  53657420          DCB      "Set signature by selecting point in image@p type 0=norm"
0001a0  7369676e
0001a4  61747572
0001a8  65206279
0001ac  2073656c
0001b0  65637469
0001b4  6e672070
0001b8  6f696e74
0001bc  20696e20
0001c0  696d6167
0001c4  65407020
0001c8  74797065
0001cc  20303d6e
0001d0  6f726d  
0001d3  616c2073          DCB      "al signature, 1=color code signature@p signature numeri"
0001d7  69676e61
0001db  74757265
0001df  2c20313d
0001e3  636f6c6f
0001e7  7220636f
0001eb  64652073
0001ef  69676e61
0001f3  74757265
0001f7  40702073
0001fb  69676e61
0001ff  74757265
000203  206e756d
000207  657269  
00020a  63616c20          DCB      "cal index of signature, can be 1-7@p point user-selecte"
00020e  696e6465
000212  78206f66
000216  20736967
00021a  6e617475
00021e  72652c20
000222  63616e20
000226  62652031
00022a  2d374070
00022e  20706f69
000232  6e742075
000236  7365722d
00023a  73656c65
00023e  637465  
000241  6420706f          DCB      "d point@r 0 to 100 if success where 100=good, 0=poor, n"
000245  696e7440
000249  72203020
00024d  746f2031
000251  30302069
000255  66207375
000259  63636573
00025d  73207768
000261  65726520
000265  3130303d
000269  676f6f64
00026d  2c20303d
000271  706f6f72
000275  2c206e  
000278  65676174          DCB      "egative if error",0
00027c  69766520
000280  69662065
000284  72726f72
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  63635f63          DCB      "cc_clearSig",0
000290  6c656172
000294  53696700
000298  436c6561          DCB      "Clear signature@p signature numerical index of signatur"
00029c  72207369
0002a0  676e6174
0002a4  75726540
0002a8  70207369
0002ac  676e6174
0002b0  75726520
0002b4  6e756d65
0002b8  72696361
0002bc  6c20696e
0002c0  64657820
0002c4  6f662073
0002c8  69676e61
0002cc  747572  
0002cf  652c2063          DCB      "e, can be 1-7@r 0 if success, negative if error",0
0002d3  616e2062
0002d7  6520312d
0002db  37407220
0002df  30206966
0002e3  20737563
0002e7  63657373
0002eb  2c206e65
0002ef  67617469
0002f3  76652069
0002f7  66206572
0002fb  726f7200
0002ff  00                DCB      0
000300  63635f63          DCB      "cc_clearAllSig",0
000304  6c656172
000308  416c6c53
00030c  696700  
00030f  00                DCB      0
000310  436c6561          DCB      "Clear signature@r 0 if success, negative if error",0
000314  72207369
000318  676e6174
00031c  75726540
000320  72203020
000324  69662073
000328  75636365
00032c  73732c20
000330  6e656761
000334  74697665
000338  20696620
00033c  6572726f
000340  7200    
000342  00                DCB      0
000343  00                DCB      0
000344  63635f73          DCB      "cc_setMemory",0
000348  65744d65
00034c  6d6f7279
000350  00      
000351  00                DCB      0
000352  00                DCB      0
000353  00                DCB      0
000354  00                DCB      0
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
000358  53657473          DCB      "Sets the maximum blocks for each color signature sent f"
00035c  20746865
000360  206d6178
000364  696d756d
000368  20626c6f
00036c  636b7320
000370  666f7220
000374  65616368
000378  20636f6c
00037c  6f722073
000380  69676e61
000384  74757265
000388  2073656e
00038c  742066  
00038f  6f722065          DCB      "or each frame. (default 1000)",0
000393  61636820
000397  6672616d
00039b  652e2028
00039f  64656661
0003a3  756c7420
0003a7  31303030
0003ab  2900    
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
0003b0  53657473          DCB      "Sets the minimum required area in pixels for a block.  "
0003b4  20746865
0003b8  206d696e
0003bc  696d756d
0003c0  20726571
0003c4  75697265
0003c8  64206172
0003cc  65612069
0003d0  6e207069
0003d4  78656c73
0003d8  20666f72
0003dc  20612062
0003e0  6c6f636b
0003e4  2e2020  
0003e7  426c6f63          DCB      "Blocks with less area won't be sent. (default 20)",0
0003eb  6b732077
0003ef  69746820
0003f3  6c657373
0003f7  20617265
0003fb  6120776f
0003ff  6e277420
000403  62652073
000407  656e742e
00040b  20286465
00040f  6661756c
000413  74203230
000417  2900    
000419  00                DCB      0
00041a  00                DCB      0
00041b  00                DCB      0
00041c  40632053          DCB      "@c Signature_creation Sets the minimum allowed color sa"
000420  69676e61
000424  74757265
000428  5f637265
00042c  6174696f
000430  6e205365
000434  74732074
000438  6865206d
00043c  696e696d
000440  756d2061
000444  6c6c6f77
000448  65642063
00044c  6f6c6f72
000450  207361  
000453  74757261          DCB      "turation for when generating color signatures. Applies "
000457  74696f6e
00045b  20666f72
00045f  20776865
000463  6e206765
000467  6e657261
00046b  74696e67
00046f  20636f6c
000473  6f722073
000477  69676e61
00047b  74757265
00047f  732e2041
000483  70706c69
000487  657320  
00048a  64757269          DCB      "during teaching. (default 15.0)",0
00048e  6e672074
000492  65616368
000496  696e672e
00049a  20286465
00049e  6661756c
0004a2  74203135
0004a6  2e302900
0004aa  00                DCB      0
0004ab  00                DCB      0
0004ac  40632053          DCB      "@c Signature_creation Sets how inclusive the color sign"
0004b0  69676e61
0004b4  74757265
0004b8  5f637265
0004bc  6174696f
0004c0  6e205365
0004c4  74732068
0004c8  6f772069
0004cc  6e636c75
0004d0  73697665
0004d4  20746865
0004d8  20636f6c
0004dc  6f722073
0004e0  69676e  
0004e3  61747572          DCB      "atures are with respect to hue. Applies during teaching"
0004e7  65732061
0004eb  72652077
0004ef  69746820
0004f3  72657370
0004f7  65637420
0004fb  746f2068
0004ff  75652e20
000503  4170706c
000507  69657320
00050b  64757269
00050f  6e672074
000513  65616368
000517  696e67  
00051a  2e202864          DCB      ". (default 1.5)",0
00051e  65666175
000522  6c742031
000526  2e352900
00052a  00                DCB      0
00052b  00                DCB      0
00052c  40632053          DCB      "@c Signature_creation Sets how inclusive the color sign"
000530  69676e61
000534  74757265
000538  5f637265
00053c  6174696f
000540  6e205365
000544  74732068
000548  6f772069
00054c  6e636c75
000550  73697665
000554  20746865
000558  20636f6c
00055c  6f722073
000560  69676e  
000563  61747572          DCB      "atures are with respect to saturation. Applies during t"
000567  65732061
00056b  72652077
00056f  69746820
000573  72657370
000577  65637420
00057b  746f2073
00057f  61747572
000583  6174696f
000587  6e2e2041
00058b  70706c69
00058f  65732064
000593  7572696e
000597  672074  
00059a  65616368          DCB      "eaching. (default 1.5)",0
00059e  696e672e
0005a2  20286465
0005a6  6661756c
0005aa  7420312e
0005ae  352900  
0005b1  00                DCB      0
0005b2  00                DCB      0
0005b3  00                DCB      0
0005b4  40632053          DCB      "@c Signature_creation Sets the minimum allowed color sa"
0005b8  69676e61
0005bc  74757265
0005c0  5f637265
0005c4  6174696f
0005c8  6e205365
0005cc  74732074
0005d0  6865206d
0005d4  696e696d
0005d8  756d2061
0005dc  6c6c6f77
0005e0  65642063
0005e4  6f6c6f72
0005e8  207361  
0005eb  74757261          DCB      "turation for when generating color code (CC) signatures"
0005ef  74696f6e
0005f3  20666f72
0005f7  20776865
0005fb  6e206765
0005ff  6e657261
000603  74696e67
000607  20636f6c
00060b  6f722063
00060f  6f646520
000613  28434329
000617  20736967
00061b  6e617475
00061f  726573  
000622  2e204170          DCB      ". Applies during teaching. (default 15.0)",0
000626  706c6965
00062a  73206475
00062e  72696e67
000632  20746561
000636  6368696e
00063a  672e2028
00063e  64656661
000642  756c7420
000646  31352e30
00064a  2900    
00064c  40632053          DCB      "@c Signature_creation Sets how inclusive the color code"
000650  69676e61
000654  74757265
000658  5f637265
00065c  6174696f
000660  6e205365
000664  74732068
000668  6f772069
00066c  6e636c75
000670  73697665
000674  20746865
000678  20636f6c
00067c  6f722063
000680  6f6465  
000683  20284343          DCB      " (CC) signatures are with respect to hue. Applies durin"
000687  29207369
00068b  676e6174
00068f  75726573
000693  20617265
000697  20776974
00069b  68207265
00069f  73706563
0006a3  7420746f
0006a7  20687565
0006ab  2e204170
0006af  706c6965
0006b3  73206475
0006b7  72696e  
0006ba  67207465          DCB      "g teaching. (default 3.0)",0
0006be  61636869
0006c2  6e672e20
0006c6  28646566
0006ca  61756c74
0006ce  20332e30
0006d2  2900    
0006d4  40632053          DCB      "@c Signature_creation Sets how inclusive the color code"
0006d8  69676e61
0006dc  74757265
0006e0  5f637265
0006e4  6174696f
0006e8  6e205365
0006ec  74732068
0006f0  6f772069
0006f4  6e636c75
0006f8  73697665
0006fc  20746865
000700  20636f6c
000704  6f722063
000708  6f6465  
00070b  20284343          DCB      " (CC) signatures are with respect to saturation for col"
00070f  29207369
000713  676e6174
000717  75726573
00071b  20617265
00071f  20776974
000723  68207265
000727  73706563
00072b  7420746f
00072f  20736174
000733  75726174
000737  696f6e20
00073b  666f7220
00073f  636f6c  
000742  6f722063          DCB      "or codes. Applies during teaching. (default 50.0)",0
000746  6f646573
00074a  2e204170
00074e  706c6965
000752  73206475
000756  72696e67
00075a  20746561
00075e  6368696e
000762  672e2028
000766  64656661
00076a  756c7420
00076e  35302e30
000772  2900    
000774  53657473          DCB      "Sets the color code mode, 0=disabled, 1=enabled, 2=colo"
000778  20746865
00077c  20636f6c
000780  6f722063
000784  6f646520
000788  6d6f6465
00078c  2c20303d
000790  64697361
000794  626c6564
000798  2c20313d
00079c  656e6162
0007a0  6c65642c
0007a4  20323d63
0007a8  6f6c6f  
0007ab  7220636f          DCB      "r codes only, 3=mixed (default 1)",0
0007af  64657320
0007b3  6f6e6c79
0007b7  2c20333d
0007bb  6d697865
0007bf  64202864
0007c3  65666175
0007c7  6c742031
0007cb  2900    

                          AREA ||.data||, DATA, ALIGN=2

                  g_qqueue
                          DCD      0x00000000
                  g_blobs
                          DCD      0x00000000
                  g_loop
                          DCD      0x00000000
                  g_getRLSFrameM0
00000c  ffff              DCW      0xffff

                          AREA ||i._ZN10ColorModelC1Ev||, COMGROUP=_ZN10ColorModelC1Ev, CODE, READONLY, ALIGN=2

                  _ZN10ColorModelC2Ev                  ; Alternate entry point ; ColorModel::ColorModel__sub_object()
                  _ZN10ColorModelC1Ev PROC ; ColorModel::ColorModel()
;;;37     {
;;;38         ColorModel()
;;;39         {
;;;40             m_type = 0;
;;;41             // Lines have their own constructors
;;;42         }
;;;43     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2302              MOVS     r3,#2
000006  2208              MOVS     r2,#8
000008  4908              LDR      r1,|L19.44|
00000a  1d20              ADDS     r0,r4,#4
00000c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000010  1f04              SUBS     r4,r0,#4
000012  2302              MOVS     r3,#2
000014  2208              MOVS     r2,#8
000016  4905              LDR      r1,|L19.44|
000018  f1040014          ADD      r0,r4,#0x14
00001c  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000020  f1a00414          SUB      r4,r0,#0x14
000024  2000              MOVS     r0,#0
000026  6020              STR      r0,[r4,#0]
000028  4620              MOV      r0,r4
00002a  bd10              POP      {r4,pc}
                          ENDP

                  |L19.44|
                          DCD      _ZN4LineC1Ev ; Line::Line()

                          AREA ||area_number.20||, COMGROUP=_ZN10ColorModelC1Ev, LINKORDER=||i._ZN10ColorModelC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10ColorModelC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN4LineC1Ev||, COMGROUP=_ZN4LineC1Ev, CODE, READONLY, ALIGN=1

                  _ZN4LineC2Ev                  ; Alternate entry point ; Line::Line__sub_object()
                  _ZN4LineC1Ev PROC ; Line::Line()
;;;193    {
;;;194        Line()
;;;195        {
;;;196            m_slope = m_yi = 0.0;
;;;197        }
;;;198        Line(float slope, float yi)
000000  2100              MOVS     r1,#0
000002  6041              STR      r1,[r0,#4]
000004  6001              STR      r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.27||, COMGROUP=_ZN4LineC1Ev, LINKORDER=||i._ZN4LineC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4LineC1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "conncomp.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_loop___Z7__REV16j|
#line 130 "..\\libpixy\\core_cmInstr.h"
|__asm___12_conncomp_cpp_g_loop___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_loop___Z7__REVSHi|
#line 144
|__asm___12_conncomp_cpp_g_loop___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
